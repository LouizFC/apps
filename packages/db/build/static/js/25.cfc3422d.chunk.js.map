{"version":3,"sources":["Page/MysticCode/MysticCodeMainData.tsx","Page/MysticCode/MysticCodePicker.tsx","Page/MysticCode/MysticCodePortrait.tsx","Page/MysticCodePage.tsx"],"names":["MysticCodeMainData","mysticCode","this","props","name","DataTable","data","id","detail","RawDataViewer","text","region","React","Component","MysticCodePicker","history","push","FormControl","as","custom","onChange","ev","changeMysticCode","parseInt","target","value","mysticCodes","map","index","key","withRouter","MysticCodePortrait","href","extraAssets","masterFigure","male","className","rel","alt","src","female","MysticCodePage","state","loading","Manager","setRegion","Promise","all","Api","mysticCodeList","setState","document","title","error","ErrorStatus","Loading","Row","Col","xs","span","order","lg","Tabs","defaultActiveKey","tab","transition","onSelect","replace","Tab","eventKey","skills","SkillBreakdown","skill","cooldowns","levels"],"mappings":"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","file":"static/js/25.cfc3422d.chunk.js","sourcesContent":["import {MysticCode, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport DataTable from \"../../Component/DataTable\";\nimport RawDataViewer from \"../../Component/RawDataViewer\";\n\ninterface IProps {\n    region: Region;\n    mysticCode: MysticCode.MysticCode;\n}\n\nclass MysticCodeMainData extends React.Component<IProps> {\n    render() {\n        const mysticCode = this.props.mysticCode;\n\n        return (\n            <div>\n                <h1>\n                    {mysticCode.name}\n                </h1>\n\n                <DataTable data={{\n                    \"ID\": mysticCode.id,\n                    \"Name\": mysticCode.name,\n                    \"Detail\": mysticCode.detail,\n                }}/>\n                <span>\n                    <RawDataViewer text=\"Nice\" data={mysticCode}/>\n                    <RawDataViewer\n                        text=\"Raw\"\n                        data={`https://api.atlasacademy.io/raw/${this.props.region}/MC/${mysticCode.id}?expand=true`}/>,\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default MysticCodeMainData;\n","import {Region} from \"@atlasacademy/api-connector\";\nimport MysticCodeBasic from \"@atlasacademy/api-connector/dist/Schema/MysticCodeBasic\";\nimport React from \"react\";\nimport {FormControl} from \"react-bootstrap\";\nimport {withRouter} from \"react-router\";\nimport {RouteComponentProps} from \"react-router-dom\";\n\ninterface Event extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps extends RouteComponentProps {\n    region: Region;\n    id: number;\n    mysticCodes: MysticCodeBasic[];\n}\n\nclass MysticCodePicker extends React.Component<IProps> {\n    private changeMysticCode(id: number) {\n        this.props.history.push(`/${this.props.region}/mystic-code/${id}`);\n    }\n\n    render() {\n        return (\n            <div>\n                Jump to:\n                <FormControl as={\"select\"} custom\n                             onChange={(ev: Event) => {\n                                 this.changeMysticCode(parseInt(ev.target.value));\n                             }}\n                             value={this.props.id}>\n                    {this.props.mysticCodes\n                        .map((mysticCode, index) => {\n                            return (\n                                <option key={index} value={mysticCode.id}>\n                                    {mysticCode.name}\n                                </option>\n                            );\n                        })\n                    }\n                </FormControl>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(MysticCodePicker);\n","import {MysticCode} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\n\nimport \"./MysticCodePortrait.css\";\n\ninterface IProps {\n    mysticCode: MysticCode.MysticCode;\n}\n\nclass MysticCodePortrait extends React.Component<IProps> {\n\n    render() {\n        return (\n            <div id={'mystic-code-portrait-wrapper'}>\n                <a href={this.props.mysticCode.extraAssets.masterFigure.male}\n                   className={'mystic-code-portrait'}\n                   target='_blank' rel=\"noopener noreferrer\">\n                    <img alt={this.props.mysticCode.name}\n                         src={this.props.mysticCode.extraAssets.masterFigure.male}/>\n                </a>\n\n                <a href={this.props.mysticCode.extraAssets.masterFigure.female}\n                   className={'mystic-code-portrait'}\n                   target='_blank' rel=\"noopener noreferrer\">\n                    <img alt={this.props.mysticCode.name}\n                         src={this.props.mysticCode.extraAssets.masterFigure.female}/>\n                </a>\n            </div>\n        );\n    }\n\n}\n\nexport default MysticCodePortrait;\n","import {MysticCode, Region} from \"@atlasacademy/api-connector\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Col, Row, Tab, Tabs} from \"react-bootstrap\";\nimport {withRouter} from \"react-router\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport SkillBreakdown from \"../Breakdown/SkillBreakdown\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport Manager from \"../Setting/Manager\";\nimport MysticCodeMainData from \"./MysticCode/MysticCodeMainData\";\nimport MysticCodePicker from \"./MysticCode/MysticCodePicker\";\nimport MysticCodePortrait from \"./MysticCode/MysticCodePortrait\";\n\ninterface IProps extends RouteComponentProps {\n    region: Region;\n    id: number;\n    tab?: string;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    id: number;\n    mysticCodes: MysticCode.MysticCodeBasic[];\n    mysticCode?: MysticCode.MysticCode;\n}\n\nclass MysticCodePage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            id: this.props.id,\n            mysticCodes: [],\n        };\n    }\n\n    async componentDidMount() {\n        try {\n            Manager.setRegion(this.props.region);\n            let [mysticCodes, mysticCode] = await Promise.all<MysticCode.MysticCodeBasic[], MysticCode.MysticCode>([\n                Api.mysticCodeList(),\n                Api.mysticCode(this.state.id),\n            ]);\n\n            this.setState({\n                loading: false,\n                mysticCodes,\n                mysticCode\n            });\n            document.title = `[${this.props.region}] Mystic Code - ${mysticCode.name} - Atlas Academy DB`\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading || !this.state.mysticCode)\n            return <Loading/>;\n\n        return (\n            <div>\n                <MysticCodePicker region={this.props.region}\n                                  mysticCodes={this.state.mysticCodes}\n                                  id={this.state.mysticCode.id}/>\n\n                <hr/>\n\n                <Row>\n                    <Col xs={{span: 12, order: 2}} lg={{span: 6, order: 1}}>\n                        <MysticCodeMainData region={this.props.region} mysticCode={this.state.mysticCode}/>\n                    </Col>\n                    <Col xs={{span: 12, order: 1}} lg={{span: 6, order: 2}}>\n                        <MysticCodePortrait mysticCode={this.state.mysticCode}/>\n                    </Col>\n                </Row>\n\n                <Tabs id={'mystic-code-tabs'} defaultActiveKey={this.props.tab ?? 'skill-1'} transition={false}\n                      onSelect={(key: string | null) => {\n                          this.props.history.replace(`/${this.props.region}/mystic-code/${this.props.id}/${key}`);\n                      }}>\n                    <Tab eventKey={'skill-1'} title={'Skill 1'}>\n                        <br/>\n                        {this.state.mysticCode.skills[0] ? (\n                            <SkillBreakdown region={this.props.region}\n                                            skill={this.state.mysticCode.skills[0]}\n                                            cooldowns={true}\n                                            levels={10}/>\n                        ) : null}\n                    </Tab>\n\n                    <Tab eventKey={'skill-2'} title={'Skill 2'}>\n                        <br/>\n                        {this.state.mysticCode.skills[1] ? (\n                            <SkillBreakdown region={this.props.region}\n                                            skill={this.state.mysticCode.skills[1]}\n                                            cooldowns={true}\n                                            levels={10}/>\n                        ) : null}\n                    </Tab>\n\n                    <Tab eventKey={'skill-3'} title={'Skill 3'}>\n                        <br/>\n                        {this.state.mysticCode.skills[2] ? (\n                            <SkillBreakdown region={this.props.region}\n                                            skill={this.state.mysticCode.skills[2]}\n                                            cooldowns={true}\n                                            levels={10}/>\n                        ) : null}\n                    </Tab>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(MysticCodePage);\n"],"sourceRoot":""}