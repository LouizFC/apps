{"version":3,"sources":["Component/RawDataViewer.tsx","Page/BuffPage.tsx","Component/DataTable.tsx"],"names":["RawDataViewer","props","state","showing","this","setState","className","style","cursor","onClick","show","icon","faSearchPlus","size","onHide","hide","Header","closeButton","Title","Body","src","data","collapsed","React","Component","BuffPage","loading","loadBuff","Connection","buff","region","id","error","location","height","name","detail","type","mergeElements","vals","map","trait","tvals","ckSelfIndv","ckOpIndv","reverseFunctions","func","index","key","DataTable","header","bordered","hover","Object","keys","dumpValue","value","element","undefined","JSON","stringify"],"mappings":"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","file":"static/js/17.0eb1b2b2.chunk.js","sourcesContent":["import {faSearchPlus} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport ReactJson from \"react-json-view\";\n\ninterface IProps {\n    data: object;\n}\n\ninterface IState {\n    showing: boolean;\n}\n\nclass RawDataViewer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showing: false\n        };\n    }\n\n    hide() {\n        this.setState({showing: false});\n    }\n\n    show() {\n        this.setState({showing: true});\n    }\n\n    render() {\n        return (\n            <div>\n                <span className={'text-primary'}\n                      style={{cursor: \"pointer\"}}\n                      onClick={() => {\n                          this.show();\n                      }}>\n                    View Raw\n                    &nbsp;\n                    <FontAwesomeIcon icon={faSearchPlus}/>\n                </span>\n\n                <Modal size={\"lg\"} show={this.state.showing} onHide={() => this.hide()}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Raw Data Viewer</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ReactJson src={this.props.data} collapsed={1}/>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default RawDataViewer;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport Connection from \"../Api/Connection\";\nimport Buff from \"../Api/Data/Buff\";\nimport Region from \"../Api/Data/Region\";\nimport BuffIcon from \"../Component/BuffIcon\";\nimport DataTable from \"../Component/DataTable\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport RawDataViewer from \"../Component/RawDataViewer\";\nimport FuncDescriptor from \"../Descriptor/FuncDescriptor\";\nimport TraitDescriptor from \"../Descriptor/TraitDescriptor\";\nimport {mergeElements} from \"../Helper/OutputHelper\";\n\ninterface IProps {\n    region: Region;\n    id: number;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    buff?: Buff;\n}\n\nclass BuffPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.loadBuff();\n    }\n\n    async loadBuff() {\n        try {\n            const buff = await Connection.buff(this.props.region, this.props.id);\n\n            this.setState({\n                loading: false,\n                buff: buff,\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading || !this.state.buff)\n            return <Loading/>;\n\n        const buff = this.state.buff;\n\n        return (\n            <div>\n                <h1>\n                    <BuffIcon location={buff.icon} height={48}/>\n                    &nbsp;\n                    {buff.name}\n                </h1>\n\n                <br/>\n\n                <DataTable data={{\n                    \"Raw\": <RawDataViewer data={buff}/>,\n                    \"ID\": buff.id,\n                    \"Name\": buff.name,\n                    \"Detail\": buff.detail,\n                    \"Type\": buff.type,\n                    \"Buff Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.vals.map(\n                                    trait => <TraitDescriptor region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    ),\n                    \"Target Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.tvals.map(\n                                    trait => <TraitDescriptor region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    ),\n                    \"Required Self Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.ckSelfIndv.map(\n                                    trait => <TraitDescriptor region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    ),\n                    \"Required Opponent Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.ckOpIndv.map(\n                                    trait => <TraitDescriptor region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    )\n                }}/>\n\n                <h3>Related Functions</h3>\n                {buff.reverseFunctions.map((func, index) => {\n                    return (\n                        <p key={index}>\n                            <FuncDescriptor region={this.props.region} func={func}/>\n                        </p>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default BuffPage;\n","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\n\nimport \"./DataTable.css\";\nimport {Renderable} from \"../Helper/OutputHelper\";\n\ninterface IProp {\n    header?: JSX.Element | string,\n    data: {\n        [key: string]: Renderable | object;\n    }\n}\n\nclass DataTable extends React.Component<IProp> {\n    private static dumpValue(value: Renderable | object): Renderable {\n        if (typeof value === \"object\") {\n            const element = value as JSX.Element;\n            if (element.key !== undefined && element.props !== undefined && element.type !== undefined) {\n                return element;\n            } else {\n                return JSON.stringify(value);\n            }\n        }\n\n        return value;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.header ? (\n                    <div className={'data-header'}>\n                        {this.props.header}\n                    </div>\n                ) : null}\n\n                <Table bordered hover className={'data-table'}>\n                    <tbody>\n                    {Object.keys(this.props.data).map((key, index) => {\n                        return (\n                            <tr key={index}>\n                                <th>{key}</th>\n                                <td>{DataTable.dumpValue(this.props.data[key])}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default DataTable;\n"],"sourceRoot":""}