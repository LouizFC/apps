{"version":3,"sources":["Descriptor/RarityDescriptor.tsx","Component/FaceIcon.tsx","Page/CraftEssencesPage.tsx","Api/Data/Region.tsx","Api/ResultCache.tsx","Api/Connection.tsx"],"names":["assetMap","Map","RarityDescriptor","has","this","props","rarity","alt","src","get","style","height","React","Component","FaceIcon","location","undefined","CraftEssencesPage","state","loading","craftEssences","activeRarityFilters","Connection","craftEssenceList","region","then","list","setState","e","error","slice","reverse","length","filter","entity","indexOf","id","striped","bordered","hover","textAlign","width","map","craftEssence","index","route","collectionNo","key","align","to","type","face","name","Region","ResultCache","cache","pending","pendingCatches","fetcher","duration","value","Promise","resolve","callbacks","reject","push","set","call","forEach","callback","delete","window","setTimeout","catch","host","fetch","endpoint","a","axios","response","data","buff","func","mysticCode","mysticCodeList","noblePhantasm","quest","servant","servantList","skill","traitMap","language","Manager","query","LanguageOption","ENGLISH","NA","getCacheableCraftEssenceList","JP","DEFAULT","jp","na","names","getCacheableMysticCodeList","phase","getCacheableServantList"],"mappings":"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","file":"static/js/14.c47c113e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst assetMap = new Map<number, string>([\n    [1, './assets/star1.png'],\n    [2, './assets/star2.png'],\n    [3, './assets/star3.png'],\n    [4, './assets/star4.png'],\n    [5, './assets/star5.png'],\n]);\n\ninterface IProps {\n    rarity: number;\n    height?: number;\n}\n\nclass RarityDescriptor extends React.Component<IProps> {\n    render() {\n        return (\n            <span>\n                {assetMap.has(this.props.rarity) ? (\n                    <img alt={`${this.props.rarity} star(s)`}\n                         src={assetMap.get(this.props.rarity)}\n                         style={{height: this.props.height ?? 18}}/>\n                ) : null}\n            </span>\n        );\n    }\n}\n\nexport default RarityDescriptor;\n","import React from \"react\";\nimport EntityType from \"../Api/Data/EntityType\";\n\ninterface IProps {\n    type?: EntityType;\n    rarity?: number;\n    location: string;\n    height?: number;\n}\n\nclass FaceIcon extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n}\n\nexport default FaceIcon;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport BasicListEntity from \"../Api/Data/BasicListEntity\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport FaceIcon from \"../Component/FaceIcon\";\nimport Loading from \"../Component/Loading\";\nimport RarityDescriptor from \"../Descriptor/RarityDescriptor\";\n\nimport \"./CraftEssencesPage.css\";\n\ninterface Event extends React.MouseEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    craftEssences: BasicListEntity[];\n    activeRarityFilters: number[];\n}\n\nclass CraftEssencesPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            craftEssences: [],\n            activeRarityFilters: [],\n        };\n    }\n\n    componentDidMount() {\n        try {\n            Connection.craftEssenceList(this.props.region).then(list => {\n                this.setState({\n                    loading: false,\n                    craftEssences: list\n                });\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    private craftEssences(): BasicListEntity[] {\n        let list = this.state.craftEssences.slice().reverse();\n\n        if (this.state.activeRarityFilters.length > 0) {\n            list = list.filter(entity => {\n                return this.state.activeRarityFilters.indexOf(entity.rarity) !== -1;\n            });\n        }\n\n        return list;\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div id={'craft-essences'}>\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Thumbnail</th>\n                        <th>Name</th>\n                        <th>Rarity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.craftEssences()\n                        .map((craftEssence, index) => {\n                            const route = `/${this.props.region}/craft-essence/${craftEssence.collectionNo}`;\n\n                            return <tr key={index}>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        {craftEssence.collectionNo}\n                                    </Link>\n                                </td>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        <FaceIcon type={craftEssence.type}\n                                                  rarity={craftEssence.rarity}\n                                                  location={craftEssence.face}\n                                                  height={50}/>\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to={route}>\n                                        {craftEssence.name}\n                                    </Link>\n                                </td>\n                                <td>\n                                    <RarityDescriptor rarity={craftEssence.rarity}/>\n                                </td>\n                            </tr>\n                        })\n                    }\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssencesPage;\n","enum Region {\n    JP = 'JP',\n    NA = 'NA'\n}\n\nexport default Region;\n","class ResultCache<K, V> {\n    private cache = new Map<K, V>();\n    private pending = new Map<K, Function[]>();\n    private pendingCatches = new Map<K, Function[]>();\n\n    get(key: K, fetcher: Function, duration: number | null): Promise<V> {\n        const value = this.cache.get(key);\n        if (value !== undefined) {\n            return new Promise<V>(resolve => {\n                resolve(value);\n            });\n        }\n\n        const callbacks = this.pending.get(key);\n        if (callbacks !== undefined) {\n            return new Promise<V>((resolve, reject) => {\n                callbacks.push(resolve);\n\n                const catches = this.pendingCatches.get(key) ?? [];\n                catches.push(reject);\n            });\n        }\n\n        this.pending.set(key, []);\n        this.pendingCatches.set(key, []);\n        return new Promise<V>((resolve, reject) => {\n            fetcher\n                .call(null)\n                .then((value: V) => {\n                    const callbacks = this.pending.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, value);\n                    });\n\n                    this.cache.set(key, value);\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    if (duration !== null) {\n                        window.setTimeout(() => {\n                            this.cache.delete(key);\n                        }, duration);\n                    }\n\n                    resolve(value);\n                })\n                .catch((error: any) => {\n                    const callbacks = this.pendingCatches.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, error);\n                    });\n\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport default ResultCache;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption} from \"../Setting/Option\";\nimport BasicListEntity from \"./Data/BasicListEntity\";\nimport Buff from \"./Data/Buff\";\nimport CraftEssence from \"./Data/CraftEssence\";\nimport Func from \"./Data/Func\";\nimport MysticCode from \"./Data/MysticCode\";\nimport NoblePhantasm from \"./Data/NoblePhantasm\";\nimport Quest from \"./Data/Quest\";\nimport Region from \"./Data/Region\";\nimport Servant from \"./Data/Servant\";\nimport Skill from \"./Data/Skill\";\nimport TraitMap from \"./Data/TraitMap\";\nimport ResultCache from \"./ResultCache\";\n\nconst host = 'https://api.atlasacademy.io',\n    cacheDuration = 20 * 1000,\n    fetch = async function <T>(endpoint: string): Promise<T> {\n        const response = await axios.get<T>(endpoint);\n\n        return response.data;\n    },\n    cache = {\n        buff: new ResultCache<string, Buff>(),\n        craftEssence: new ResultCache<string, CraftEssence>(),\n        craftEssenceList: new ResultCache<Region, BasicListEntity[]>(),\n        func: new ResultCache<string, Func>(),\n        mysticCode: new ResultCache<string, MysticCode>(),\n        mysticCodeList: new ResultCache<Region, MysticCode[]>(),\n        noblePhantasm: new ResultCache<string, NoblePhantasm>(),\n        quest: new ResultCache<string, Quest>(),\n        servant: new ResultCache<string, Servant>(),\n        servantList: new ResultCache<Region, BasicListEntity[]>(),\n        skill: new ResultCache<string, Skill>(),\n        traitMap: new ResultCache<Region, TraitMap>(),\n    };\n\nclass Connection {\n    static buff(region: Region, id: number): Promise<Buff> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.buff.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Buff>(`${host}/nice/${region}/buff/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static craftEssence(region: Region, id: number): Promise<CraftEssence> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.craftEssence.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/equip/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async craftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableCraftEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableCraftEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableCraftEssenceList(Region.JP),\n            na = await Connection.getCacheableCraftEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static func(region: Region, id: number): Promise<Func> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.func.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Func>(`${host}/nice/${region}/function/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static mysticCode(region: Region, id: number): Promise<MysticCode> {\n        const key = `${region}-${id}`;\n\n        return cache.mysticCode.get(\n            key,\n            () => {\n                return fetch<MysticCode>(`${host}/nice/${region}/MC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async mysticCodeList(region: Region): Promise<MysticCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableMysticCodeList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableMysticCodeList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableMysticCodeList(Region.JP),\n            na = await Connection.getCacheableMysticCodeList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<MysticCode>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static noblePhantasm(region: Region, id: number): Promise<NoblePhantasm> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.noblePhantasm.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<NoblePhantasm>(`${host}/nice/${region}/NP/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static quest(region: Region, id: number, phase: number): Promise<Quest> {\n        const key = `${region}-${id}-${phase}`;\n\n        return cache.quest.get(\n            key,\n            () => {\n                return fetch<Quest>(`${host}/nice/${region}/quest/${id}/${phase}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static servant(region: Region, id: number): Promise<Servant> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.servant.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/servant/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async servantList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableServantList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableServantList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableServantList(Region.JP),\n            na = await Connection.getCacheableServantList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static skill(region: Region, id: number): Promise<Skill> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.skill.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Skill>(`${host}/nice/${region}/skill/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static traitMap(region: Region): Promise<TraitMap> {\n        return cache.traitMap.get(\n            region,\n            () => {\n                return fetch<TraitMap>(`${host}/export/${region}/nice_trait.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableCraftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        return cache.craftEssenceList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_equip.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableMysticCodeList(region: Region): Promise<MysticCode[]> {\n        return cache.mysticCodeList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/nice_mystic_code.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableServantList(region: Region): Promise<BasicListEntity[]> {\n        return cache.servantList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_servant.json`);\n            },\n            null\n        );\n    }\n}\n\nexport default Connection;\n"],"sourceRoot":""}