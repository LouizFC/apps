{"version":3,"sources":["Component/DataTable.tsx","Component/RawDataViewer.tsx","Page/QuestPage.tsx","Api/ResultCache.tsx","Api/Connection.tsx"],"names":["DataTable","this","props","header","className","bordered","hover","Object","keys","data","map","key","index","dumpValue","value","element","undefined","type","JSON","stringify","React","Component","RawDataViewer","state","showing","setState","axios","get","error","style","cursor","onClick","show","icon","faSearchPlus","size","onHide","hide","Header","closeButton","Title","Body","src","collapsed","QuestPage","loading","loadQuest","Connection","quest","region","id","phase","name","ResultCache","cache","Map","pending","pendingCatches","fetcher","duration","Promise","resolve","callbacks","reject","push","set","call","then","forEach","callback","delete","window","setTimeout","catch","host","fetch","endpoint","a","response","buff","commandCode","commandCodes","craftEssence","craftEssenceList","func","mysticCode","mysticCodeList","noblePhantasm","servant","servantList","skill","traitMap","language","Manager","query","LanguageOption","ENGLISH","Region","NA","getCommandCodeEssenceList","JP","DEFAULT","jp","na","names","entity","getCacheableCraftEssenceList","getCacheableMysticCodeList","source","encodeURI","text","target","team"],"mappings":"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","file":"static/js/15.f5abbe83.chunk.js","sourcesContent":["import React from \"react\";\nimport {Table} from \"react-bootstrap\";\n\nimport \"./DataTable.css\";\nimport {Renderable} from \"../Helper/OutputHelper\";\n\ninterface IProp {\n    header?: JSX.Element | string,\n    data: {\n        [key: string]: Renderable | object;\n    }\n}\n\nclass DataTable extends React.Component<IProp> {\n    private static dumpValue(value: Renderable | object): Renderable {\n        if (typeof value === \"object\") {\n            const element = value as JSX.Element;\n            if (element.key !== undefined && element.props !== undefined && element.type !== undefined) {\n                return element;\n            } else {\n                return JSON.stringify(value);\n            }\n        }\n\n        return value;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.header ? (\n                    <div className={'data-header'}>\n                        {this.props.header}\n                    </div>\n                ) : null}\n\n                <Table bordered hover className={'data-table'}>\n                    <tbody>\n                    {Object.keys(this.props.data).map((key, index) => {\n                        return (\n                            <tr key={index}>\n                                <th>{key}</th>\n                                <td>{DataTable.dumpValue(this.props.data[key])}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default DataTable;\n","import {faSearchPlus} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport ReactJson from \"react-json-view\";\n\ninterface IProps {\n    data: object | string;\n}\n\ninterface IState {\n    data?: object;\n    showing: boolean;\n}\n\nclass RawDataViewer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showing: false\n        };\n    }\n\n    hide() {\n        this.setState({showing: false});\n    }\n\n    async show() {\n        if (this.state.data) {\n            this.setState({showing: true});\n        } else if (typeof this.props.data === \"object\") {\n            this.setState({showing: true, data: this.props.data});\n        } else {\n            try {\n                this.setState({\n                    showing: true,\n                    data: (await axios.get(this.props.data)).data,\n                });\n            } catch (e) {\n                this.setState({\n                    showing: true,\n                    data: {error: e}\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <span className={'text-primary'}\n                      style={{cursor: \"pointer\"}}\n                      onClick={() => {\n                          this.show();\n                      }}>\n                    View\n                    &nbsp;\n                    <FontAwesomeIcon icon={faSearchPlus}/>\n                </span>\n\n                <Modal size={\"lg\"} show={this.state.showing} onHide={() => this.hide()}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Raw Data Viewer</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {this.state.data ? (\n                            <ReactJson src={this.state.data} collapsed={1}/>\n                        ) : null}\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default RawDataViewer;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport Connection from \"../Api/Connection\";\nimport Quest from \"../Api/Data/Quest\";\nimport Region from \"../Api/Data/Region\";\nimport DataTable from \"../Component/DataTable\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport RawDataViewer from \"../Component/RawDataViewer\";\n\ninterface IProps {\n    region: Region;\n    id: number;\n    phase: number;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    quest?: Quest;\n}\n\nclass QuestPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        this.loadQuest();\n    }\n\n    async loadQuest() {\n        try {\n            const quest = await Connection.quest(this.props.region, this.props.id, this.props.phase);\n\n            this.setState({\n                loading: false,\n                quest: quest,\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error} />;\n\n        if (this.state.loading || !this.state.quest)\n            return <Loading/>;\n\n        const quest = this.state.quest;\n\n        return (\n            <div>\n                <h1>{quest.name}</h1>\n\n                <br/>\n\n                <DataTable data={{\n                    \"Raw\": <RawDataViewer data={quest}/>,\n                    \"ID\": quest.id,\n                    \"Phase\": quest.phase,\n                    \"Name\": quest.name,\n                    \"Type\": quest.type,\n                }}/>\n            </div>\n        );\n    }\n}\n\nexport default QuestPage;\n","class ResultCache<K, V> {\n    private cache = new Map<K, V>();\n    private pending = new Map<K, Function[]>();\n    private pendingCatches = new Map<K, Function[]>();\n\n    get(key: K, fetcher: Function, duration: number | null): Promise<V> {\n        const value = this.cache.get(key);\n        if (value !== undefined) {\n            return new Promise<V>(resolve => {\n                resolve(value);\n            });\n        }\n\n        const callbacks = this.pending.get(key);\n        if (callbacks !== undefined) {\n            return new Promise<V>((resolve, reject) => {\n                callbacks.push(resolve);\n\n                const catches = this.pendingCatches.get(key) ?? [];\n                catches.push(reject);\n            });\n        }\n\n        this.pending.set(key, []);\n        this.pendingCatches.set(key, []);\n        return new Promise<V>((resolve, reject) => {\n            fetcher\n                .call(null)\n                .then((value: V) => {\n                    const callbacks = this.pending.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, value);\n                    });\n\n                    this.cache.set(key, value);\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    if (duration !== null) {\n                        window.setTimeout(() => {\n                            this.cache.delete(key);\n                        }, duration);\n                    }\n\n                    resolve(value);\n                })\n                .catch((error: any) => {\n                    const callbacks = this.pendingCatches.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, error);\n                    });\n\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport default ResultCache;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption} from \"../Setting/Option\";\nimport BasicListEntity from \"./Data/BasicListEntity\";\nimport Buff, {BuffType} from \"./Data/Buff\";\nimport CommandCode from \"./Data/CommandCode\";\nimport CraftEssence from \"./Data/CraftEssence\";\nimport Func, {FuncTargetTeam, FuncTargetType, FuncType} from \"./Data/Func\";\nimport MysticCode from \"./Data/MysticCode\";\nimport NoblePhantasm from \"./Data/NoblePhantasm\";\nimport Quest from \"./Data/Quest\";\nimport Region from \"./Data/Region\";\nimport Servant from \"./Data/Servant\";\nimport Skill from \"./Data/Skill\";\nimport TraitMap from \"./Data/TraitMap\";\nimport ResultCache from \"./ResultCache\";\n\nconst host = 'https://api.atlasacademy.io',\n    cacheDuration = 20 * 1000,\n    fetch = async function <T>(endpoint: string): Promise<T> {\n        const response = await axios.get<T>(endpoint);\n\n        return response.data;\n    },\n    cache = {\n        buff: new ResultCache<string, Buff>(),\n        commandCode: new ResultCache<string, CommandCode>(),\n        commandCodes: new ResultCache<Region, CommandCode[]>(),\n        craftEssence: new ResultCache<string, CraftEssence>(),\n        craftEssenceList: new ResultCache<Region, BasicListEntity[]>(),\n        func: new ResultCache<string, Func>(),\n        mysticCode: new ResultCache<string, MysticCode>(),\n        mysticCodeList: new ResultCache<Region, MysticCode[]>(),\n        noblePhantasm: new ResultCache<string, NoblePhantasm>(),\n        quest: new ResultCache<string, Quest>(),\n        servant: new ResultCache<string, Servant>(),\n        servantList: new ResultCache<string, BasicListEntity[]>(),\n        skill: new ResultCache<string, Skill>(),\n        traitMap: new ResultCache<Region, TraitMap>(),\n    };\n\nclass Connection {\n    static buff(region: Region, id: number): Promise<Buff> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.buff.get(\n            key,\n            () => {\n                let query = '?reverse=true&reverseDepth=skillNp' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Buff>(`${host}/nice/${region}/buff/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static commandCode(region: Region, id: number): Promise<CommandCode> {\n        const key = `${region}-${id}`;\n\n        return cache.commandCode.get(\n            key,\n            () => {\n                return fetch<CommandCode>(`${host}/nice/${region}/CC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async commandCodeList(region: Region): Promise<CommandCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCommandCodeEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCommandCodeEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCommandCodeEssenceList(Region.JP),\n            na = await Connection.getCommandCodeEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static craftEssence(region: Region, id: number): Promise<CraftEssence> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.craftEssence.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/equip/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async craftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableCraftEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableCraftEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableCraftEssenceList(Region.JP),\n            na = await Connection.getCacheableCraftEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static func(region: Region, id: number): Promise<Func> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.func.get(\n            key,\n            () => {\n                let query = '?reverse=true&reverseDepth=servant' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Func>(`${host}/nice/${region}/function/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static mysticCode(region: Region, id: number): Promise<MysticCode> {\n        const key = `${region}-${id}`;\n\n        return cache.mysticCode.get(\n            key,\n            () => {\n                return fetch<MysticCode>(`${host}/nice/${region}/MC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async mysticCodeList(region: Region): Promise<MysticCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableMysticCodeList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableMysticCodeList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableMysticCodeList(Region.JP),\n            na = await Connection.getCacheableMysticCodeList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<MysticCode>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static noblePhantasm(region: Region, id: number): Promise<NoblePhantasm> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.noblePhantasm.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<NoblePhantasm>(`${host}/nice/${region}/NP/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static quest(region: Region, id: number, phase: number): Promise<Quest> {\n        const key = `${region}-${id}-${phase}`;\n\n        return cache.quest.get(\n            key,\n            () => {\n                return fetch<Quest>(`${host}/nice/${region}/quest/${id}/${phase}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static servant(region: Region, id: number): Promise<Servant> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.servant.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/servant/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async servantList(region: Region): Promise<BasicListEntity[]> {\n        const language = Manager.language(),\n            key = `${region}-${language}`;\n\n        let source: string;\n\n        if (region === Region.NA) {\n            source = `${host}/export/NA/basic_servant.json`;\n        } else if (region === Region.JP && language === LanguageOption.DEFAULT) {\n            source = `${host}/export/JP/basic_servant.json`;\n        } else {\n            source = `${host}/export/JP/basic_servant_lang_en.json`;\n        }\n\n        return cache.servantList.get(\n            key,\n            () => {\n                return fetch<BasicListEntity[]>(source);\n            },\n            null\n        );\n    }\n\n    static skill(region: Region, id: number): Promise<Skill> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.skill.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Skill>(`${host}/nice/${region}/skill/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static traitMap(region: Region): Promise<TraitMap> {\n        return cache.traitMap.get(\n            region,\n            () => {\n                return fetch<TraitMap>(`${host}/export/${region}/nice_trait.json`);\n            },\n            null\n        );\n    }\n\n    static searchBuffs(region: Region, name?: string, type?: BuffType): Promise<Buff[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (name)\n            query += \"&name=\" + encodeURI(name);\n        if (type)\n            query += \"&type=\" + type;\n\n        return fetch<Buff[]>(`${host}/nice/${region}/buff/search${query}`);\n    }\n\n    static searchFuncs(region: Region,\n                       text?: string,\n                       type?: FuncType,\n                       target?: FuncTargetType,\n                       team?: FuncTargetTeam): Promise<Func[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (text)\n            query += \"&popupText=\" + encodeURI(text);\n        if (type)\n            query += \"&type=\" + type;\n        if (target)\n            query += \"&targetType=\" + target;\n        if (team)\n            query += \"&targetTeam=\" + team;\n\n        return fetch<Func[]>(`${host}/nice/${region}/function/search${query}`);\n    }\n\n    private static async getCommandCodeEssenceList(region: Region): Promise<CommandCode[]> {\n        return cache.commandCodes.get(\n            region,\n            () => {\n                return fetch<CommandCode[]>(`${host}/export/${region}/nice_command_code.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableCraftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        return cache.craftEssenceList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_equip.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableMysticCodeList(region: Region): Promise<MysticCode[]> {\n        return cache.mysticCodeList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/nice_mystic_code.json`);\n            },\n            null\n        );\n    }\n}\n\nexport default Connection;\n"],"sourceRoot":""}