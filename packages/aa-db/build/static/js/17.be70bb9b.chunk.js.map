{"version":3,"sources":["Descriptor/RarityDescriptor.tsx","Component/SearchableSelect.tsx","Descriptor/ProfileConditionDescriptor.tsx","Page/Servant/ServantProfileComments.tsx","Page/CraftEssence/CraftEssenceAssets.tsx","Page/CraftEssence/CraftEssenceMainData.tsx","Page/CraftEssence/CraftEssencePicker.tsx","Page/CraftEssence/CraftEssencePortrait.tsx","Page/CraftEssence/CraftEssenceProfileComments.tsx","Page/CraftEssence/CraftEssenceStatGrowth.tsx","Page/CraftEssencePage.tsx"],"names":["assetMap","Map","RarityDescriptor","has","this","props","rarity","alt","src","get","style","height","React","Component","SearchableSelect","state","ref","createRef","selected","focused","results","setState","undefined","current","clear","value","description","labels","disableLabelStyling","label","getDescription","hideAll","getOption","concat","options","map","length","onChange","id","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","onFocus","hideReset","className","onClick","e","preventDefault","clearSelection","onMouseDown","icon","faTimes","ProfileConditionDescriptor","comment","condition","condMessage","condType","Profile","ProfileCommentConditionType","NONE","QUEST_CLEAR","condValues","Fragment","QuestDescriptor","region","questId","questPhase","condValue2","SVT_FRIENDSHIP","ServantProfileComments","Table","comments","index","key","handleNewLine","CraftEssenceAssets","assets","equip","push","Object","values","flattenAssets","mergeElements","asset","href","target","rel","maxWidth","displayAssets","craftEssence","extraAssets","charaGraph","equipFace","faces","CraftEssenceMainData","name","DataTable","data","RawDataViewer","collectionNo","cost","lvMax","hpBase","atkBase","hpMax","atkMax","CraftEssencePicker","history","craftEssences","slice","reverse","craftEssenceLabels","toString","padStart","Form","Group","Label","changeCraftEssence","withRouter","CraftEssencePortrait","shift","CraftEssenceProfileComments","CraftEssenceStatGrowth","responsive","Array","_","i","formatNumber","hpGrowth","atkGrowth","CraftEssencePage","loading","Manager","setRegion","loadCraftEssence","Promise","all","Api","craftEssenceList","traitList","error","ErrorStatus","Loading","Row","Col","xs","span","order","lg","Tabs","defaultActiveKey","tab","transition","onSelect","replace","Tab","eventKey","title","skills","skill","SkillBreakdown","cooldowns","profile"],"mappings":"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","file":"static/js/17.be70bb9b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst assetMap = new Map<number, string>([\n    [1, './assets/star1.png'],\n    [2, './assets/star2.png'],\n    [3, './assets/star3.png'],\n    [4, './assets/star4.png'],\n    [5, './assets/star5.png'],\n]);\n\ninterface IProps {\n    rarity: number;\n    height?: number;\n}\n\nclass RarityDescriptor extends React.Component<IProps> {\n    render() {\n        return (\n            <span>\n                {assetMap.has(this.props.rarity) ? (\n                    <img alt={`${this.props.rarity} star(s)`}\n                         src={assetMap.get(this.props.rarity)}\n                         style={{height: this.props.height ?? 18}}/>\n                ) : null}\n            </span>\n        );\n    }\n}\n\nexport default RarityDescriptor;\n","import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n    hideAll?: boolean,\n    hideReset?: boolean,\n    disableLabelStyling?: boolean,\n    maxResults?: number,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    focused: boolean,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            focused: false,\n            results: false,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getDescription(value?: T): string {\n        if (value === undefined)\n            return 'All';\n\n        const description = this.props.labels.get(value);\n\n        if (this.props.disableLabelStyling) {\n            if (description)\n                return description;\n\n            return typeof value === 'string' ? value : 'Unknown';\n        }\n\n        return description\n            ? `${description} - ${value}`\n            : `(${value})`;\n    }\n\n    private getOption(value?: T): Option<T> {\n        const label = this.getDescription(value);\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return (this.props.hideAll ? [] : [this.getOption()])\n            .concat(\n                this.props.options.map(value => this.getOption(value))\n            );\n    }\n\n    private resetInput() {\n        this.setState({focused: false, results: false});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={this.getDescription(this.state.selected)}\n                       selected={this.state.focused && this.state.results ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={this.props.maxResults ?? 1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}\n                       onFocus={() => {\n                           this.setState({focused: true});\n                       }}>\n\n                {this.props.hideReset ? null : (\n                    <button className='searchable-select-clear'\n                            onClick={e => {\n                                e.preventDefault();\n                                this.clearSelection();\n                            }}\n                            onMouseDown={e => {\n                                // Prevent input from losing focus.\n                                e.preventDefault();\n                            }}>\n                        <FontAwesomeIcon icon={faTimes}/>\n                    </button>\n                )}\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","import {Profile, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport QuestDescriptor from \"./QuestDescriptor\";\n\ninterface IProps {\n    region: Region;\n    comment: Profile.ProfileComment;\n}\n\nclass ProfileConditionDescriptor extends React.Component<IProps> {\n    render() {\n        const comment = this.props.comment;\n\n        let condition: JSX.Element | string = this.props.comment.condMessage;\n\n        if (!condition) {\n            if (comment.condType === Profile.ProfileCommentConditionType.NONE) {\n                condition = \"None\";\n            } else if (\n                comment.condType === Profile.ProfileCommentConditionType.QUEST_CLEAR\n                && comment.condValues\n                && comment.condValues.length > 0\n            ) {\n                condition = <React.Fragment>\n                    <QuestDescriptor region={this.props.region}\n                                     questId={comment.condValues[0]}\n                                     questPhase={comment.condValue2}/>\n                    &nbsp;Cleared\n                </React.Fragment>;\n            } else if (\n                comment.condType === Profile.ProfileCommentConditionType.SVT_FRIENDSHIP\n                && comment.condValues\n                && comment.condValues.length > 0\n            ) {\n                condition = `Bond Level ${comment.condValues[0]}`;\n            }\n        }\n\n        return (\n            <span>{condition}</span>\n        );\n    }\n}\n\nexport default ProfileConditionDescriptor;\n","import {Region} from \"@atlasacademy/api-connector\";\nimport {ProfileComment} from \"@atlasacademy/api-connector/dist/Schema/Profile\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport ProfileConditionDescriptor from \"../../Descriptor/ProfileConditionDescriptor\";\nimport {handleNewLine} from \"../../Helper/OutputHelper\";\n\ninterface IProps {\n    region: Region;\n    comments: ProfileComment[];\n}\n\nclass ServantProfileComments extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                <h3>Profile</h3>\n\n                <Table>\n                    <thead>\n                    <tr>\n                        <th>Condition</th>\n                        <th>Message</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.comments.map((comment, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>\n                                    <ProfileConditionDescriptor region={this.props.region} comment={comment}/>\n                                </td>\n                                <td>{handleNewLine(comment.comment)}</td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default ServantProfileComments;\n","import {CraftEssence, Entity, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {mergeElements} from \"../../Helper/OutputHelper\";\n\ninterface IProps {\n    region: Region;\n    craftEssence: CraftEssence.CraftEssence;\n}\n\nclass CraftEssenceAssets extends React.Component<IProps> {\n    private flattenAssets(assetMap: Entity.EntityAssetMap | undefined): string[] {\n        if (!assetMap)\n            return [];\n\n        const assets = [];\n\n        if (assetMap.equip)\n            assets.push(...Object.values(assetMap.equip));\n\n        return assets;\n    }\n\n    private displayAssets(assetMap: Entity.EntityAssetMap | undefined) {\n        const assets = this.flattenAssets(assetMap);\n\n        return mergeElements(\n            assets.map(asset => <a href={asset} target={'_blank'} rel={'noopener noreferrer'}>\n                <img alt={''} src={asset} style={{maxWidth: \"100%\"}}/>\n            </a>),\n            ''\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Portraits</h3>\n                <div>\n                    {this.displayAssets(this.props.craftEssence.extraAssets.charaGraph)}\n                </div>\n\n                <hr/>\n\n                <h3>Formation</h3>\n                <div>\n                    {this.displayAssets(this.props.craftEssence.extraAssets.equipFace)}\n                </div>\n\n                <hr/>\n\n                <h3>Thumbnail</h3>\n                <div>\n                    {this.displayAssets(this.props.craftEssence.extraAssets.faces)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssenceAssets;\n","import {CraftEssence, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport DataTable from \"../../Component/DataTable\";\nimport RawDataViewer from \"../../Component/RawDataViewer\";\nimport RarityDescriptor from \"../../Descriptor/RarityDescriptor\";\n\ninterface IProps {\n    region: Region;\n    craftEssence: CraftEssence.CraftEssence;\n}\n\nclass CraftEssenceMainData extends React.Component<IProps> {\n    render() {\n        const craftEssence = this.props.craftEssence;\n\n        return (\n            <div>\n                <h1>\n                    {craftEssence.name}\n                </h1>\n\n                <DataTable data={{\n                    \"Data\": <RawDataViewer data={craftEssence}/>,\n                    \"Raw\": <RawDataViewer\n                        data={`https://api.atlasacademy.io/raw/${this.props.region}/equip/${craftEssence.id}?expand=true&lore=true`}/>,\n                    \"ID\": craftEssence.id,\n                    \"Collection\": craftEssence.collectionNo,\n                    \"Name\": craftEssence.name,\n                    \"Rarity\": <RarityDescriptor rarity={craftEssence.rarity}/>,\n                    \"Cost\": craftEssence.cost,\n                    \"Max Lv.\": craftEssence.lvMax,\n                    \"Base Hp\": craftEssence.hpBase,\n                    \"Base Atk\": craftEssence.atkBase,\n                    \"Max Hp\": craftEssence.hpMax,\n                    \"Max Atk\": craftEssence.atkMax,\n                }}/>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssenceMainData;\n","import {CraftEssence, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {withRouter} from \"react-router\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport SearchableSelect from \"../../Component/SearchableSelect\";\n\ninterface Event extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps extends RouteComponentProps {\n    region: Region;\n    id: number;\n    craftEssences: CraftEssence.CraftEssenceBasic[];\n}\n\nclass CraftEssencePicker extends React.Component<IProps> {\n    private changeCraftEssence(id: number) {\n        this.props.history.push(`/${this.props.region}/craft-essence/${id}`);\n    }\n\n    render() {\n        const craftEssences = this.props.craftEssences.slice().reverse(),\n            craftEssenceLabels = new Map<number, string>(craftEssences.map(craftEssences => [\n                craftEssences.collectionNo,\n                `${craftEssences.collectionNo.toString().padStart(4, '0')} - ${craftEssences.name}`\n            ]));\n\n        return (\n            <div>\n                <form>\n                    <Form.Group>\n                        <Form.Label>Jump to:</Form.Label>\n                        <SearchableSelect<number> id='craftEssencePicker'\n                                                  options={craftEssences.map(craftEssence => craftEssence.collectionNo)}\n                                                  labels={craftEssenceLabels}\n                                                  selected={this.props.id}\n                                                  hideAll={true}\n                                                  hideReset={true}\n                                                  disableLabelStyling={true}\n                                                  maxResults={20}\n                                                  onChange={(value?: number) => {\n                                                      if (value) {\n                                                          this.changeCraftEssence(value);\n                                                      }\n                                                  }}/>\n                    </Form.Group>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CraftEssencePicker);\n","import {CraftEssence} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\n\nimport \"./CraftEssencePortrait.css\";\n\ninterface IProps {\n    craftEssence: CraftEssence.CraftEssence;\n}\n\nclass CraftEssencePortrait extends React.Component<IProps> {\n\n    private asset(): string | undefined {\n        const assetMap = this.props.craftEssence.extraAssets.charaGraph.equip;\n        if (!assetMap)\n            return undefined;\n\n        return Object.values(assetMap).shift();\n    }\n\n    render() {\n        const asset = this.asset();\n\n        return (\n            <div>\n                <img alt={this.props.craftEssence.name}\n                     id={'craft-essence-portrait'}\n                     src={asset}/>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssencePortrait;\n","import ServantProfileComments from \"../Servant/ServantProfileComments\";\n\nclass CraftEssenceProfileComments extends ServantProfileComments {\n}\n\nexport default CraftEssenceProfileComments;\n","import {CraftEssence, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {formatNumber} from \"../../Helper/OutputHelper\";\n\ninterface IProps {\n    region: Region;\n    craftEssence: CraftEssence.CraftEssence;\n}\n\nclass CraftEssenceStatGrowth extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>Level</th>\n                        <th>HP</th>\n                        <th>ATK</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {[...Array(this.props.craftEssence.lvMax)].map((_, i) => {\n                        const index = this.props.craftEssence.lvMax - i - 1;\n\n                        return (\n                            <tr key={i}>\n                                <td>{index + 1}</td>\n                                <td>{formatNumber(this.props.craftEssence.hpGrowth[index])}</td>\n                                <td>{formatNumber(this.props.craftEssence.atkGrowth[index])}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssenceStatGrowth;\n","import {CraftEssence, Region, Trait} from \"@atlasacademy/api-connector\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Col, Row, Tab, Tabs} from \"react-bootstrap\";\nimport {withRouter} from \"react-router\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport SkillBreakdown from \"../Breakdown/SkillBreakdown\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport Manager from \"../Setting/Manager\";\nimport CraftEssenceAssets from \"./CraftEssence/CraftEssenceAssets\";\nimport CraftEssenceMainData from \"./CraftEssence/CraftEssenceMainData\";\nimport CraftEssencePicker from \"./CraftEssence/CraftEssencePicker\";\nimport CraftEssencePortrait from \"./CraftEssence/CraftEssencePortrait\";\nimport CraftEssenceProfileComments from \"./CraftEssence/CraftEssenceProfileComments\";\nimport CraftEssenceStatGrowth from \"./CraftEssence/CraftEssenceStatGrowth\";\n\ninterface IProps extends RouteComponentProps {\n    region: Region;\n    id: number;\n    tab?: string;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    id: number;\n    craftEssences: CraftEssence.CraftEssenceBasic[];\n    craftEssence?: CraftEssence.CraftEssence;\n}\n\nclass CraftEssencePage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            id: this.props.id,\n            craftEssences: [],\n        };\n    }\n\n    componentDidMount() {\n        Manager.setRegion(this.props.region);\n        this.loadCraftEssence();\n    }\n\n    async loadCraftEssence() {\n        try {\n            let [craftEssences, craftEssence] = await Promise.all<CraftEssence.CraftEssenceBasic[], CraftEssence.CraftEssence, Trait.Trait[]>([\n                Api.craftEssenceList(),\n                Api.craftEssence(this.state.id),\n                Api.traitList()\n            ]);\n\n            this.setState({\n                loading: false,\n                craftEssences,\n                craftEssence\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading || !this.state.craftEssence)\n            return <Loading/>;\n\n        const craftEssence = this.state.craftEssence;\n\n        return (\n            <div>\n                <CraftEssencePicker region={this.props.region}\n                                    craftEssences={this.state.craftEssences}\n                                    id={this.state.craftEssence.collectionNo}/>\n                <hr/>\n\n                <Row>\n                    <Col xs={{span: 12, order: 2}} lg={{span: 6, order: 1}}>\n                        <CraftEssenceMainData region={this.props.region} craftEssence={this.state.craftEssence}/>\n                    </Col>\n                    <Col xs={{span: 12, order: 1}} lg={{span: 6, order: 2}}>\n                        <CraftEssencePortrait craftEssence={this.state.craftEssence}/>\n                    </Col>\n                </Row>\n\n                <Tabs id={'ce-tabs'} defaultActiveKey={this.props.tab ?? 'effects'} transition={false}\n                      onSelect={(key?: string) => {\n                          this.props.history.replace(`/${this.props.region}/craft-essence/${this.props.id}/${key}`);\n                      }}>\n                    <Tab eventKey={'effects'} title={'Effects'}>\n                        <br/>\n                        <Row>\n                            {this.state.craftEssence.skills\n                                .map((skill, index) => {\n                                    return (\n                                        <Col key={index} xs={12} lg={craftEssence.skills.length > 1 ? 6 : 12}>\n                                            <SkillBreakdown region={this.props.region}\n                                                            skill={skill}\n                                                            cooldowns={false}/>\n                                        </Col>\n                                    );\n                                })}\n                        </Row>\n                    </Tab>\n                    <Tab eventKey={'stat-growth'} title={'Stat Growth'}>\n                        <br/>\n                        <CraftEssenceStatGrowth region={this.props.region} craftEssence={craftEssence}/>\n                    </Tab>\n                    <Tab eventKey={'profile'} title={'Profile'}>\n                        <br/>\n                        <CraftEssenceProfileComments region={this.props.region}\n                                                     comments={craftEssence.profile?.comments ?? []}/>\n                    </Tab>\n                    <Tab eventKey={'assets'} title={'Assets'}>\n                        <br/>\n                        <CraftEssenceAssets region={this.props.region}\n                                            craftEssence={craftEssence}/>\n                    </Tab>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CraftEssencePage);\n"],"sourceRoot":""}