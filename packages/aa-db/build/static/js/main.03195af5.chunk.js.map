{"version":3,"sources":["Component/Navigation.tsx","Api/Data/ClassName.tsx","Api/Connection.tsx","Component/BuffIcon.tsx","Component/ClassIcon.tsx","Component/DataTable.tsx","Component/Loading.tsx","Helper.tsx","Page/ServantPage.tsx","Component/RarityStars.tsx","Component/ServantThumbnail.tsx","Page/ServantsPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","ClassName","Navbar","bg","expand","Container","Brand","to","Collapse","Nav","NavItem","host","fetch","endpoint","a","axios","get","response","data","Connection","id","language","query","BuffIcon","alt","src","this","props","location","style","height","React","Component","classTypes","Map","classIds","SABER","ARCHER","LANCER","RIDER","CASTER","ASSASSIN","BERSERKER","SHIELDER","RULER","ALTER_EGO","AVENGER","ClassIcon","undefined","classId","has","className","rarity","type","DataTable","header","Table","bordered","hover","Object","keys","map","key","index","Loading","asPercent","value","buffIconPath","deathChanceIcon","hitCountIcon","npGainIcon","starGenIcon","ServantPage","state","loading","parseInt","servants","loadServant","Promise","all","servantList","servant","setState","history","push","renderServantPicker","Row","Col","renderServantMainData","renderServantPortrait","renderServantAdvancedData","FormControl","as","custom","onChange","ev","changeServant","target","collectionNo","name","cost","lvMax","hpMax","atkMax","gender","attribute","traits","trait","join","extraAssets","charaGraph","ascension","starAbsorb","starGen","instantDeathChance","npGain","buster","arts","quick","extra","defence","showHits","hitsDistribution","hits","hit","length","withRouter","fillChars","count","character","Array","fill","v","RarityStars","ServantThumbnail","ServantsPage","then","striped","textAlign","width","align","face","App","path","component","render","match","params","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03195af5.chunk.js","sourcesContent":["import {Container, Nav, Navbar, NavItem} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport React from \"react\";\n\nfunction Navigation() {\n    return (\n        <Navbar bg={\"dark\"} expand={\"lg\"}>\n            <Container>\n                <Navbar.Brand>\n                    <Link to=\"/\">AA-DB</Link>\n                </Navbar.Brand>\n\n                <Navbar.Collapse>\n                    <Nav>\n                        <Link to=\"/servants\">\n                            <NavItem>Servants</NavItem>\n                        </Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n}\n\nexport default Navigation;\n","enum ClassName {\n    SABER = \"saber\",\n    ARCHER = \"archer\",\n    LANCER = \"lancer\",\n    RIDER = \"rider\",\n    CASTER = \"caster\",\n    ASSASSIN = \"assassin\",\n    BERSERKER = \"berserker\",\n    SHIELDER = \"shielder\",\n    RULER = \"ruler\",\n    ALTER_EGO = \"alterEgo\",\n    AVENGER = \"avenger\",\n    GRAND_CASTER = \"grandCaster\",\n    BEAST_II = \"beastII\",\n    BEAST_I = \"beastI\",\n    MOON_CANCER = \"moonCancer\",\n    BEAST_IIIR = \"beastIIIR\",\n    FOREIGNER = \"foreigner\",\n    BEAST_IIIL = \"beastIIIL\",\n    BEAST_UNKNOWN = \"beastUnknown\",\n    ALL = \"ALL\",\n}\n\nexport default ClassName;\n","import Language from \"./Data/Language\";\nimport ServantEntity from \"./Data/ServantEntity\";\nimport ServantListEntity from \"./Data/ServantListEntity\";\n\nimport axios from \"axios\";\n\nconst host = 'https://api.atlasacademy.io';\nconst fetch = async function <T>(endpoint: string): Promise<T>\n{\n    const response = await axios.get<T>(endpoint);\n\n    return response.data;\n}\n\nclass Connection {\n\n    public static servant(id: number, language?: Language): Promise<ServantEntity>\n    {\n        let query = 'lore=true' + (language ? `&lang=${language}` : '');\n\n        return fetch<ServantEntity>(`${host}/nice/NA/servant/${id}?${query}`);\n    }\n\n    public static servantList(): Promise<ServantListEntity[]>\n    {\n        return fetch<ServantListEntity[]>(`${host}/export/NA/basic_servant.json`);\n    }\n\n}\n\nexport default Connection;\n","import React from \"react\";\n\ninterface IProp {\n    location: string;\n    height?: number;\n}\n\nclass BuffIcon extends React.Component<IProp> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location} style={{height: this.props.height ?? 25}}/>\n        );\n    }\n\n}\n\nexport default BuffIcon;\n","import React from \"react\";\nimport ClassName from \"../Api/Data/ClassName\";\n\nconst classTypes = new Map<number, number>([\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 3],\n]);\nconst unknownClassType = 3;\nconst classIds = new Map<ClassName, number>([\n    [ClassName.SABER, 1],\n    [ClassName.ARCHER, 2],\n    [ClassName.LANCER, 3],\n    [ClassName.RIDER, 4],\n    [ClassName.CASTER, 5],\n    [ClassName.ASSASSIN, 6],\n    [ClassName.BERSERKER, 7],\n    [ClassName.SHIELDER, 8],\n    [ClassName.RULER, 9],\n    [ClassName.ALTER_EGO, 10],\n    [ClassName.AVENGER, 11],\n]);\nconst unknownClassId = 12;\n\ninterface IProps {\n    className: ClassName;\n    rarity?: number;\n    height?: number;\n}\n\nclass ClassIcon extends React.Component<IProps> {\n    render() {\n        return (\n            <img alt={''} src={this.location()}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n    private location(): string {\n        let classId = classIds.has(this.props.className) ? classIds.get(this.props.className) : unknownClassId,\n            rarity = this.props.rarity ?? 5,\n            type = classTypes.has(rarity) ? classTypes.get(rarity) : unknownClassType;\n\n        return `https://assets.atlasacademy.io/GameData/NA/ClassIcons/class${type}_${classId}.png`;\n    }\n}\n\nexport default ClassIcon;\n","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\n\nimport \"./DataTable.css\";\n\ninterface IProp {\n    header?: JSX.Element | string,\n    data: {\n        [key: string]: JSX.Element | string | number;\n    }\n}\n\nclass DataTable extends React.Component<IProp> {\n    render() {\n        return (\n            <div>\n                {this.props.header ? (\n                    <div className={'data-header'}>\n                        {this.props.header}\n                    </div>\n                ) : null}\n\n                <Table bordered hover className={'data-table'}>\n                    <tbody>\n                    {Object.keys(this.props.data).map((key, index) => {\n                        return (\n                            <tr key={index}>\n                                <th>{key}</th>\n                                <td>{this.props.data[key]}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default DataTable;\n","import React from \"react\";\n\nfunction Loading() {\n    return (\n        <div>\n            Loading ...\n        </div>\n    );\n}\n\nexport default Loading;\n","export function asPercent(value: number): string {\n    const decimal = value / 10;\n\n    return `${decimal}%`;\n}\n","import React from \"react\";\nimport {Col, FormControl, Row} from \"react-bootstrap\";\nimport {withRouter} from 'react-router';\nimport {RouteComponentProps} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport ServantEntity from \"../Api/Data/ServantEntity\";\nimport ServantListEntity from \"../Api/Data/ServantListEntity\";\nimport BuffIcon from \"../Component/BuffIcon\";\nimport ClassIcon from \"../Component/ClassIcon\";\nimport DataTable from \"../Component/DataTable\";\nimport Loading from \"../Component/Loading\";\nimport {asPercent} from \"../Helper\";\n\nimport './ServantPage.css';\n\nconst buffIconPath = 'https://assets.atlasacademy.io/GameData/JP/BuffIcons',\n    deathChanceIcon = `${buffIconPath}/bufficon_337.png`,\n    hitCountIcon = `${buffIconPath}/bufficon_349.png`,\n    npGainIcon = `${buffIconPath}/bufficon_303.png`,\n    starGenIcon = `${buffIconPath}/bufficon_310.png`;\n\ninterface IProp extends RouteComponentProps {\n    id: string;\n}\n\ninterface IState {\n    loading: boolean;\n    id: number;\n    servants: ServantListEntity[];\n    servant?: ServantEntity;\n}\n\nclass ServantPage extends React.Component<IProp, IState> {\n    constructor(props: IProp) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            id: parseInt(this.props.id),\n            servants: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadServant();\n    }\n\n    async loadServant() {\n        let [servants, servant] = await Promise.all([\n            Connection.servantList(),\n            Connection.servant(this.state.id)\n        ]);\n\n        this.setState({\n            loading: false,\n            servants,\n            servant\n        });\n    }\n\n    changeServant(id: number) {\n        this.props.history.push(`/servant/${id}`);\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div id={'servant'}>\n                {this.renderServantPicker()}\n                <hr/>\n\n                <Row>\n                    <Col>\n                        {this.renderServantMainData()}\n                    </Col>\n                    <Col>\n                        {this.renderServantPortrait()}\n                    </Col>\n                </Row>\n\n                <br/>\n\n                {this.renderServantAdvancedData()}\n            </div>\n        );\n    }\n\n    renderServantPicker() {\n        return (\n            <div>\n                Jump to:\n                <FormControl as={\"select\"} custom\n                             onChange={(ev: React.ChangeEvent<HTMLInputElement>) => {\n                                 this.changeServant(parseInt(ev.target.value));\n                             }}\n                             value={this.state.id}>\n                    {this.state.servants.map((servant, index) => {\n                        return (\n                            <option key={index} value={servant.collectionNo}>\n                                {servant.name}\n                            </option>\n                        );\n                    })}\n                </FormControl>\n            </div>\n        );\n    }\n\n    renderServantMainData() {\n        if (this.state.servant === undefined)\n            return null;\n\n        return (\n            <div>\n                <h1>\n                    <ClassIcon className={this.state.servant.className} rarity={this.state.servant.rarity}/>\n                    &nbsp;\n                    {this.state.servant.name}\n                </h1>\n\n                <DataTable data={{\n                    \"ID\": this.state.servant.id,\n                    \"Collection\": this.state.servant.collectionNo,\n                    \"Name\": this.state.servant.name,\n                    \"Class\": this.state.servant.className,\n                    \"Rarity\": this.state.servant.rarity,\n                    \"Cost\": this.state.servant.cost,\n                    \"Max Lv.\": this.state.servant.lvMax,\n                    \"Max Hp\": this.state.servant.hpMax,\n                    \"Max Atk\": this.state.servant.atkMax,\n                    \"Gender\": this.state.servant.gender,\n                    \"Attribute\": this.state.servant.attribute,\n                    \"Traits\": this.state.servant.traits.map((trait) => {\n                        return trait.name;\n                    }).join(', '),\n                }}/>\n            </div>\n        );\n    }\n\n    renderServantPortrait() {\n        if (this.state.servant === undefined)\n            return null;\n\n        return (\n            <div>\n                <img alt={this.state.servant.name}\n                     className={'profile'}\n                     src={this.state.servant.extraAssets.charaGraph.ascension[\"1\"]}/>\n            </div>\n        );\n    }\n\n    renderServantAdvancedData() {\n        if (this.state.servant === undefined)\n            return null;\n\n        const servant = this.state.servant;\n\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={starGenIcon}/>&nbsp;Crit Stars\n                                </div>\n                            )}\n                            data={{\n                                \"Star Absorb\": servant.starAbsorb,\n                                \"Star Gen\": asPercent(servant.starGen),\n                            }}/>\n\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={deathChanceIcon}/>&nbsp;Instant Death\n                                </div>\n                            )}\n                            data={{\n                                \"Death Chance\": asPercent(servant.instantDeathChance),\n                            }}/>\n                    </Col>\n\n                    <Col>\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={npGainIcon}/>&nbsp;NP Gain\n                                </div>\n                            )}\n                            data={{\n                                \"Buster\": asPercent(servant.npGain.buster),\n                                \"Arts\": asPercent(servant.npGain.arts),\n                                \"Quick\": asPercent(servant.npGain.quick),\n                                \"Extra\": asPercent(servant.npGain.extra),\n                                \"Defense\": asPercent(servant.npGain.defence),\n                            }}/>\n                    </Col>\n\n                    <Col>\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={hitCountIcon}/>\n                                    &nbsp;\n                                    Hit Count\n                                </div>\n                            )}\n                            data={{\n                                \"Buster\": ServantPage.showHits(servant.hitsDistribution.buster),\n                                \"Arts\": ServantPage.showHits(servant.hitsDistribution.arts),\n                                \"Quick\": ServantPage.showHits(servant.hitsDistribution.quick),\n                                \"Extra\": ServantPage.showHits(servant.hitsDistribution.extra),\n                            }}/>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    private static showHits(hits: number[]): JSX.Element {\n        return <span>\n            {hits.map((hit, index) => {\n                return (index > 0 ? ', ' : '') + hit + '%';\n            })}\n            &nbsp;-&nbsp;\n            {hits.length} Hits\n        </span>\n    }\n}\n\nexport default withRouter(ServantPage);\n","import React from \"react\";\n\ninterface IProps {\n    rarity: number;\n}\n\nconst fillChars = function (count: number, character: string): string {\n    return (new Array(count)).fill(null).map(v => character).join('');\n}\n\nclass RarityStars extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                {\n                    fillChars(this.props.rarity, '★')\n                    + fillChars(5 - this.props.rarity, '☆')\n                }\n            </div>\n        );\n    }\n}\n\nexport default RarityStars;\n","import React from \"react\";\n\ninterface IProps {\n    rarity: number;\n    location: string;\n    height?: number;\n}\n\nclass ServantThumbnail extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n}\n\nexport default ServantThumbnail;\n","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport ServantListEntity from \"../Api/Data/ServantListEntity\";\nimport ClassIcon from \"../Component/ClassIcon\";\nimport Loading from \"../Component/Loading\";\nimport RarityStars from \"../Component/RarityStars\";\nimport ServantThumbnail from \"../Component/ServantThumbnail\";\n\nimport './ServantsPage.css';\n\ninterface IProps {\n}\n\ninterface IState {\n    loading: boolean;\n    servants: ServantListEntity[];\n}\n\nclass ServantsPage extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            servants: [],\n        };\n    }\n\n    componentDidMount() {\n        Connection.servantList().then(servantList => {\n            this.setState({\n                loading: false,\n                servants: servantList\n            });\n        });\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading/>\n\n        return (\n            <div id=\"servants\">\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Class</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Thumbnail</th>\n                        <th>Name</th>\n                        <th>Rarity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.servants.map((servant, index) => {\n                        return <tr key={index}>\n                            <td align={\"center\"}>\n                                <Link to={`/servant/${servant.collectionNo}`}>\n                                    {servant.collectionNo}\n                                </Link>\n                            </td>\n                            <td align={\"center\"}>\n                                <ClassIcon className={servant.className} rarity={servant.rarity} height={50} />\n                            </td>\n                            <td align={\"center\"}>\n                                <Link to={`/servant/${servant.collectionNo}`}>\n                                    <ServantThumbnail rarity={servant.rarity} location={servant.face} height={50}/>\n                                </Link>\n                            </td>\n                            <td>\n                                <Link to={`/servant/${servant.collectionNo}`}>\n                                    {servant.name}\n                                </Link>\n                            </td>\n                            <td>\n                                <RarityStars rarity={servant.rarity}/>\n                            </td>\n                        </tr>\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n\n}\n\nexport default ServantsPage;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport {Container} from \"react-bootstrap\";\nimport {HashRouter as Router, Route, Switch,} from \"react-router-dom\";\nimport Navigation from \"./Component/Navigation\";\nimport ServantPage from \"./Page/ServantPage\";\nimport ServantsPage from \"./Page/ServantsPage\";\n\nfunction App() {\n    return (\n        <Router>\n            <Navigation/>\n            <br/>\n\n            <Container>\n                <Switch>\n                    <Route path=\"/servants\" component={ServantsPage}/>\n                    <Route path=\"/servant/:id\" render={(\n                        props => <ServantPage key={props.match.params.id} id={props.match.params.id}/>\n                    )}/>\n                    <Route path=\"/\" component={ServantsPage}/>\n                </Switch>\n            </Container>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}