{"version":3,"sources":["Page/FuncsPage.tsx"],"names":["stateCache","Map","FuncsPage","props","state","get","region","searching","funcs","set","this","target","description","targetDescriptions","type","funcDescriptions","text","team","setState","alert","Connection","searchFuncs","error","onSubmit","ev","preventDefault","search","Group","Label","Control","value","onChange","as","undefined","Object","values","FuncType","map","index","key","describeFuncType","FuncTargetType","describeFuncTarget","FuncTargetTeam","variant","onClick","icon","faSearch","responsive","func","funcId","reverseTds","length","reverseSkills","React","Component"],"mappings":"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","file":"static/js/21.35493cdd.chunk.js","sourcesContent":["import {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport Connection from \"../Api/Connection\";\nimport Func, {FuncTargetTeam, FuncTargetType, FuncType} from \"../Api/Data/Func\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport {funcDescriptions} from \"../Descriptor/Func/handleActionSection\";\nimport {targetDescriptions} from \"../Descriptor/Func/handleTargetSection\";\nimport FuncDescriptor from \"../Descriptor/FuncDescriptor\";\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    searching: boolean;\n    funcs: Func[];\n    text?: string;\n    type?: FuncType;\n    target?: FuncTargetType;\n    team?: FuncTargetTeam;\n}\n\nclass FuncsPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = stateCache.get(props.region) ?? {\n            searching: false,\n            funcs: []\n        };\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    private describeFuncTarget(target: FuncTargetType): string {\n        const description = targetDescriptions.get(target);\n\n        return description\n            ? `${description} - ${target}`\n            : `(${target})`;\n    }\n\n    private describeFuncType(type: FuncType): string {\n        const description = funcDescriptions.get(type);\n\n        return description\n            ? `${description} - ${type}`\n            : `(${type})`;\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.text && !this.state.type && !this.state.target && !this.state.team) {\n            this.setState({funcs: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, funcs: []});\n\n            const funcs = await Connection.searchFuncs(\n                this.props.region,\n                this.state.text,\n                this.state.type,\n                this.state.target,\n                this.state.team\n            );\n\n            this.setState({searching: false, funcs});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n                    <Form.Group>\n                        <Form.Label>Text</Form.Label>\n                        <Form.Control value={this.state.text ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({text: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control as={'select'}\n                                      value={this.state.type ?? 'all'}\n                                      onChange={(ev: ChangeEvent) => {\n                                          if (ev.target.value === 'all')\n                                              this.setState({type: undefined});\n                                          else\n                                              this.setState({type: ev.target.value as FuncType});\n                                      }}>\n                            <option value={'all'}>All</option>\n                            {Object.values(FuncType).map((type, index) => {\n                                return (\n                                    <option key={index} value={type}>\n                                        {this.describeFuncType(type)}\n                                    </option>\n                                );\n                            })}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Target</Form.Label>\n                        <Form.Control as={'select'}\n                                      value={this.state.target ?? 'all'}\n                                      onChange={(ev: ChangeEvent) => {\n                                          if (ev.target.value === 'all')\n                                              this.setState({target: undefined});\n                                          else\n                                              this.setState({target: ev.target.value as FuncTargetType});\n                                      }}>\n                            <option value={'all'}>All</option>\n                            {Object.values(FuncTargetType).map((target, index) => {\n                                return (\n                                    <option key={index} value={target}>\n                                        {this.describeFuncTarget(target)}\n                                    </option>\n                                );\n                            })}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Affects Players/Enemies</Form.Label>\n                        <Form.Control as={'select'}\n                                      value={this.state.team ?? 'all'}\n                                      onChange={(ev: ChangeEvent) => {\n                                          if (ev.target.value === 'all')\n                                              this.setState({team: undefined});\n                                          else\n                                              this.setState({team: ev.target.value as FuncTargetTeam});\n                                      }}>\n                            <option value={'all'}>All</option>\n                            {Object.values(FuncTargetTeam).map((team, index) => {\n                                return (\n                                    <option key={index} value={team}>\n                                        {team}\n                                    </option>\n                                );\n                            })}\n                        </Form.Control>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Function</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.funcs.map((func, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{func.funcId}</td>\n                                <td>\n                                    <FuncDescriptor region={this.props.region} func={func}/>\n                                </td>\n                                <td>\n                                    {func.reverseTds.length + func.reverseSkills.length}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default FuncsPage;\n"],"sourceRoot":""}