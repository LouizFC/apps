{"version":3,"sources":["Api/ResultCache.tsx","Api/Connection.tsx","Component/FaceIcon.tsx","Page/MysticCodesPage.tsx"],"names":["ResultCache","cache","Map","pending","pendingCatches","key","fetcher","duration","value","this","get","undefined","Promise","resolve","callbacks","reject","push","set","call","then","forEach","callback","delete","window","setTimeout","catch","error","host","fetch","endpoint","a","axios","response","data","buff","commandCode","commandCodes","craftEssence","craftEssenceList","func","mysticCode","mysticCodeList","noblePhantasm","quest","servant","servantList","skill","traitMap","Connection","region","id","language","Manager","query","LanguageOption","ENGLISH","Region","NA","getCommandCodeEssenceList","JP","DEFAULT","jp","na","names","map","entity","name","getCacheableCraftEssenceList","getCacheableMysticCodeList","phase","source","type","encodeURI","text","target","team","FaceIcon","alt","src","props","location","style","height","React","Component","MysticCodesPage","state","loading","mysticCodes","list","setState","e","striped","bordered","hover","responsive","textAlign","width","index","route","align","to","extraAssets","item","male","female"],"mappings":"uMA+DeA,E,iDA9DHC,MAAQ,IAAIC,I,KACZC,QAAU,IAAID,I,KACdE,eAAiB,IAAIF,I,gDAEzBG,EAAQC,EAAmBC,GAAsC,IAAD,OAC1DC,EAAQC,KAAKR,MAAMS,IAAIL,GAC7B,QAAcM,IAAVH,EACA,OAAO,IAAII,SAAW,SAAAC,GAClBA,EAAQL,MAIhB,IAAMM,EAAYL,KAAKN,QAAQO,IAAIL,GACnC,YAAkBM,IAAdG,EACO,IAAIF,SAAW,SAACC,EAASE,GAAY,IAAD,EACvCD,EAAUE,KAAKH,IAEF,UAAG,EAAKT,eAAeM,IAAIL,UAA3B,QAAmC,IACxCW,KAAKD,OAIrBN,KAAKN,QAAQc,IAAIZ,EAAK,IACtBI,KAAKL,eAAea,IAAIZ,EAAK,IACtB,IAAIO,SAAW,SAACC,EAASE,GAC5BT,EACKY,KAAK,MACLC,MAAK,SAACX,GAAc,IAAD,GACD,UAAG,EAAKL,QAAQO,IAAIL,UAApB,QAA4B,IAEjCe,SAAQ,SAAAC,GACdA,EAASH,KAAK,KAAMV,MAGxB,EAAKP,MAAMgB,IAAIZ,EAAKG,GACpB,EAAKL,QAAQmB,OAAOjB,GACpB,EAAKD,eAAekB,OAAOjB,GAEV,OAAbE,GACAgB,OAAOC,YAAW,WACd,EAAKvB,MAAMqB,OAAOjB,KACnBE,GAGPM,EAAQL,MAEXiB,OAAM,SAACC,GAAgB,IAAD,GACJ,UAAG,EAAKtB,eAAeM,IAAIL,UAA3B,QAAmC,IAExCe,SAAQ,SAAAC,GACdA,EAASH,KAAK,KAAMQ,MAGxB,EAAKvB,QAAQmB,OAAOjB,GACpB,EAAKD,eAAekB,OAAOjB,GAE3BU,EAAOW,c,KCxCrBC,EAAO,8BAETC,EAAK,uCAAG,WAAmBC,GAAnB,eAAAC,EAAA,sEACmBC,IAAMrB,IAAOmB,GADhC,cACEG,EADF,yBAGGA,EAASC,MAHZ,2CAAH,sDAKLhC,EAAQ,CACJiC,KAAM,IAAIlC,EACVmC,YAAa,IAAInC,EACjBoC,aAAc,IAAIpC,EAClBqC,aAAc,IAAIrC,EAClBsC,iBAAkB,IAAItC,EACtBuC,KAAM,IAAIvC,EACVwC,WAAY,IAAIxC,EAChByC,eAAgB,IAAIzC,EACpB0C,cAAe,IAAI1C,EACnB2C,MAAO,IAAI3C,EACX4C,QAAS,IAAI5C,EACb6C,YAAa,IAAI7C,EACjB8C,MAAO,IAAI9C,EACX+C,SAAU,IAAI/C,GAGhBgD,E,kGACUC,EAAgBC,GACxB,IAAMC,EAAWC,IAAQD,WACrB9C,EAAG,UAAM4C,EAAN,YAAgBE,EAAhB,YAA4BD,GAEnC,OAAOjD,EAAMiC,KAAKxB,IACdL,GACA,WACI,IAAIgD,EAAQ,sCACRF,IAAaG,IAAeC,QAAU,WAAa,IAGvD,OAAO3B,EAAK,UAAUD,EAAV,iBAAuBsB,EAAvB,iBAAsCC,GAAtC,OAA2CG,MAnCnD,O,kCAyCGJ,EAAgBC,GAC/B,IAAM7C,EAAG,UAAM4C,EAAN,YAAgBC,GAEzB,OAAOjD,EAAMkC,YAAYzB,IACrBL,GACA,WACI,OAAOuB,EAAK,UAAiBD,EAAjB,iBAA8BsB,EAA9B,eAA2CC,MA/CnD,O,+EAqDaD,G,8EACrBA,IAAWO,IAAOC,G,yCACXT,EAAWU,0BAA0BF,IAAOC,K,UAC5CR,IAAWO,IAAOG,IAAMP,IAAQD,aAAeG,IAAeM,Q,yCAC9DZ,EAAWU,0BAA0BF,IAAOG,K,uBAGtCX,EAAWU,0BAA0BF,IAAOG,I,cAAvDE,E,iBACSb,EAAWU,0BAA0BF,IAAOC,I,eAAvDK,E,OACAC,EAAQ,IAAI7D,IAAoB4D,EAAGE,KAAI,SAAAC,GAAM,MAAI,CAACA,EAAOf,GAAIe,EAAOC,U,kBAEjEL,EAAGG,KAAI,SAAAC,GAAW,IAAD,EACpB,OAAO,2BACAA,GADP,IAEIC,KAAI,UAAEH,EAAMrD,IAAIuD,EAAOf,WAAnB,QAA0Be,EAAOC,W,sIAK7BjB,EAAgBC,GAChC,IAAMC,EAAWC,IAAQD,WACrB9C,EAAG,UAAM4C,EAAN,YAAgBE,EAAhB,YAA4BD,GAEnC,OAAOjD,EAAMoC,aAAa3B,IACtBL,GACA,WACI,IAAIgD,EAAQ,cACRF,IAAaG,IAAeC,QAAU,WAAa,IAGvD,OAAO3B,EAAK,UAAaD,EAAb,iBAA0BsB,EAA1B,kBAA0CC,GAA1C,OAA+CG,MAnFvD,O,gFAyFcJ,G,8EACtBA,IAAWO,IAAOC,G,yCACXT,EAAWmB,6BAA6BX,IAAOC,K,UAC/CR,IAAWO,IAAOG,IAAMP,IAAQD,aAAeG,IAAeM,Q,yCAC9DZ,EAAWmB,6BAA6BX,IAAOG,K,uBAGzCX,EAAWmB,6BAA6BX,IAAOG,I,cAA1DE,E,iBACSb,EAAWmB,6BAA6BX,IAAOC,I,eAA1DK,E,OACAC,EAAQ,IAAI7D,IAAoB4D,EAAGE,KAAI,SAAAC,GAAM,MAAI,CAACA,EAAOf,GAAIe,EAAOC,U,kBAEjEL,EAAGG,KAAqB,SAAAC,GAAW,IAAD,EACrC,OAAO,2BACAA,GADP,IAEIC,KAAI,UAAEH,EAAMrD,IAAIuD,EAAOf,WAAnB,QAA0Be,EAAOC,W,8HAKrCjB,EAAgBC,GACxB,IAAMC,EAAWC,IAAQD,WACrB9C,EAAG,UAAM4C,EAAN,YAAgBE,EAAhB,YAA4BD,GAEnC,OAAOjD,EAAMsC,KAAK7B,IACdL,GACA,WACI,IAAIgD,EAAQ,sCACRF,IAAaG,IAAeC,QAAU,WAAa,IAGvD,OAAO3B,EAAK,UAAUD,EAAV,iBAAuBsB,EAAvB,qBAA0CC,GAA1C,OAA+CG,MAvHvD,O,iCA6HEJ,EAAgBC,GAC9B,IAAM7C,EAAG,UAAM4C,EAAN,YAAgBC,GAEzB,OAAOjD,EAAMuC,WAAW9B,IACpBL,GACA,WACI,OAAOuB,EAAK,UAAgBD,EAAhB,iBAA6BsB,EAA7B,eAA0CC,MAnIlD,O,8EAyIYD,G,8EACpBA,IAAWO,IAAOC,G,yCACXT,EAAWoB,2BAA2BZ,IAAOC,K,UAC7CR,IAAWO,IAAOG,IAAMP,IAAQD,aAAeG,IAAeM,Q,yCAC9DZ,EAAWoB,2BAA2BZ,IAAOG,K,uBAGvCX,EAAWoB,2BAA2BZ,IAAOG,I,cAAxDE,E,iBACSb,EAAWoB,2BAA2BZ,IAAOC,I,eAAxDK,E,OACAC,EAAQ,IAAI7D,IAAoB4D,EAAGE,KAAI,SAAAC,GAAM,MAAI,CAACA,EAAOf,GAAIe,EAAOC,U,kBAEjEL,EAAGG,KAAgB,SAAAC,GAAW,IAAD,EAChC,OAAO,2BACAA,GADP,IAEIC,KAAI,UAAEH,EAAMrD,IAAIuD,EAAOf,WAAnB,QAA0Be,EAAOC,W,uIAK5BjB,EAAgBC,GACjC,IAAMC,EAAWC,IAAQD,WACrB9C,EAAG,UAAM4C,EAAN,YAAgBE,EAAhB,YAA4BD,GAEnC,OAAOjD,EAAMyC,cAAchC,IACvBL,GACA,WACI,IAAIgD,EAAQ,iBACRF,IAAaG,IAAeC,QAAU,WAAa,IAGvD,OAAO3B,EAAK,UAAmBD,EAAnB,iBAAgCsB,EAAhC,eAA6CC,GAA7C,OAAkDG,MAvK1D,O,4BA6KHJ,EAAgBC,EAAYmB,GACrC,IAAMhE,EAAG,UAAM4C,EAAN,YAAgBC,EAAhB,YAAsBmB,GAE/B,OAAOpE,EAAM0C,MAAMjC,IACfL,GACA,WACI,OAAOuB,EAAK,UAAWD,EAAX,iBAAwBsB,EAAxB,kBAAwCC,EAAxC,YAA8CmB,MAnLtD,O,8BAyLDpB,EAAgBC,GAC3B,IAAMC,EAAWC,IAAQD,WACrB9C,EAAG,UAAM4C,EAAN,YAAgBE,EAAhB,YAA4BD,GAEnC,OAAOjD,EAAM2C,QAAQlC,IACjBL,GACA,WACI,IAAIgD,EAAQ,cACRF,IAAaG,IAAeC,QAAU,WAAa,IAGvD,OAAO3B,EAAK,UAAaD,EAAb,iBAA0BsB,EAA1B,oBAA4CC,GAA5C,OAAiDG,MApMzD,O,2EA0MSJ,G,kFACfE,EAAWC,IAAQD,WACrB9C,E,UAAS4C,E,YAAUE,GAKnBmB,EADArB,IAAWO,IAAOC,GACZ,UAAM9B,EAAN,iCACCsB,IAAWO,IAAOG,IAAMR,IAAaG,IAAeM,QACrD,UAAMjC,EAAN,iCAEA,UAAMA,EAAN,yC,kBAGH1B,EAAM4C,YAAYnC,IACrBL,GACA,WACI,OAAOuB,EAAyB0C,KAEpC,O,8HAIKrB,EAAgBC,GACzB,IAAMC,EAAWC,IAAQD,WACrB9C,EAAG,UAAM4C,EAAN,YAAgBE,EAAhB,YAA4BD,GAEnC,OAAOjD,EAAM6C,MAAMpC,IACfL,GACA,WACI,IAAIgD,EAAQ,iBACRF,IAAaG,IAAeC,QAAU,WAAa,IAGvD,OAAO3B,EAAK,UAAWD,EAAX,iBAAwBsB,EAAxB,kBAAwCC,GAAxC,OAA6CG,MA5OrD,O,+BAkPAJ,GACZ,OAAOhD,EAAM8C,SAASrC,IAClBuC,GACA,WACI,OAAOrB,EAAK,UAAcD,EAAd,mBAA6BsB,EAA7B,uBAEhB,Q,kCAIWA,EAAgBiB,EAAeK,GAC9C,IAEIlB,EAAQ,gBASZ,OAXiBD,IAAQD,aAIRG,IAAeC,UAC5BF,GAAS,YACTa,IACAb,GAAS,SAAWmB,UAAUN,IAC9BK,IACAlB,GAAS,SAAWkB,GAEjB3C,EAAK,UAAYD,EAAZ,iBAAyBsB,EAAzB,uBAA8CI,M,kCAG3CJ,EACAwB,EACAF,EACAG,EACAC,GACf,IAEItB,EAAQ,gBAaZ,OAfiBD,IAAQD,aAIRG,IAAeC,UAC5BF,GAAS,YACToB,IACApB,GAAS,cAAgBmB,UAAUC,IACnCF,IACAlB,GAAS,SAAWkB,GACpBG,IACArB,GAAS,eAAiBqB,GAC1BC,IACAtB,GAAS,eAAiBsB,GAEvB/C,EAAK,UAAYD,EAAZ,iBAAyBsB,EAAzB,2BAAkDI,M,yFAGnBJ,G,0FACpChD,EAAMmC,aAAa1B,IACtBuC,GACA,WACI,OAAOrB,EAAK,UAAmBD,EAAnB,mBAAkCsB,EAAlC,8BAEhB,O,8LAI0CA,G,0FACvChD,EAAMqC,iBAAiB5B,IAC1BuC,GACA,WACI,OAAOrB,EAAK,UAAuBD,EAAvB,mBAAsCsB,EAAtC,wBAEhB,O,4LAIwCA,G,0FACrChD,EAAMwC,eAAe/B,IACxBuC,GACA,WACI,OAAOrB,EAAK,UAAuBD,EAAvB,mBAAsCsB,EAAtC,6BAEhB,O,yGAKGD,O,qFCzUT4B,E,uKAEQ,IAAD,EACL,OACI,yBAAKC,IAAK,GAAIC,IAAKrE,KAAKsE,MAAMC,SACzBC,MAAO,CAACC,OAAM,UAAEzE,KAAKsE,MAAMG,cAAb,QAAuB,a,GAL/BC,IAAMC,WAWdR,O,oKCETS,G,yDACF,WAAYN,GAAgB,IAAD,8BACvB,cAAMA,IAEDO,MAAQ,CACTC,SAAS,EACTC,YAAa,IALM,E,gEASN,IAAD,OAChB,IACIxC,IAAWP,eAAehC,KAAKsE,MAAM9B,QAAQ9B,MAAK,SAAAsE,GAC9C,EAAKC,SAAS,CACVH,SAAS,EACTC,YAAaC,OAGvB,MAAOE,GACLlF,KAAKiF,SAAS,CACVhE,MAAOiE,O,+BAKT,IAAD,OACL,OAAIlF,KAAK6E,MAAM5D,MACJ,kBAAC,IAAD,CAAaA,MAAOjB,KAAK6E,MAAM5D,QAEtCjB,KAAK6E,MAAMC,QACJ,kBAAC,IAAD,MAGP,yBAAKrC,GAAI,gBACL,kBAAC,IAAD,CAAO0C,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,GACpC,+BACA,4BACI,wBAAId,MAAO,CAACe,UAAW,SAAUC,MAAO,QAAxC,KACA,wBAAIhB,MAAO,CAACe,UAAW,SAAUC,MAAO,UAAxC,aACA,sCAGJ,+BACCxF,KAAK6E,MAAME,YAAYxB,KAAI,SAACxB,EAAY0D,GACrC,IAAMC,EAAK,WAAO,EAAKpB,MAAM9B,OAAlB,wBAAwCT,EAAWU,IAE9D,OACI,wBAAI7C,IAAK6F,GACL,wBAAIE,MAAO,UACP,kBAAC,IAAD,CAAMC,GAAIF,GACL3D,EAAWU,KAGpB,wBAAIkD,MAAO,UACP,kBAAC,IAAD,CAAMC,GAAIF,GACN,kBAAC,IAAD,CAAUnB,SAAUxC,EAAW8D,YAAYC,KAAKC,KAAMtB,OAAQ,KAC9D,kBAAC,IAAD,CAAUF,SAAUxC,EAAW8D,YAAYC,KAAKE,OAAQvB,OAAQ,OAGxE,4BACI,kBAAC,IAAD,CAAMmB,GAAIF,GACL3D,EAAW0B,kB,GA7DtBiB,IAAMC,YA0ErBC","file":"static/js/19.5aae23ce.chunk.js","sourcesContent":["class ResultCache<K, V> {\n    private cache = new Map<K, V>();\n    private pending = new Map<K, Function[]>();\n    private pendingCatches = new Map<K, Function[]>();\n\n    get(key: K, fetcher: Function, duration: number | null): Promise<V> {\n        const value = this.cache.get(key);\n        if (value !== undefined) {\n            return new Promise<V>(resolve => {\n                resolve(value);\n            });\n        }\n\n        const callbacks = this.pending.get(key);\n        if (callbacks !== undefined) {\n            return new Promise<V>((resolve, reject) => {\n                callbacks.push(resolve);\n\n                const catches = this.pendingCatches.get(key) ?? [];\n                catches.push(reject);\n            });\n        }\n\n        this.pending.set(key, []);\n        this.pendingCatches.set(key, []);\n        return new Promise<V>((resolve, reject) => {\n            fetcher\n                .call(null)\n                .then((value: V) => {\n                    const callbacks = this.pending.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, value);\n                    });\n\n                    this.cache.set(key, value);\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    if (duration !== null) {\n                        window.setTimeout(() => {\n                            this.cache.delete(key);\n                        }, duration);\n                    }\n\n                    resolve(value);\n                })\n                .catch((error: any) => {\n                    const callbacks = this.pendingCatches.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, error);\n                    });\n\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport default ResultCache;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption} from \"../Setting/Option\";\nimport BasicListEntity from \"./Data/BasicListEntity\";\nimport Buff, {BuffType} from \"./Data/Buff\";\nimport CommandCode from \"./Data/CommandCode\";\nimport CraftEssence from \"./Data/CraftEssence\";\nimport Func, {FuncTargetTeam, FuncTargetType, FuncType} from \"./Data/Func\";\nimport MysticCode from \"./Data/MysticCode\";\nimport NoblePhantasm from \"./Data/NoblePhantasm\";\nimport Quest from \"./Data/Quest\";\nimport Region from \"./Data/Region\";\nimport Servant from \"./Data/Servant\";\nimport Skill from \"./Data/Skill\";\nimport TraitMap from \"./Data/TraitMap\";\nimport ResultCache from \"./ResultCache\";\n\nconst host = 'https://api.atlasacademy.io',\n    cacheDuration = 20 * 1000,\n    fetch = async function <T>(endpoint: string): Promise<T> {\n        const response = await axios.get<T>(endpoint);\n\n        return response.data;\n    },\n    cache = {\n        buff: new ResultCache<string, Buff>(),\n        commandCode: new ResultCache<string, CommandCode>(),\n        commandCodes: new ResultCache<Region, CommandCode[]>(),\n        craftEssence: new ResultCache<string, CraftEssence>(),\n        craftEssenceList: new ResultCache<Region, BasicListEntity[]>(),\n        func: new ResultCache<string, Func>(),\n        mysticCode: new ResultCache<string, MysticCode>(),\n        mysticCodeList: new ResultCache<Region, MysticCode[]>(),\n        noblePhantasm: new ResultCache<string, NoblePhantasm>(),\n        quest: new ResultCache<string, Quest>(),\n        servant: new ResultCache<string, Servant>(),\n        servantList: new ResultCache<string, BasicListEntity[]>(),\n        skill: new ResultCache<string, Skill>(),\n        traitMap: new ResultCache<Region, TraitMap>(),\n    };\n\nclass Connection {\n    static buff(region: Region, id: number): Promise<Buff> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.buff.get(\n            key,\n            () => {\n                let query = '?reverse=true&reverseDepth=skillNp' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Buff>(`${host}/nice/${region}/buff/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static commandCode(region: Region, id: number): Promise<CommandCode> {\n        const key = `${region}-${id}`;\n\n        return cache.commandCode.get(\n            key,\n            () => {\n                return fetch<CommandCode>(`${host}/nice/${region}/CC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async commandCodeList(region: Region): Promise<CommandCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCommandCodeEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCommandCodeEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCommandCodeEssenceList(Region.JP),\n            na = await Connection.getCommandCodeEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static craftEssence(region: Region, id: number): Promise<CraftEssence> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.craftEssence.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/equip/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async craftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableCraftEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableCraftEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableCraftEssenceList(Region.JP),\n            na = await Connection.getCacheableCraftEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static func(region: Region, id: number): Promise<Func> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.func.get(\n            key,\n            () => {\n                let query = '?reverse=true&reverseDepth=servant' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Func>(`${host}/nice/${region}/function/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static mysticCode(region: Region, id: number): Promise<MysticCode> {\n        const key = `${region}-${id}`;\n\n        return cache.mysticCode.get(\n            key,\n            () => {\n                return fetch<MysticCode>(`${host}/nice/${region}/MC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async mysticCodeList(region: Region): Promise<MysticCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableMysticCodeList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableMysticCodeList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableMysticCodeList(Region.JP),\n            na = await Connection.getCacheableMysticCodeList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<MysticCode>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static noblePhantasm(region: Region, id: number): Promise<NoblePhantasm> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.noblePhantasm.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<NoblePhantasm>(`${host}/nice/${region}/NP/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static quest(region: Region, id: number, phase: number): Promise<Quest> {\n        const key = `${region}-${id}-${phase}`;\n\n        return cache.quest.get(\n            key,\n            () => {\n                return fetch<Quest>(`${host}/nice/${region}/quest/${id}/${phase}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static servant(region: Region, id: number): Promise<Servant> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.servant.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/servant/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async servantList(region: Region): Promise<BasicListEntity[]> {\n        const language = Manager.language(),\n            key = `${region}-${language}`;\n\n        let source: string;\n\n        if (region === Region.NA) {\n            source = `${host}/export/NA/basic_servant.json`;\n        } else if (region === Region.JP && language === LanguageOption.DEFAULT) {\n            source = `${host}/export/JP/basic_servant.json`;\n        } else {\n            source = `${host}/export/JP/basic_servant_lang_en.json`;\n        }\n\n        return cache.servantList.get(\n            key,\n            () => {\n                return fetch<BasicListEntity[]>(source);\n            },\n            null\n        );\n    }\n\n    static skill(region: Region, id: number): Promise<Skill> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.skill.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Skill>(`${host}/nice/${region}/skill/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static traitMap(region: Region): Promise<TraitMap> {\n        return cache.traitMap.get(\n            region,\n            () => {\n                return fetch<TraitMap>(`${host}/export/${region}/nice_trait.json`);\n            },\n            null\n        );\n    }\n\n    static searchBuffs(region: Region, name?: string, type?: BuffType): Promise<Buff[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (name)\n            query += \"&name=\" + encodeURI(name);\n        if (type)\n            query += \"&type=\" + type;\n\n        return fetch<Buff[]>(`${host}/nice/${region}/buff/search${query}`);\n    }\n\n    static searchFuncs(region: Region,\n                       text?: string,\n                       type?: FuncType,\n                       target?: FuncTargetType,\n                       team?: FuncTargetTeam): Promise<Func[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (text)\n            query += \"&popupText=\" + encodeURI(text);\n        if (type)\n            query += \"&type=\" + type;\n        if (target)\n            query += \"&targetType=\" + target;\n        if (team)\n            query += \"&targetTeam=\" + team;\n\n        return fetch<Func[]>(`${host}/nice/${region}/function/search${query}`);\n    }\n\n    private static async getCommandCodeEssenceList(region: Region): Promise<CommandCode[]> {\n        return cache.commandCodes.get(\n            region,\n            () => {\n                return fetch<CommandCode[]>(`${host}/export/${region}/nice_command_code.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableCraftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        return cache.craftEssenceList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_equip.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableMysticCodeList(region: Region): Promise<MysticCode[]> {\n        return cache.mysticCodeList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/nice_mystic_code.json`);\n            },\n            null\n        );\n    }\n}\n\nexport default Connection;\n","import React from \"react\";\nimport EntityType from \"../Api/Data/EntityType\";\n\ninterface IProps {\n    type?: EntityType;\n    rarity?: number;\n    location: string;\n    height?: number | string;\n}\n\nclass FaceIcon extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={{height: this.props.height ?? '2em'}}/>\n        );\n    }\n\n}\n\nexport default FaceIcon;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport MysticCode from \"../Api/Data/MysticCode\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport FaceIcon from \"../Component/FaceIcon\";\nimport Loading from \"../Component/Loading\";\n\nimport \"./MysticCodesPage.css\";\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    mysticCodes: MysticCode[];\n}\n\nclass MysticCodesPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            mysticCodes: [],\n        };\n    }\n\n    componentDidMount() {\n        try {\n            Connection.mysticCodeList(this.props.region).then(list => {\n                this.setState({\n                    loading: false,\n                    mysticCodes: list\n                });\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div id={'mystic-codes'}>\n                <Table striped bordered hover responsive>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '140px'}}>Thumbnail</th>\n                        <th>Name</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.mysticCodes.map((mysticCode, index) => {\n                        const route = `/${this.props.region}/mystic-code/${mysticCode.id}`;\n\n                        return (\n                            <tr key={index}>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        {mysticCode.id}\n                                    </Link>\n                                </td>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        <FaceIcon location={mysticCode.extraAssets.item.male} height={50}/>\n                                        <FaceIcon location={mysticCode.extraAssets.item.female} height={50}/>\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to={route}>\n                                        {mysticCode.name}\n                                    </Link>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default MysticCodesPage;\n"],"sourceRoot":""}