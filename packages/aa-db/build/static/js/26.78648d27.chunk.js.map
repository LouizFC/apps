{"version":3,"sources":["Page/NoblePhantasm/NoblePhantasmVersion.tsx","Page/NoblePhantasmPage.tsx"],"names":["NoblePhantasmVersion","this","props","noblePhantasm","functions","map","func","index","dataVal","getTargetVersionValues","level","overcharge","key","FuncDescriptor","region","Row","Col","xs","md","FuncMainData","DataValMainData","React","Component","NoblePhantasmPage","state","loading","Manager","setRegion","loadNp","Api","id","setState","error","ErrorStatus","Loading","name","DataTable","data","RawDataViewer","type","rank","detail","card","reverse","nice","servant","filter","Entity","EntityType","NORMAL","HEROINE","ServantDescriptor","iconHeight","EffectBreakdown","funcs","gain","npGain","levels","svals","length","Form","inline","style","justifyContent","Control","as","value","onChange","ev","changeLevel","parseInt","target","changeOvercharge"],"mappings":"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","file":"static/js/26.78648d27.chunk.js","sourcesContent":["import {NoblePhantasm, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Col, Row} from \"react-bootstrap\";\nimport FuncDescriptor from \"../../Descriptor/FuncDescriptor\";\nimport {getTargetVersionValues} from \"../../Helper/FuncHelper\";\nimport DataValMainData from \"../Func/DataValMainData\";\nimport FuncMainData from \"../Func/FuncMainData\";\n\ninterface IProps {\n    region: Region;\n    noblePhantasm: NoblePhantasm.NoblePhantasm;\n    level: number;\n    overcharge: number;\n}\n\nclass NoblePhantasmVersion extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                {this.props.noblePhantasm.functions.map((func, index) => {\n                    const dataVal = getTargetVersionValues(func, this.props.level, this.props.overcharge);\n\n                    return (\n                        <div key={index}>\n                            <h3>Effect #{index + 1}</h3>\n                            <p>\n                                <FuncDescriptor region={this.props.region}\n                                                func={func}\n                                                level={this.props.level}\n                                                overcharge={this.props.overcharge}/>\n                            </p>\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <h5>Function</h5>\n                                    <FuncMainData region={this.props.region} func={func}/>\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <h5>Values</h5>\n                                    <DataValMainData dataVal={dataVal ?? {}}/>\n                                </Col>\n                            </Row>\n\n                            <hr/>\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default NoblePhantasmVersion;\n","import {Entity, NoblePhantasm, Region, Servant} from \"@atlasacademy/api-connector\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Col, Form, Row} from \"react-bootstrap\";\nimport Api from \"../Api\";\nimport EffectBreakdown from \"../Breakdown/EffectBreakdown\";\nimport DataTable from \"../Component/DataTable\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport RawDataViewer from \"../Component/RawDataViewer\";\nimport ServantDescriptor from \"../Descriptor/ServantDescriptor\";\nimport Manager from \"../Setting/Manager\";\nimport NoblePhantasmVersion from \"./NoblePhantasm/NoblePhantasmVersion\";\n\ninterface Event extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n    id: number;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    noblePhantasm?: NoblePhantasm.NoblePhantasm;\n    level: number;\n    overcharge: number;\n}\n\nclass NoblePhantasmPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            level: 1,\n            overcharge: 1,\n        };\n    }\n\n    componentDidMount() {\n        Manager.setRegion(this.props.region);\n        this.loadNp();\n    }\n\n    async loadNp() {\n        try {\n            const noblePhantasm = await Api.noblePhantasm(this.props.id);\n\n            this.setState({\n                loading: false,\n                noblePhantasm: noblePhantasm,\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    private changeLevel(level: number) {\n        this.setState({\n            level: level\n        });\n    }\n\n    private changeOvercharge(level: number) {\n        this.setState({\n            overcharge: level\n        });\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading || !this.state.noblePhantasm)\n            return <Loading/>;\n\n        const noblePhantasm = this.state.noblePhantasm;\n\n        return (\n            <div>\n                <h1>{noblePhantasm.name}</h1>\n                <br/>\n\n                <DataTable data={{\n                    \"Data\": <RawDataViewer data={noblePhantasm}/>,\n                    \"Raw\": <RawDataViewer\n                        data={`https://api.atlasacademy.io/raw/${this.props.region}/NP/${noblePhantasm.id}?expand=true`}/>,\n                    \"ID\": noblePhantasm.id,\n                    \"Name\": noblePhantasm.name,\n                    \"Type\": noblePhantasm.type,\n                    \"Rank\": noblePhantasm.rank,\n                    \"Detail\": noblePhantasm.detail,\n                    \"Card Type\": noblePhantasm.card,\n                    \"Owner\": (\n                        <div>\n                            {(noblePhantasm.reverse?.nice?.servant ?? [])\n                                .filter(servant => {\n                                    return servant.type === Entity.EntityType.NORMAL\n                                        || servant.type === Entity.EntityType.HEROINE\n                                })\n                                .map((servant, index) => {\n                                    return (\n                                        <div key={index}>\n                                            <ServantDescriptor region={this.props.region}\n                                                               servant={servant as Servant.Servant}\n                                                               iconHeight={24}/>\n                                        </div>\n                                    );\n                                })\n                            }\n                        </div>\n                    )\n                }}/>\n\n                <br/>\n                <h3>Breakdown</h3>\n                <EffectBreakdown region={this.props.region}\n                                 funcs={noblePhantasm.functions}\n                                 gain={noblePhantasm.npGain}\n                                 levels={noblePhantasm.functions[0]?.svals.length ?? 1}/>\n\n                <br/>\n                <br/>\n                <h3>Detailed Effects</h3>\n                <Row>\n                    <Col>\n                        <Form inline style={{justifyContent: 'flex-end'}}>\n                            <Form.Control as={'select'} value={this.state.level}\n                                          onChange={(ev: Event) => this.changeLevel(parseInt(ev.target.value))}>\n                                {[1, 2, 3, 4, 5].map(level => (\n                                    <option key={level} value={level}>NP LEVEL {level}</option>\n                                ))}\n                            </Form.Control>\n                        </Form>\n                    </Col>\n                    <Col>\n                        <Form inline>\n                            <Form.Control as={'select'} value={this.state.overcharge}\n                                          onChange={(ev: Event) => this.changeOvercharge(parseInt(ev.target.value))}>\n                                {[1, 2, 3, 4, 5].map(level => (\n                                    <option key={level} value={level}>OVERCHARGE {level}</option>\n                                ))}\n                            </Form.Control>\n                        </Form>\n                    </Col>\n                </Row>\n\n                <br/>\n                <NoblePhantasmVersion region={this.props.region}\n                                      noblePhantasm={noblePhantasm}\n                                      level={this.state.level}\n                                      overcharge={this.state.overcharge}/>\n            </div>\n        );\n    }\n}\n\nexport default NoblePhantasmPage;\n"],"sourceRoot":""}