{"version":3,"sources":["Component/DataTable.tsx","Component/RawDataViewer.tsx","Page/QuestPage.tsx","Api/ResultCache.tsx","Api/Connection.tsx"],"names":["DataTable","this","props","header","className","bordered","hover","Object","keys","data","map","key","index","dumpValue","value","element","undefined","type","JSON","stringify","React","Component","RawDataViewer","state","showing","setState","style","cursor","onClick","show","icon","faSearchPlus","size","onHide","hide","Header","closeButton","Title","Body","src","collapsed","QuestPage","loading","loadQuest","Connection","quest","region","id","phase","error","name","ResultCache","cache","Map","pending","pendingCatches","fetcher","duration","get","Promise","resolve","callbacks","reject","push","set","call","then","forEach","callback","delete","window","setTimeout","catch","host","fetch","endpoint","a","axios","response","buff","craftEssence","craftEssenceList","func","mysticCode","mysticCodeList","noblePhantasm","servant","servantList","skill","traitMap","language","Manager","query","LanguageOption","ENGLISH","Region","NA","getCacheableCraftEssenceList","JP","DEFAULT","jp","na","names","entity","getCacheableMysticCodeList","getCacheableServantList"],"mappings":"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","file":"static/js/13.751be3c5.chunk.js","sourcesContent":["import React from \"react\";\nimport {Table} from \"react-bootstrap\";\n\nimport \"./DataTable.css\";\nimport {Renderable} from \"../Helper/OutputHelper\";\n\ninterface IProp {\n    header?: JSX.Element | string,\n    data: {\n        [key: string]: Renderable | object;\n    }\n}\n\nclass DataTable extends React.Component<IProp> {\n    private static dumpValue(value: Renderable | object): Renderable {\n        if (typeof value === \"object\") {\n            const element = value as JSX.Element;\n            if (element.key !== undefined && element.props !== undefined && element.type !== undefined) {\n                return element;\n            } else {\n                return JSON.stringify(value);\n            }\n        }\n\n        return value;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.header ? (\n                    <div className={'data-header'}>\n                        {this.props.header}\n                    </div>\n                ) : null}\n\n                <Table bordered hover className={'data-table'}>\n                    <tbody>\n                    {Object.keys(this.props.data).map((key, index) => {\n                        return (\n                            <tr key={index}>\n                                <th>{key}</th>\n                                <td>{DataTable.dumpValue(this.props.data[key])}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default DataTable;\n","import {faSearchPlus} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport ReactJson from \"react-json-view\";\n\ninterface IProps {\n    data: object;\n}\n\ninterface IState {\n    showing: boolean;\n}\n\nclass RawDataViewer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showing: false\n        };\n    }\n\n    hide() {\n        this.setState({showing: false});\n    }\n\n    show() {\n        this.setState({showing: true});\n    }\n\n    render() {\n        return (\n            <div>\n                <span className={'text-primary'}\n                      style={{cursor: \"pointer\"}}\n                      onClick={() => {\n                          this.show();\n                      }}>\n                    View Raw\n                    &nbsp;\n                    <FontAwesomeIcon icon={faSearchPlus}/>\n                </span>\n\n                <Modal size={\"lg\"} show={this.state.showing} onHide={() => this.hide()}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Raw Data Viewer</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <ReactJson src={this.props.data} collapsed={1}/>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default RawDataViewer;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport Connection from \"../Api/Connection\";\nimport Quest from \"../Api/Data/Quest\";\nimport Region from \"../Api/Data/Region\";\nimport DataTable from \"../Component/DataTable\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport RawDataViewer from \"../Component/RawDataViewer\";\n\ninterface IProps {\n    region: Region;\n    id: number;\n    phase: number;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    quest?: Quest;\n}\n\nclass QuestPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        this.loadQuest();\n    }\n\n    async loadQuest() {\n        try {\n            const quest = await Connection.quest(this.props.region, this.props.id, this.props.phase);\n\n            this.setState({\n                loading: false,\n                quest: quest,\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error} />;\n\n        if (this.state.loading || !this.state.quest)\n            return <Loading/>;\n\n        const quest = this.state.quest;\n\n        return (\n            <div>\n                <h1>{quest.name}</h1>\n\n                <br/>\n\n                <DataTable data={{\n                    \"Raw\": <RawDataViewer data={quest}/>,\n                    \"ID\": quest.id,\n                    \"Phase\": quest.phase,\n                    \"Name\": quest.name,\n                    \"Type\": quest.type,\n                }}/>\n            </div>\n        );\n    }\n}\n\nexport default QuestPage;\n","class ResultCache<K, V> {\n    private cache = new Map<K, V>();\n    private pending = new Map<K, Function[]>();\n    private pendingCatches = new Map<K, Function[]>();\n\n    get(key: K, fetcher: Function, duration: number | null): Promise<V> {\n        const value = this.cache.get(key);\n        if (value !== undefined) {\n            return new Promise<V>(resolve => {\n                resolve(value);\n            });\n        }\n\n        const callbacks = this.pending.get(key);\n        if (callbacks !== undefined) {\n            return new Promise<V>((resolve, reject) => {\n                callbacks.push(resolve);\n\n                const catches = this.pendingCatches.get(key) ?? [];\n                catches.push(reject);\n            });\n        }\n\n        this.pending.set(key, []);\n        this.pendingCatches.set(key, []);\n        return new Promise<V>((resolve, reject) => {\n            fetcher\n                .call(null)\n                .then((value: V) => {\n                    const callbacks = this.pending.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, value);\n                    });\n\n                    this.cache.set(key, value);\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    if (duration !== null) {\n                        window.setTimeout(() => {\n                            this.cache.delete(key);\n                        }, duration);\n                    }\n\n                    resolve(value);\n                })\n                .catch((error: any) => {\n                    const callbacks = this.pendingCatches.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, error);\n                    });\n\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport default ResultCache;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption} from \"../Setting/Option\";\nimport BasicListEntity from \"./Data/BasicListEntity\";\nimport Buff from \"./Data/Buff\";\nimport CraftEssence from \"./Data/CraftEssence\";\nimport Func from \"./Data/Func\";\nimport MysticCode from \"./Data/MysticCode\";\nimport NoblePhantasm from \"./Data/NoblePhantasm\";\nimport Quest from \"./Data/Quest\";\nimport Region from \"./Data/Region\";\nimport Servant from \"./Data/Servant\";\nimport Skill from \"./Data/Skill\";\nimport TraitMap from \"./Data/TraitMap\";\nimport ResultCache from \"./ResultCache\";\n\nconst host = 'https://api.atlasacademy.io',\n    cacheDuration = 20 * 1000,\n    fetch = async function <T>(endpoint: string): Promise<T> {\n        const response = await axios.get<T>(endpoint);\n\n        return response.data;\n    },\n    cache = {\n        buff: new ResultCache<string, Buff>(),\n        craftEssence: new ResultCache<string, CraftEssence>(),\n        craftEssenceList: new ResultCache<Region, BasicListEntity[]>(),\n        func: new ResultCache<string, Func>(),\n        mysticCode: new ResultCache<string, MysticCode>(),\n        mysticCodeList: new ResultCache<Region, MysticCode[]>(),\n        noblePhantasm: new ResultCache<string, NoblePhantasm>(),\n        quest: new ResultCache<string, Quest>(),\n        servant: new ResultCache<string, Servant>(),\n        servantList: new ResultCache<Region, BasicListEntity[]>(),\n        skill: new ResultCache<string, Skill>(),\n        traitMap: new ResultCache<Region, TraitMap>(),\n    };\n\nclass Connection {\n    static buff(region: Region, id: number): Promise<Buff> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.buff.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Buff>(`${host}/nice/${region}/buff/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static craftEssence(region: Region, id: number): Promise<CraftEssence> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.craftEssence.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/equip/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async craftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableCraftEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableCraftEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableCraftEssenceList(Region.JP),\n            na = await Connection.getCacheableCraftEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static func(region: Region, id: number): Promise<Func> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.func.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Func>(`${host}/nice/${region}/function/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static mysticCode(region: Region, id: number): Promise<MysticCode> {\n        const key = `${region}-${id}`;\n\n        return cache.mysticCode.get(\n            key,\n            () => {\n                return fetch<MysticCode>(`${host}/nice/${region}/MC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async mysticCodeList(region: Region): Promise<MysticCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableMysticCodeList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableMysticCodeList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableMysticCodeList(Region.JP),\n            na = await Connection.getCacheableMysticCodeList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<MysticCode>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static noblePhantasm(region: Region, id: number): Promise<NoblePhantasm> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.noblePhantasm.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<NoblePhantasm>(`${host}/nice/${region}/NP/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static quest(region: Region, id: number, phase: number): Promise<Quest> {\n        const key = `${region}-${id}-${phase}`;\n\n        return cache.quest.get(\n            key,\n            () => {\n                return fetch<Quest>(`${host}/nice/${region}/quest/${id}/${phase}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static servant(region: Region, id: number): Promise<Servant> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.servant.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/servant/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async servantList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableServantList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableServantList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableServantList(Region.JP),\n            na = await Connection.getCacheableServantList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static skill(region: Region, id: number): Promise<Skill> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.skill.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Skill>(`${host}/nice/${region}/skill/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static traitMap(region: Region): Promise<TraitMap> {\n        return cache.traitMap.get(\n            region,\n            () => {\n                return fetch<TraitMap>(`${host}/export/${region}/nice_trait.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableCraftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        return cache.craftEssenceList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_equip.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableMysticCodeList(region: Region): Promise<MysticCode[]> {\n        return cache.mysticCodeList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/nice_mystic_code.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableServantList(region: Region): Promise<BasicListEntity[]> {\n        return cache.servantList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_servant.json`);\n            },\n            null\n        );\n    }\n}\n\nexport default Connection;\n"],"sourceRoot":""}