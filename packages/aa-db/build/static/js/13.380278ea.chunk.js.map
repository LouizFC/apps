{"version":3,"sources":["Helper/OutputHelper.tsx","Component/FaceIcon.tsx","Component/BuffIcon.tsx","Descriptor/TraitDescription.tsx","Descriptor/SkillDescriptor.tsx","Descriptor/SkillReferenceDescriptor.tsx","Descriptor/CardDescription.tsx","Descriptor/Description.tsx","Component/SearchableSelect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/react-bootstrap/esm/Badge.js","Page/Entities/TraitsSelector.tsx","Page/EntitiesPage.tsx"],"names":["asPercent","value","pow","parseInt","decimal","Math","formatNumber","String","replace","handleNewLine","text","mergeElements","split","joinElements","elements","separator","parts","pushElement","element","undefined","length","previous","toString","push","forEach","index","seperator","Fragment","map","key","FaceIcon","alt","src","this","props","location","style","height","React","Component","BuffIcon","verticalAlign","TraitDescription","state","id","trait","Api","traitList","i","setState","descriptor","TraitDescriptor","describe","overrideTraits","region","disableLink","getDescription","to","getLocation","Description","renderAsString","SkillDescriptor","skill","icon","iconHeight","name","SkillReferenceDescriptor","route","CardDescription","CardDescriptor","card","partial","referenceType","ReferenceType","CARD","SKILL","TRAIT","partials","fragments","type","PartialType","PARTICLE","renderParticle","REFERENCE","renderReference","TEXT","renderText","VALUE","renderValue","valueType","ValueType","PERCENT","renderReferenceAsString","join","SearchableSelect","ref","createRef","selected","focused","results","current","clear","description","labels","get","disableLabelStyling","label","hideAll","getOption","concat","options","onChange","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","onFocus","hideReset","className","onClick","e","preventDefault","clearSelection","onMouseDown","faTimes","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","arguments","source","getOwnPropertyDescriptors","defineProperties","Badge","forwardRef","_ref","bsPrefix","variant","pill","_ref$as","as","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","defaultProps","TraitsSelector","padStart","resetField","input","match","addTrait","onUpdate","traits","console","log","_trait","cursor","removeTrait","faTimesCircle","onInputChange","onKeyDown","keyCode","addInputTrait","attributeDescriptions","Map","classNameDescriptions","entityTypeDescriptions","Entity","EntityType","NORMAL","HEROINE","COMBINE_MATERIAL","ENEMY","ENEMY_COLLECTION","ENEMY_COLLECTION_DETAIL","SERVANT_EQUIP","STATUS_UP","genderDescriptions","stateCache","EntitiesPage","defaultState","loading","searching","entities","traitSelected","Manager","setRegion","search","history","error","set","entity","collectionNo","gender","attribute","alert","searchEntity","ErrorStatus","Loading","onSubmit","ev","Form","Group","Label","Control","values","ClassName","EXTRA","Gender","Attribute","Button","faSearch","Table","responsive","face","withRouter"],"mappings":"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","file":"static/js/13.380278ea.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type Renderable = (\n    JSX.Element\n    | string\n    | number\n    | undefined\n    )\n\nexport function asPercent(value: number | string | undefined, pow: number): string {\n    if (typeof value === \"string\")\n        return asPercent(parseInt(value), pow);\n\n    const decimal = (value ?? 0) / Math.pow(10, pow);\n\n    return `${decimal}%`;\n}\n\nexport function formatNumber(value: number): string {\n    return String(value).replace(/(.)(?=(\\d{3})+$)/g, '$1,');\n}\n\nexport function handleNewLine(text?: string): Renderable {\n    if (!text)\n        return \"\";\n\n    return (\n        <span>\n            {mergeElements(text.split(\"\\n\"), <br/>)}\n        </span>\n    );\n}\n\nexport function joinElements(elements: Renderable[], separator: Renderable): Renderable[] {\n    const parts: Renderable[] = [],\n        pushElement = function (element: Renderable) {\n            if (element === undefined)\n                return;\n\n            if (typeof element === 'object') {\n                parts.push(element);\n                return;\n            }\n\n            if (parts.length === 0) {\n                parts.push(element.toString());\n                return;\n            }\n\n            const previous = parts[parts.length - 1];\n            if (typeof previous !== 'string') {\n                parts.push(element.toString());\n                return;\n            }\n\n            parts[parts.length - 1] = previous + element.toString();\n        };\n\n    elements.forEach((element, index) => {\n        if (index > 0)\n            pushElement(separator);\n\n        pushElement(element);\n    });\n\n    return parts;\n}\n\nexport function mergeElements(elements: Renderable[], seperator: Renderable): Renderable {\n    return <React.Fragment>\n        {joinElements(elements, seperator).map((element, index) => {\n            return <React.Fragment key={index}>{element}</React.Fragment>;\n        })}\n    </React.Fragment>\n}\n","import {Entity} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\n\ninterface IProps {\n    type?: Entity.EntityType;\n    rarity?: number;\n    location: string;\n    height?: number | string;\n}\n\nclass FaceIcon extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={{height: this.props.height ?? '2em'}}/>\n        );\n    }\n\n}\n\nexport default FaceIcon;\n","import React from \"react\";\n\ninterface IProp {\n    location: string;\n    height?: number;\n}\n\nclass BuffIcon extends React.Component<IProp> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location} style={{\n                height: this.props.height ?? 25,\n                verticalAlign: \"bottom\",\n            }}/>\n        );\n    }\n\n}\n\nexport default BuffIcon;\n","import {Region, Trait} from \"@atlasacademy/api-connector\";\nimport {TraitDescriptor} from \"@atlasacademy/api-descriptor\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport Description from \"./Description\";\n\ninterface IProps {\n    region: Region;\n    trait: Trait.Trait | number;\n    disableLink?: boolean;\n    overrideTraits?: Trait.Trait[];\n}\n\ninterface IState {\n    id: number;\n    trait?: Trait.Trait;\n}\n\nclass TraitDescription extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            id: typeof props.trait === \"number\" ? props.trait : props.trait.id,\n            trait: typeof props.trait === \"number\" ? undefined : props.trait,\n        };\n    }\n\n    static renderAsString(trait: Trait.Trait | number): string {\n        const descriptor = TraitDescriptor.describe(trait);\n\n        return Description.renderAsString(descriptor);\n    }\n\n    async componentDidMount() {\n        if (this.state.trait)\n            return;\n\n        const traitList = await Api.traitList();\n\n        for (let i = 0; i < traitList.length; i++) {\n            const trait = traitList[i];\n\n            if (trait.id === this.state.id) {\n                this.setState({trait});\n\n                return;\n            }\n        }\n    }\n\n    private getDescription(trait: Trait.Trait | number) {\n        const descriptor = TraitDescriptor.describe(trait, this.props.overrideTraits);\n\n        return <Description region={this.props.region} descriptor={descriptor}/>;\n    }\n\n    private getLocation(): string {\n        return `/${this.props.region}/entities/trait/${this.state.id}`;\n    }\n\n    render() {\n        const trait = this.state.trait ?? this.state.id;\n\n        return (\n            this.props.disableLink\n                ? <span>[{this.getDescription(trait)}]</span>\n                : <Link to={this.getLocation()}>[{this.getDescription(trait)}]</Link>\n        );\n    }\n}\n\nexport default TraitDescription;\n","import {Region, Skill} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport BuffIcon from \"../Component/BuffIcon\";\n\ninterface IProps {\n    region: Region;\n    skill: Skill.Skill;\n    iconHeight?: number;\n}\n\nclass SkillDescriptor extends React.Component<IProps> {\n    static renderAsString(skill: Skill.Skill): string {\n        const name = skill.name ? skill.name : `Skill: ${skill.id}`;\n\n        return `[${name}]`;\n    }\n\n    render() {\n        return (\n            <Link to={`/${this.props.region}/skill/${this.props.skill.id}`}>\n                {this.props.skill.icon ? (\n                    <BuffIcon location={this.props.skill.icon} height={this.props.iconHeight}/>\n                ) : undefined}\n                {this.props.skill.icon ? ' ' : undefined}\n                [{this.props.skill.name ? this.props.skill.name : `Skill: ${this.props.skill.id}`}]\n            </Link>\n        );\n    }\n}\n\nexport default SkillDescriptor;\n","import {Region, Skill} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport SkillDescriptor from \"./SkillDescriptor\";\n\ninterface IProps {\n    region: Region;\n    id: number;\n}\n\ninterface IState {\n    skill?: Skill.Skill;\n}\n\nclass SkillReferenceDescriptor extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    async componentDidMount() {\n        try {\n            this.setState({\n                skill: await Api.skill(this.props.id)\n            });\n        } catch (e) {\n            // do nothing\n        }\n    }\n\n    static renderAsString(id: number): string {\n        return `[Skill: ${id}]`;\n    }\n\n    render() {\n        const route = `/${this.props.region}/skill/${this.props.id}`;\n\n        if (this.state.skill === undefined) {\n            return <Link to={route}>[Skill: {this.props.id}]</Link>;\n        }\n\n        return (\n            <SkillDescriptor region={this.props.region} skill={this.state.skill}/>\n        );\n    }\n}\n\nexport default SkillReferenceDescriptor;\n","import {Card, Region} from \"@atlasacademy/api-connector\";\nimport {CardDescriptor} from \"@atlasacademy/api-descriptor\";\nimport React from \"react\";\nimport Description from \"./Description\";\n\ninterface IProps {\n    region: Region;\n    card: Card | number;\n}\n\nclass CardDescription extends React.Component<IProps> {\n    static renderAsString(card: Card | number): string {\n        const descriptor = CardDescriptor.describe(card);\n\n        return \"[\" + Description.renderAsString(descriptor) + \"]\";\n    }\n\n    render() {\n        const descriptor = CardDescriptor.describe(this.props.card);\n\n        return <span>\n            [\n            <Description region={this.props.region} descriptor={descriptor}/>\n            ]\n        </span>;\n    }\n}\n\nexport default CardDescription;\n","import Region from \"@atlasacademy/api-connector/dist/Enum/Region\";\nimport {\n    Descriptor,\n    PartialType,\n    ParticlePartial,\n    ReferencePartial,\n    ReferenceType,\n    TextPartial,\n    ValuePartial,\n    ValueType\n} from \"@atlasacademy/api-descriptor\";\nimport React from \"react\";\nimport CardDescription from \"./CardDescription\";\nimport SkillDescriptor from \"./SkillDescriptor\";\nimport SkillReferenceDescriptor from \"./SkillReferenceDescriptor\";\nimport TraitDescription from \"./TraitDescription\";\n\ninterface IProps {\n    region: Region,\n    descriptor: Descriptor,\n}\n\nclass Description extends React.Component<IProps> {\n    private static renderParticle(partial: ParticlePartial): string {\n        return partial.value;\n    }\n\n    private static renderReferenceAsString(partial: ReferencePartial): string {\n        if (partial.referenceType === ReferenceType.CARD) {\n            return CardDescription.renderAsString(partial.value);\n        } else if (partial.referenceType === ReferenceType.SKILL) {\n            if (typeof partial.value === \"number\") {\n                return SkillReferenceDescriptor.renderAsString(partial.value);\n            } else {\n                return SkillDescriptor.renderAsString(partial.value);\n            }\n        } else if (partial.referenceType === ReferenceType.TRAIT) {\n            return TraitDescription.renderAsString(partial.value);\n        }\n\n        return partial.value.toString();\n    }\n\n    private static renderText(partial: TextPartial): string {\n        return partial.value;\n    }\n\n    private static renderValue(partial: ValuePartial): string {\n        if (partial.valueType === ValueType.PERCENT) {\n            return partial.value.toString() + '%';\n        }\n\n        return partial.value.toString();\n    }\n\n    static renderAsString(descriptor: Descriptor): string {\n        const partials = descriptor.partials(),\n            fragments: string[] = [];\n\n        for (let i = 0; i < partials.length; i++) {\n            const partial = partials[i];\n\n            if (partial.type === PartialType.PARTICLE) {\n                fragments.push(Description.renderParticle(partial));\n            } else if (partial.type === PartialType.REFERENCE) {\n                fragments.push(Description.renderReferenceAsString(partial as ReferencePartial));\n            } else if (partial.type === PartialType.TEXT) {\n                fragments.push(Description.renderText(partial));\n            } else if (partial.type === PartialType.VALUE) {\n                fragments.push(Description.renderValue(partial as ValuePartial));\n            } else {\n                fragments.push(partial.value.toString());\n            }\n        }\n\n        return fragments.join('');\n    }\n\n    private renderReference(partial: ReferencePartial, key: number) {\n        if (partial.referenceType === ReferenceType.CARD) {\n            return <CardDescription key={key} region={this.props.region} card={partial.value}/>;\n        } else if (partial.referenceType === ReferenceType.SKILL) {\n            if (typeof partial.value === \"number\") {\n                return <SkillReferenceDescriptor key={key} region={this.props.region} id={partial.value}/>;\n            } else {\n                return <SkillDescriptor key={key} region={this.props.region} skill={partial.value}/>;\n            }\n        } else if (partial.referenceType === ReferenceType.TRAIT) {\n            return <TraitDescription key={key} region={this.props.region} trait={partial.value}/>\n        }\n\n        return partial.value.toString();\n    }\n\n    render() {\n        const partials = this.props.descriptor.partials(),\n            fragments = [];\n\n        for (let i = 0; i < partials.length; i++) {\n            const partial = partials[i];\n\n            if (partial.type === PartialType.PARTICLE) {\n                fragments.push(Description.renderParticle(partial));\n            } else if (partial.type === PartialType.REFERENCE) {\n                fragments.push(this.renderReference(partial as ReferencePartial, i));\n            } else if (partial.type === PartialType.TEXT) {\n                fragments.push(Description.renderText(partial));\n            } else if (partial.type === PartialType.VALUE) {\n                fragments.push(Description.renderValue(partial as ValuePartial));\n            } else {\n                fragments.push(partial.value.toString());\n            }\n        }\n\n        return <React.Fragment>{fragments}</React.Fragment>;\n    }\n\n}\n\nexport default Description;\n","import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n    hideAll?: boolean,\n    hideReset?: boolean,\n    disableLabelStyling?: boolean,\n    maxResults?: number,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    focused: boolean,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            focused: false,\n            results: false,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getDescription(value?: T): string {\n        if (value === undefined)\n            return 'All';\n\n        const description = this.props.labels.get(value);\n\n        if (this.props.disableLabelStyling) {\n            if (description)\n                return description;\n\n            return typeof value === 'string' ? value : 'Unknown';\n        }\n\n        return description\n            ? `${description} - ${value}`\n            : `(${value})`;\n    }\n\n    private getOption(value?: T): Option<T> {\n        const label = this.getDescription(value);\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return (this.props.hideAll ? [] : [this.getOption()])\n            .concat(\n                this.props.options.map(value => this.getOption(value))\n            );\n    }\n\n    private resetInput() {\n        this.setState({focused: false, results: false});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={this.getDescription(this.state.selected)}\n                       selected={this.state.focused && this.state.results ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={this.props.maxResults ?? 1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}\n                       onFocus={() => {\n                           this.setState({focused: true});\n                       }}>\n\n                {this.props.hideReset ? null : (\n                    <button className='searchable-select-clear'\n                            onClick={e => {\n                                e.preventDefault();\n                                this.clearSelection();\n                            }}\n                            onMouseDown={e => {\n                                // Prevent input from losing focus.\n                                e.preventDefault();\n                            }}>\n                        <FontAwesomeIcon icon={faTimes}/>\n                    </button>\n                )}\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import {Region, Trait} from \"@atlasacademy/api-connector\";\nimport {faTimesCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Badge} from \"react-bootstrap\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\nimport TraitDescription from \"../../Descriptor/TraitDescription\";\nimport {mergeElements} from \"../../Helper/OutputHelper\";\n\ninterface IProps {\n    region: Region;\n    traitList: Trait.Trait[];\n    traits: number[];\n    onUpdate: (traits: number[]) => void;\n}\n\ninterface IState {\n    ref: RefObject<any>,\n    input?: string,\n}\n\nclass TraitsSelector extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef()\n        };\n    }\n\n    private options() {\n        return this.props.traitList.map(trait => {\n            const label = TraitDescription.renderAsString(trait);\n\n            return {\n                label: `${trait.id.toString().padStart(4, '0')} - ${label}`,\n                value: trait.id,\n            };\n        });\n    }\n\n    private resetInput(resetField = true) {\n        this.setState({\n            input: ''\n        });\n        if (resetField) this.state.ref.current.clear();\n    }\n\n    private addInputTrait() {\n        const value = this.state.input;\n        if (!value) {\n            this.resetInput();\n            return;\n        }\n\n        if (!value.match(/^[0-9]+$/)) {\n            this.resetInput();\n            return;\n        }\n\n        this.addTrait(parseInt(value));\n        this.resetInput();\n    }\n\n    private addTrait(trait: number) {\n        this.props.onUpdate(\n            this.props.traits.concat([trait])\n        );\n    }\n\n    private removeTrait(trait: number) {\n        console.log(\n            trait,\n            this.props.traits.filter(_trait => _trait !== trait)\n        );\n        this.props.onUpdate(\n            this.props.traits.filter(_trait => _trait !== trait)\n        );\n    }\n\n    render() {\n        return (\n            <div>\n\n                <p>\n                    {this.props.traits.length > 0 ? mergeElements(this.props.traits.map(trait => (\n                        <span key={trait}\n                              style={{cursor: 'pointer'}}\n                              onClick={(e) => {\n                                  e.preventDefault();\n                                  this.removeTrait(trait);\n                              }}>\n                            <Badge variant='primary'>\n                                <TraitDescription region={this.props.region} trait={trait} disableLink={true}/>\n                                &nbsp;\n                                <FontAwesomeIcon icon={faTimesCircle}/>\n                            </Badge>\n                        </span>\n                    )), ' ') : <i>No Traits Selected</i>}\n                </p>\n\n                <Typeahead ref={this.state.ref}\n                           id={'traitsSelector'}\n                           options={this.options()}\n                           placeholder='Add Trait Filter'\n                           ignoreDiacritics={true}\n                           selected={[]}\n                           onBlur={() => {\n                               this.resetInput(false);\n                           }}\n                           onChange={(selected) => {\n                               if (selected.length > 0) {\n                                   this.addTrait(selected[0].value);\n                               }\n                           }}\n                           onInputChange={text => {\n                               this.setState({input: text});\n                           }}\n                           onKeyDown={(e: any) => {\n                               if (e.keyCode === 13) {\n                                   this.addInputTrait();\n                               }\n                           }}/>\n\n            </div>\n        );\n    }\n}\n\nexport default TraitsSelector;\n","import {ClassName, Entity, Region, Trait} from \"@atlasacademy/api-connector\";\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport {withRouter} from \"react-router\";\nimport {Link, RouteComponentProps} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport FaceIcon from \"../Component/FaceIcon\";\nimport Loading from \"../Component/Loading\";\nimport SearchableSelect from \"../Component/SearchableSelect\";\nimport Manager from \"../Setting/Manager\";\nimport TraitsSelector from \"./Entities/TraitsSelector\";\n\nconst attributeDescriptions = new Map<Entity.Attribute, string>(),\n    classNameDescriptions = new Map<ClassName, string>(),\n    entityTypeDescriptions = new Map<Entity.EntityType, string>([\n        [Entity.EntityType.NORMAL, 'Servant'],\n        [Entity.EntityType.HEROINE, 'Servant (Mash)'],\n        [Entity.EntityType.COMBINE_MATERIAL, 'Exp Card'],\n        [Entity.EntityType.ENEMY, 'Enemy'],\n        [Entity.EntityType.ENEMY_COLLECTION, 'Enemy Servant'],\n        [Entity.EntityType.ENEMY_COLLECTION_DETAIL, 'Boss'],\n        [Entity.EntityType.SERVANT_EQUIP, 'Craft Essence'],\n        [Entity.EntityType.STATUS_UP, 'Fou Card'],\n    ]),\n    genderDescriptions = new Map<Entity.Gender, string>();\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps extends RouteComponentProps {\n    region: Region;\n    traitSelected?: number;\n}\n\ninterface IState {\n    loading: boolean;\n    error?: AxiosError;\n    traitList: Trait.Trait[];\n    searching: boolean;\n    entities: Entity.EntityBasic[];\n    name?: string;\n    type?: Entity.EntityType;\n    className?: ClassName;\n    gender?: Entity.Gender;\n    attribute?: Entity.Attribute;\n    traits: number[];\n}\n\nclass EntitiesPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        const defaultState: IState = {\n            loading: true,\n            traitList: [],\n            searching: false,\n            entities: [],\n            traits: []\n        };\n\n        if (props.traitSelected) {\n            this.state = {\n                ...defaultState,\n                traits: [props.traitSelected]\n            }\n        } else {\n            this.state = stateCache.get(props.region) ?? defaultState;\n        }\n    }\n\n    async componentDidMount() {\n        Manager.setRegion(this.props.region);\n\n        try {\n            const traitList = await Api.traitList();\n            if (this.props.traitSelected) {\n                await this.search();\n                this.props.history.replace(`/${this.props.region}/entities`);\n            }\n\n            this.setState({\n                loading: false,\n                traitList\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    private location(entity: Entity.EntityBasic): string | undefined {\n        switch (entity.type) {\n            case Entity.EntityType.NORMAL:\n            case Entity.EntityType.HEROINE:\n                return entity.collectionNo === 0\n                    ? `/${this.props.region}/enemy/${entity.id}`\n                    : `/${this.props.region}/servant/${entity.id}`;\n            case Entity.EntityType.SERVANT_EQUIP:\n                return `/${this.props.region}/craft-essence/${entity.id}`;\n            case Entity.EntityType.ENEMY:\n            case Entity.EntityType.ENEMY_COLLECTION:\n            case Entity.EntityType.ENEMY_COLLECTION_DETAIL:\n                return `/${this.props.region}/enemy/${entity.id}`;\n        }\n\n        return undefined;\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.name\n            && !this.state.type\n            && !this.state.className\n            && !this.state.gender\n            && !this.state.attribute\n            && this.state.traits.length === 0\n        ) {\n            this.setState({entities: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, entities: []});\n\n            const entities = await Api.searchEntity(\n                this.state.name,\n                this.state.type,\n                this.state.className,\n                this.state.gender,\n                this.state.attribute,\n                this.state.traits\n            );\n\n            this.setState({searching: false, entities: entities});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <h1>Entities Search</h1>\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control value={this.state.name ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({name: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <SearchableSelect<Entity.EntityType> id='select-EntityType'\n                                                      options={Object.values(Entity.EntityType)}\n                                                      labels={entityTypeDescriptions}\n                                                      selected={this.state.type}\n                                                      onChange={(value?: Entity.EntityType) => {\n                                                          this.setState({type: value});\n                                                      }}/>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Class</Form.Label>\n                        <SearchableSelect<ClassName> id='select-ClassName'\n                                                     options={\n                                                         Object\n                                                             .values(ClassName)\n                                                             .filter(className => className !== ClassName.EXTRA)\n                                                     }\n                                                     labels={classNameDescriptions}\n                                                     selected={this.state.className}\n                                                     onChange={(value?: ClassName) => {\n                                                         this.setState({className: value});\n                                                     }}/>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Gender</Form.Label>\n                        <SearchableSelect<Entity.Gender> id='select-Gender'\n                                                  options={Object.values(Entity.Gender)}\n                                                  labels={genderDescriptions}\n                                                  selected={this.state.gender}\n                                                  onChange={(value?: Entity.Gender) => {\n                                                      this.setState({gender: value});\n                                                  }}/>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Attribute</Form.Label>\n                        <SearchableSelect<Entity.Attribute> id='select-Attribute'\n                                                     options={Object.values(Entity.Attribute)}\n                                                     labels={attributeDescriptions}\n                                                     selected={this.state.attribute}\n                                                     onChange={(value?: Entity.Attribute) => {\n                                                         this.setState({attribute: value});\n                                                     }}/>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Traits</Form.Label>\n                        <TraitsSelector region={this.props.region}\n                                        traitList={this.state.traitList}\n                                        traits={this.state.traits}\n                                        onUpdate={(traits => {\n                                            this.setState({traits});\n                                        })}/>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Type</th>\n                        <th>Icon</th>\n                        <th>Name</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.entities.map((entity, index) => {\n                        const route = this.location(entity);\n\n                        return (\n                            <tr key={index}>\n                                <td>\n                                    {route ? (\n                                        <Link to={route}>\n                                            {entity.id}\n                                        </Link>\n                                    ) : entity.id}\n                                </td>\n                                <td>{entityTypeDescriptions.get(entity.type) ?? entity.type}</td>\n                                <td>\n                                    <FaceIcon location={entity.face}/>\n                                </td>\n                                <td>{entity.name}</td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(EntitiesPage);\n"],"sourceRoot":""}