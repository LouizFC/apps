{"version":3,"sources":["Component/FaceIcon.tsx","Page/MysticCodesPage.tsx","Api/Data/Region.tsx","Api/ResultCache.tsx","Api/Connection.tsx"],"names":["FaceIcon","alt","src","this","props","location","style","height","undefined","React","Component","MysticCodesPage","state","loading","mysticCodes","Connection","mysticCodeList","region","then","list","setState","e","error","id","striped","bordered","hover","textAlign","width","map","mysticCode","index","route","key","align","to","extraAssets","item","male","female","name","Region","ResultCache","cache","Map","pending","pendingCatches","fetcher","duration","value","get","Promise","resolve","callbacks","reject","push","set","call","forEach","callback","delete","window","setTimeout","catch","host","fetch","endpoint","a","axios","response","data","buff","craftEssence","craftEssenceList","func","noblePhantasm","quest","servant","servantList","skill","traitMap","language","Manager","query","LanguageOption","ENGLISH","NA","getCacheableCraftEssenceList","JP","DEFAULT","jp","na","names","entity","getCacheableMysticCodeList","phase","getCacheableServantList"],"mappings":"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","file":"static/js/15.8be7a43a.chunk.js","sourcesContent":["import React from \"react\";\nimport EntityType from \"../Api/Data/EntityType\";\n\ninterface IProps {\n    type?: EntityType;\n    rarity?: number;\n    location: string;\n    height?: number;\n}\n\nclass FaceIcon extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n}\n\nexport default FaceIcon;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport MysticCode from \"../Api/Data/MysticCode\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport FaceIcon from \"../Component/FaceIcon\";\nimport Loading from \"../Component/Loading\";\n\nimport \"./MysticCodesPage.css\";\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    mysticCodes: MysticCode[];\n}\n\nclass MysticCodesPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            mysticCodes: [],\n        };\n    }\n\n    componentDidMount() {\n        try {\n            Connection.mysticCodeList(this.props.region).then(list => {\n                this.setState({\n                    loading: false,\n                    mysticCodes: list\n                });\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div id={'mystic-codes'}>\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '140px'}}>Thumbnail</th>\n                        <th>Name</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.mysticCodes.map((mysticCode, index) => {\n                        const route = `/${this.props.region}/mystic-code/${mysticCode.id}`;\n\n                        return (\n                            <tr key={index}>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        {mysticCode.id}\n                                    </Link>\n                                </td>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        <FaceIcon location={mysticCode.extraAssets.item.male} height={50}/>\n                                        <FaceIcon location={mysticCode.extraAssets.item.female} height={50}/>\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to={route}>\n                                        {mysticCode.name}\n                                    </Link>\n                                </td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default MysticCodesPage;\n","enum Region {\n    JP = 'JP',\n    NA = 'NA'\n}\n\nexport default Region;\n","class ResultCache<K, V> {\n    private cache = new Map<K, V>();\n    private pending = new Map<K, Function[]>();\n    private pendingCatches = new Map<K, Function[]>();\n\n    get(key: K, fetcher: Function, duration: number | null): Promise<V> {\n        const value = this.cache.get(key);\n        if (value !== undefined) {\n            return new Promise<V>(resolve => {\n                resolve(value);\n            });\n        }\n\n        const callbacks = this.pending.get(key);\n        if (callbacks !== undefined) {\n            return new Promise<V>((resolve, reject) => {\n                callbacks.push(resolve);\n\n                const catches = this.pendingCatches.get(key) ?? [];\n                catches.push(reject);\n            });\n        }\n\n        this.pending.set(key, []);\n        this.pendingCatches.set(key, []);\n        return new Promise<V>((resolve, reject) => {\n            fetcher\n                .call(null)\n                .then((value: V) => {\n                    const callbacks = this.pending.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, value);\n                    });\n\n                    this.cache.set(key, value);\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    if (duration !== null) {\n                        window.setTimeout(() => {\n                            this.cache.delete(key);\n                        }, duration);\n                    }\n\n                    resolve(value);\n                })\n                .catch((error: any) => {\n                    const callbacks = this.pendingCatches.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, error);\n                    });\n\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport default ResultCache;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption} from \"../Setting/Option\";\nimport BasicListEntity from \"./Data/BasicListEntity\";\nimport Buff from \"./Data/Buff\";\nimport CraftEssence from \"./Data/CraftEssence\";\nimport Func from \"./Data/Func\";\nimport MysticCode from \"./Data/MysticCode\";\nimport NoblePhantasm from \"./Data/NoblePhantasm\";\nimport Quest from \"./Data/Quest\";\nimport Region from \"./Data/Region\";\nimport Servant from \"./Data/Servant\";\nimport Skill from \"./Data/Skill\";\nimport TraitMap from \"./Data/TraitMap\";\nimport ResultCache from \"./ResultCache\";\n\nconst host = 'https://api.atlasacademy.io',\n    cacheDuration = 20 * 1000,\n    fetch = async function <T>(endpoint: string): Promise<T> {\n        const response = await axios.get<T>(endpoint);\n\n        return response.data;\n    },\n    cache = {\n        buff: new ResultCache<string, Buff>(),\n        craftEssence: new ResultCache<string, CraftEssence>(),\n        craftEssenceList: new ResultCache<Region, BasicListEntity[]>(),\n        func: new ResultCache<string, Func>(),\n        mysticCode: new ResultCache<string, MysticCode>(),\n        mysticCodeList: new ResultCache<Region, MysticCode[]>(),\n        noblePhantasm: new ResultCache<string, NoblePhantasm>(),\n        quest: new ResultCache<string, Quest>(),\n        servant: new ResultCache<string, Servant>(),\n        servantList: new ResultCache<Region, BasicListEntity[]>(),\n        skill: new ResultCache<string, Skill>(),\n        traitMap: new ResultCache<Region, TraitMap>(),\n    };\n\nclass Connection {\n    static buff(region: Region, id: number): Promise<Buff> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.buff.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Buff>(`${host}/nice/${region}/buff/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static craftEssence(region: Region, id: number): Promise<CraftEssence> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.craftEssence.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/equip/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async craftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableCraftEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableCraftEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableCraftEssenceList(Region.JP),\n            na = await Connection.getCacheableCraftEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static func(region: Region, id: number): Promise<Func> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.func.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Func>(`${host}/nice/${region}/function/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static mysticCode(region: Region, id: number): Promise<MysticCode> {\n        const key = `${region}-${id}`;\n\n        return cache.mysticCode.get(\n            key,\n            () => {\n                return fetch<MysticCode>(`${host}/nice/${region}/MC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async mysticCodeList(region: Region): Promise<MysticCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableMysticCodeList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableMysticCodeList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableMysticCodeList(Region.JP),\n            na = await Connection.getCacheableMysticCodeList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<MysticCode>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static noblePhantasm(region: Region, id: number): Promise<NoblePhantasm> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.noblePhantasm.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<NoblePhantasm>(`${host}/nice/${region}/NP/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static quest(region: Region, id: number, phase: number): Promise<Quest> {\n        const key = `${region}-${id}-${phase}`;\n\n        return cache.quest.get(\n            key,\n            () => {\n                return fetch<Quest>(`${host}/nice/${region}/quest/${id}/${phase}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static servant(region: Region, id: number): Promise<Servant> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.servant.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/servant/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async servantList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableServantList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableServantList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableServantList(Region.JP),\n            na = await Connection.getCacheableServantList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static skill(region: Region, id: number): Promise<Skill> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.skill.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Skill>(`${host}/nice/${region}/skill/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static traitMap(region: Region): Promise<TraitMap> {\n        return cache.traitMap.get(\n            region,\n            () => {\n                return fetch<TraitMap>(`${host}/export/${region}/nice_trait.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableCraftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        return cache.craftEssenceList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_equip.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableMysticCodeList(region: Region): Promise<MysticCode[]> {\n        return cache.mysticCodeList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/nice_mystic_code.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableServantList(region: Region): Promise<BasicListEntity[]> {\n        return cache.servantList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_servant.json`);\n            },\n            null\n        );\n    }\n}\n\nexport default Connection;\n"],"sourceRoot":""}