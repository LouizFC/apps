{"version":3,"sources":["Component/DataTable.tsx","Component/RawDataViewer.tsx","Page/BuffPage.tsx"],"names":["DataTable","this","props","header","className","bordered","hover","Object","keys","data","map","key","index","dumpValue","value","element","undefined","type","JSON","stringify","React","Component","RawDataViewer","state","showing","setState","axios","get","error","style","cursor","onClick","show","icon","faSearchPlus","size","onHide","hide","Header","closeButton","Title","Body","src","collapsed","enableClipboard","clipboard","copy","BuffPage","loading","Manager","setRegion","region","loadBuff","Api","buff","id","location","height","name","detail","mergeElements","vals","trait","tvals","ckSelfIndv","ckOpIndv","reverse","nice","function","func","NP","length","skill"],"mappings":"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","file":"static/js/19.9412ffe2.chunk.js","sourcesContent":["import React from \"react\";\nimport {Table} from \"react-bootstrap\";\n\nimport \"./DataTable.css\";\nimport {Renderable} from \"../Helper/OutputHelper\";\n\ninterface IProp {\n    header?: JSX.Element | string,\n    data: {\n        [key: string]: Renderable | object;\n    }\n}\n\nclass DataTable extends React.Component<IProp> {\n    private static dumpValue(value: Renderable | object): Renderable {\n        if (typeof value === \"object\") {\n            const element = value as JSX.Element;\n            if (element.key !== undefined && element.props !== undefined && element.type !== undefined) {\n                return element;\n            } else {\n                return JSON.stringify(value);\n            }\n        }\n\n        return value;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.header ? (\n                    <div className={'data-header'}>\n                        {this.props.header}\n                    </div>\n                ) : null}\n\n                <Table bordered hover className={'data-table'}>\n                    <tbody>\n                    {Object.keys(this.props.data).map((key, index) => {\n                        return (\n                            <tr key={index}>\n                                <th>{key}</th>\n                                <td>{DataTable.dumpValue(this.props.data[key])}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default DataTable;\n","import {faSearchPlus} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport axios from \"axios\";\nimport copy from 'copy-to-clipboard';\nimport React from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport ReactJson from \"react-json-view\";\n\ninterface IProps {\n    data: object | string;\n}\n\ninterface IState {\n    data?: object;\n    showing: boolean;\n}\n\nclass RawDataViewer extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showing: false\n        };\n    }\n\n    hide() {\n        this.setState({showing: false});\n    }\n\n    async show() {\n        if (this.state.data) {\n            this.setState({showing: true});\n        } else if (typeof this.props.data === \"object\") {\n            this.setState({showing: true, data: this.props.data});\n        } else {\n            try {\n                this.setState({\n                    showing: true,\n                    data: (await axios.get(this.props.data)).data,\n                });\n            } catch (e) {\n                this.setState({\n                    showing: true,\n                    data: {error: e}\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <span className={'text-primary'}\n                      style={{cursor: \"pointer\"}}\n                      onClick={() => {\n                          this.show();\n                      }}>\n                    View\n                    &nbsp;\n                    <FontAwesomeIcon icon={faSearchPlus}/>\n                </span>\n\n                <Modal size={\"lg\"} show={this.state.showing} onHide={() => this.hide()}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Raw Data Viewer</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        {this.state.data ? (\n                            <ReactJson src={this.state.data} collapsed={1}\n                                       enableClipboard={clipboard => {\n                                           if (typeof clipboard.src === \"string\") {\n                                               copy(clipboard.src);\n                                           }\n                                       }}/>\n                        ) : null}\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default RawDataViewer;\n","import {Buff, Region} from \"@atlasacademy/api-connector\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport Api from \"../Api\";\nimport BuffIcon from \"../Component/BuffIcon\";\nimport DataTable from \"../Component/DataTable\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport RawDataViewer from \"../Component/RawDataViewer\";\nimport FuncDescriptor from \"../Descriptor/FuncDescriptor\";\nimport TraitDescription from \"../Descriptor/TraitDescription\";\nimport {mergeElements} from \"../Helper/OutputHelper\";\nimport Manager from \"../Setting/Manager\";\n\ninterface IProps {\n    region: Region;\n    id: number;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    buff?: Buff.Buff;\n}\n\nclass BuffPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        Manager.setRegion(this.props.region);\n        this.loadBuff();\n    }\n\n    async loadBuff() {\n        try {\n            const buff = await Api.buff(this.props.id);\n\n            this.setState({\n                loading: false,\n                buff: buff,\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading || !this.state.buff)\n            return <Loading/>;\n\n        const buff = this.state.buff;\n\n        return (\n            <div>\n                <h1>\n                    {buff.icon ? (\n                        <BuffIcon location={buff.icon} height={48}/>\n                    ) : undefined}\n                    {buff.icon ? ' ' : undefined}\n                    {buff.name}\n                </h1>\n\n                <br/>\n\n                <DataTable data={{\n                    \"Data\": <RawDataViewer data={buff}/>,\n                    \"Raw\": <RawDataViewer\n                        data={`https://api.atlasacademy.io/raw/${this.props.region}/buff/${buff.id}`}/>,\n                    \"ID\": buff.id,\n                    \"Name\": buff.name,\n                    \"Detail\": buff.detail,\n                    \"Type\": buff.type,\n                    \"Buff Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.vals.map(\n                                    trait => <TraitDescription region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    ),\n                    \"Target Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.tvals.map(\n                                    trait => <TraitDescription region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    ),\n                    \"Required Self Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.ckSelfIndv.map(\n                                    trait => <TraitDescription region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    ),\n                    \"Required Opponent Traits\": (\n                        <div>\n                            {mergeElements(\n                                buff.ckOpIndv.map(\n                                    trait => <TraitDescription region={this.props.region} trait={trait}/>\n                                ),\n                                ' '\n                            )}\n                        </div>\n                    )\n                }}/>\n\n                <h3>Related Functions</h3>\n                <Table>\n                    <thead>\n                    <tr>\n                        <th>Function</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {buff.reverse?.nice?.function ? (\n                        buff.reverse.nice.function.map((func, index) => {\n                            return (\n                                <tr key={index}>\n                                    <td>\n                                        <FuncDescriptor region={this.props.region} func={func}/>\n                                    </td>\n                                    <td>\n                                        {\n                                            (func.reverse?.nice?.NP ?? []).length\n                                            + (func.reverse?.nice?.skill ?? []).length\n                                        }\n                                    </td>\n                                </tr>\n                            );\n                        })\n                    ) : undefined}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default BuffPage;\n"],"sourceRoot":""}