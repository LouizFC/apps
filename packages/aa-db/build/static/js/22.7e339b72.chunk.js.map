{"version":3,"sources":["Component/SearchableSelect.tsx","Page/FuncsPage.tsx"],"names":["SearchableSelect","props","state","ref","React","createRef","selected","focused","results","this","setState","undefined","current","clear","value","description","labels","get","label","getDescription","getOption","concat","options","map","length","onChange","id","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","onFocus","className","onClick","e","preventDefault","clearSelection","onMouseDown","icon","faTimes","Component","stateCache","Map","FuncsPage","region","searching","funcs","set","text","type","target","team","alert","Connection","searchFuncs","error","onSubmit","ev","search","Group","Label","Control","Object","values","FuncType","funcDescriptions","FuncTargetType","targetDescriptions","FuncTargetTeam","PLAYER_AND_ENEMY","PLAYER","ENEMY","variant","faSearch","responsive","func","index","key","funcId","reverseTds","reverseSkills"],"mappings":"6MA2BMA,G,yDACF,WAAYC,GAAmB,IAAD,8BAC1B,cAAMA,IAEDC,MAAQ,CACTC,IAAKC,IAAMC,YACXC,SAAUL,EAAMK,SAChBC,SAAS,EACTC,SAAS,GAPa,E,uLAYpBC,KAAKC,SAAS,CAACJ,cAAUK,EAAWH,SAAS,I,OACnDC,KAAKP,MAAMC,IAAIS,QAAQC,Q,2IAGJC,GACnB,QAAcH,IAAVG,EACA,MAAO,MAEX,IAAMC,EAAcN,KAAKR,MAAMe,OAAOC,IAAIH,GAE1C,OAAOC,EAAW,UACTA,EADS,cACQD,GADR,WAERA,EAFQ,O,gCAKJA,GAGd,MAAO,CAACI,MAFMT,KAAKU,eAAeL,GAEnBA,W,mCAGgB,IAAD,OAC9B,MAAO,CAACL,KAAKW,aAAaC,OACtBZ,KAAKR,MAAMqB,QAAQC,KAAI,SAAAT,GAAK,OAAI,EAAKM,UAAUN,S,mCAKnDL,KAAKC,SAAS,CAACH,SAAS,EAAOC,SAAS,M,4EAGjBc,G,0EACA,IAAnBA,EAAQE,O,gBACRf,KAAKC,SAAS,CAACF,SAAS,I,6BAElBF,EAAWgB,EAAQ,GAAGR,M,SAEtBL,KAAKC,SAAS,CAACJ,WAAUE,SAAS,I,OACxCC,KAAKR,MAAMwB,SAASnB,G,sIAIlB,IAAD,OACL,OACI,kBAAC,IAAD,CAAWH,IAAKM,KAAKP,MAAMC,IAChBuB,GAAIjB,KAAKR,MAAMyB,GACfJ,QAASb,KAAKkB,aACdC,YAAanB,KAAKU,eAAeV,KAAKP,MAAMI,UAC5CA,SAAUG,KAAKP,MAAMK,SAAWE,KAAKP,MAAMM,QAAU,CAACC,KAAKW,UAAUX,KAAKP,MAAMI,WAAa,GAC7FuB,kBAAkB,EAClBC,WAAY,IACZC,OAAQ,WACJ,EAAKC,cAETP,SAAU,SAACnB,GACP,EAAK2B,aAAa3B,IAEtB4B,QAAS,WACL,EAAKxB,SAAS,CAACH,SAAS,MAEnC,4BAAQ4B,UAAU,0BACVC,QAAS,SAAAC,GACLA,EAAEC,iBACF,EAAKC,kBAETC,YAAa,SAAAH,GAETA,EAAEC,mBAEV,kBAAC,IAAD,CAAiBG,KAAMC,Y,GAlFTtC,IAAMuC,YAyFzB3C,O,kQCrGX4C,EAAa,IAAIC,IAAoB,IAoBnCC,E,kDACF,WAAY7C,GAAgB,IAAD,gCACvB,cAAMA,IAEDC,MAAL,UAAa0C,EAAW3B,IAAIhB,EAAM8C,eAAlC,QAA6C,CACzCC,WAAW,EACXC,MAAO,IALY,E,iEAUvBL,EAAWM,IAAIzC,KAAKR,MAAM8C,OAA1B,eAAsCtC,KAAKP,U,kJAKtCO,KAAKP,MAAMiD,MAAS1C,KAAKP,MAAMkD,MAAS3C,KAAKP,MAAMmD,QAAW5C,KAAKP,MAAMoD,K,uBAC1E7C,KAAKC,SAAS,CAACuC,MAAO,KACtBM,MAAM,8C,mDAKA9C,KAAKC,SAAS,CAACsC,WAAW,EAAMC,MAAO,K,uBAEzBO,IAAWC,YAC3BhD,KAAKR,MAAM8C,OACXtC,KAAKP,MAAMiD,KACX1C,KAAKP,MAAMkD,KACX3C,KAAKP,MAAMmD,OACX5C,KAAKP,MAAMoD,M,OALTL,E,OAQNxC,KAAKC,SAAS,CAACsC,WAAW,EAAOC,U,kDAEjCxC,KAAKC,SAAS,CACVgD,MAAM,EAAD,K,+IAKP,IAAD,SACL,OAAIjD,KAAKP,MAAMwD,MACJ,kBAAC,IAAD,CAAaA,MAAOjD,KAAKP,MAAMwD,QAGtC,6BACKjD,KAAKP,MAAM8C,UAAY,kBAAC,IAAD,MAAa,KAErC,0BAAMW,SAAU,SAACC,GACbA,EAAGtB,iBACH,EAAKuB,WAEL,kBAAC,IAAKC,MAAN,KACI,kBAAC,IAAKC,MAAN,aACA,kBAAC,IAAKC,QAAN,CAAclD,MAAK,UAAEL,KAAKP,MAAMiD,YAAb,QAAqB,GAC1B1B,SAAU,SAACmC,GACP,EAAKlD,SAAS,CAACyC,KAAMS,EAAGP,OAAOvC,YAGrD,kBAAC,IAAKgD,MAAN,KACI,kBAAC,IAAKC,MAAN,aACA,kBAAC,IAAD,CAA4BrC,GAAG,kBACHJ,QAAS2C,OAAOC,OAAOC,KACvBnD,OAAQoD,IACR3C,SAAU,SAACX,GACP,EAAKJ,SAAS,CAAC0C,KAAMtC,QAGzD,kBAAC,IAAKgD,MAAN,KACI,kBAAC,IAAKC,MAAN,eACA,kBAAC,IAAD,CAAkCrC,GAAG,wBACTJ,QAAS2C,OAAOC,OAAOG,KACvBrD,OAAQsD,IACR7C,SAAU,SAACX,GACP,EAAKJ,SAAS,CAAC2C,OAAQvC,QAG3D,kBAAC,IAAKgD,MAAN,KACI,kBAAC,IAAKC,MAAN,gCACA,kBAAC,IAAD,CAAkCrC,GAAG,wBACHJ,QAAS2C,OAAOC,OAAOK,KACvBvD,OAAQ,IAAI6B,IAA4B,CACpC,CAAC0B,IAAeC,iBAAkB,uBAClC,CAACD,IAAeE,OAAQ,gBACxB,CAACF,IAAeG,MAAO,kBAE3BjD,SAAU,SAACX,GACP,EAAKJ,SAAS,CAAC4C,KAAMxC,QAG/D,kBAAC,IAAD,CAAQ6D,QAAS,UAAWvC,QAAS,kBAAM,EAAKyB,WAAhD,SAEK,IACD,kBAAC,IAAD,CAAiBpB,KAAMmC,QAI/B,6BAEA,kBAAC,IAAD,CAAOC,YAAU,GACb,+BACA,4BACI,iCACA,wCACA,6CAGJ,+BACCpE,KAAKP,MAAM+C,MAAM1B,KAAI,SAACuD,EAAMC,GACzB,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAKG,QACV,4BACI,kBAAC,IAAD,CAAgBlC,OAAQ,EAAK9C,MAAM8C,OAAQ+B,KAAMA,KAErD,4BACKA,EAAKI,WAAW1D,OAASsD,EAAKK,cAAc3D,mB,GArHzDpB,IAAMuC,WAiIfG","file":"static/js/22.7e339b72.chunk.js","sourcesContent":["import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    focused: boolean,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            focused: false,\n            results: false,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getDescription(value?: T): string {\n        if (value === undefined)\n            return 'All';\n\n        const description = this.props.labels.get(value);\n\n        return description\n            ? `${description} - ${value}`\n            : `(${value})`;\n    }\n\n    private getOption(value?: T): Option<T> {\n        const label = this.getDescription(value);\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return [this.getOption()].concat(\n            this.props.options.map(value => this.getOption(value))\n        );\n    }\n\n    private resetInput() {\n        this.setState({focused: false, results: false});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={this.getDescription(this.state.selected)}\n                       selected={this.state.focused && this.state.results ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}\n                       onFocus={() => {\n                           this.setState({focused: true});\n                       }}>\n                <button className='searchable-select-clear'\n                        onClick={e => {\n                            e.preventDefault();\n                            this.clearSelection();\n                        }}\n                        onMouseDown={e => {\n                            // Prevent input from losing focus.\n                            e.preventDefault();\n                        }}>\n                    <FontAwesomeIcon icon={faTimes}/>\n                </button>\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","import {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport Connection from \"../Api/Connection\";\nimport Func, {FuncTargetTeam, FuncTargetType, FuncType} from \"../Api/Data/Func\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport SearchableSelect from \"../Component/SearchableSelect\";\nimport {funcDescriptions} from \"../Descriptor/Func/handleActionSection\";\nimport {targetDescriptions} from \"../Descriptor/Func/handleTargetSection\";\nimport FuncDescriptor from \"../Descriptor/FuncDescriptor\";\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    searching: boolean;\n    funcs: Func[];\n    text?: string;\n    type?: FuncType;\n    target?: FuncTargetType;\n    team?: FuncTargetTeam;\n}\n\nclass FuncsPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = stateCache.get(props.region) ?? {\n            searching: false,\n            funcs: []\n        };\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.text && !this.state.type && !this.state.target && !this.state.team) {\n            this.setState({funcs: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, funcs: []});\n\n            const funcs = await Connection.searchFuncs(\n                this.props.region,\n                this.state.text,\n                this.state.type,\n                this.state.target,\n                this.state.team\n            );\n\n            this.setState({searching: false, funcs});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n                    <Form.Group>\n                        <Form.Label>Text</Form.Label>\n                        <Form.Control value={this.state.text ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({text: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <SearchableSelect<FuncType> id='select-FuncType'\n                                                    options={Object.values(FuncType)}\n                                                    labels={funcDescriptions}\n                                                    onChange={(value?: FuncType) => {\n                                                        this.setState({type: value});\n                                                    }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Target</Form.Label>\n                        <SearchableSelect<FuncTargetType> id='select-FuncTargetType'\n                                                    options={Object.values(FuncTargetType)}\n                                                    labels={targetDescriptions}\n                                                    onChange={(value?: FuncTargetType) => {\n                                                        this.setState({target: value});\n                                                    }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Affects Players/Enemies</Form.Label>\n                        <SearchableSelect<FuncTargetTeam> id='select-FuncTargetTeam'\n                                                          options={Object.values(FuncTargetTeam)}\n                                                          labels={new Map<FuncTargetTeam, string>([\n                                                              [FuncTargetTeam.PLAYER_AND_ENEMY, 'Players and Enemies'],\n                                                              [FuncTargetTeam.PLAYER, 'Players only'],\n                                                              [FuncTargetTeam.ENEMY, 'Enemies only'],\n                                                          ])}\n                                                          onChange={(value?: FuncTargetTeam) => {\n                                                              this.setState({team: value});\n                                                          }}/>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Function</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.funcs.map((func, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{func.funcId}</td>\n                                <td>\n                                    <FuncDescriptor region={this.props.region} func={func}/>\n                                </td>\n                                <td>\n                                    {func.reverseTds.length + func.reverseSkills.length}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default FuncsPage;\n"],"sourceRoot":""}