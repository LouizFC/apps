{"version":3,"sources":["Component/SearchableSelect.tsx","Page/BuffsPage.tsx"],"names":["SearchableSelect","props","state","ref","React","createRef","selected","focused","results","this","setState","undefined","current","clear","value","description","labels","get","label","getDescription","getOption","concat","options","map","length","onChange","id","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","onFocus","className","onClick","e","preventDefault","clearSelection","onMouseDown","icon","faTimes","Component","stateCache","Map","buffDescriptions","Object","values","BuffType","forEach","type","x","upDownBuffs","up","down","typeDescriptions","set","BuffsPage","region","searching","buffs","name","alert","Connection","searchBuffs","error","onSubmit","ev","search","Group","Label","Control","target","variant","faSearch","responsive","buff","index","key","reverseFunctions"],"mappings":"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","file":"static/js/21.702bdd8f.chunk.js","sourcesContent":["import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    focused: boolean,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            focused: false,\n            results: false,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getDescription(value?: T): string {\n        if (value === undefined)\n            return 'All';\n\n        const description = this.props.labels.get(value);\n\n        return description\n            ? `${description} - ${value}`\n            : `(${value})`;\n    }\n\n    private getOption(value?: T): Option<T> {\n        const label = this.getDescription(value);\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return [this.getOption()].concat(\n            this.props.options.map(value => this.getOption(value))\n        );\n    }\n\n    private resetInput() {\n        this.setState({focused: false, results: false});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={this.getDescription(this.state.selected)}\n                       selected={this.state.focused && this.state.results ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}\n                       onFocus={() => {\n                           this.setState({focused: true});\n                       }}>\n                <button className='searchable-select-clear'\n                        onClick={e => {\n                            e.preventDefault();\n                            this.clearSelection();\n                        }}\n                        onMouseDown={e => {\n                            // Prevent input from losing focus.\n                            e.preventDefault();\n                        }}>\n                    <FontAwesomeIcon icon={faTimes}/>\n                </button>\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","import {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport Connection from \"../Api/Connection\";\nimport Buff, {BuffType} from \"../Api/Data/Buff\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport SearchableSelect from \"../Component/SearchableSelect\";\nimport BuffDescriptor, {typeDescriptions, upDownBuffs} from \"../Descriptor/BuffDescriptor\";\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    searching: boolean;\n    buffs: Buff[];\n    name?: string;\n    type?: BuffType;\n}\n\nconst buffDescriptions = new Map<BuffType, string>();\nObject.values(BuffType).forEach(type => {\n    let description;\n\n    for (let x in upDownBuffs) {\n        if (upDownBuffs[x].up === type)\n            description = upDownBuffs[x].description + ' Up';\n\n        if (upDownBuffs[x].down === type)\n            description = upDownBuffs[x].description + ' Down';\n    }\n\n    if (description === undefined) {\n        description = typeDescriptions.get(type);\n    }\n\n    if (description !== undefined) {\n        buffDescriptions.set(type, description);\n    }\n})\n\nclass BuffsPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = stateCache.get(props.region) ?? {\n            searching: false,\n            buffs: []\n        };\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.name && !this.state.type) {\n            this.setState({buffs: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, buffs: []});\n\n            const buffs = await Connection.searchBuffs(\n                this.props.region,\n                this.state.name,\n                this.state.type\n            );\n\n            this.setState({searching: false, buffs});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control value={this.state.name ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({name: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <SearchableSelect<BuffType> id='select-BuffType'\n                                                    options={Object.values(BuffType)}\n                                                    labels={buffDescriptions}\n                                                    onChange={(value?: BuffType) => {\n                                                        this.setState({type: value});\n                                                    }}/>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Buff</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.buffs.map((buff, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{buff.id}</td>\n                                <td>\n                                    <BuffDescriptor region={this.props.region} buff={buff}/>\n                                </td>\n                                <td>\n                                    {buff.reverseFunctions.length}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default BuffsPage;\n"],"sourceRoot":""}