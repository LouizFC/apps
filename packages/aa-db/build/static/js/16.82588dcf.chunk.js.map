{"version":3,"sources":["Descriptor/RarityDescriptor.tsx","Component/FaceIcon.tsx","Page/CommandCodesPage.tsx","Api/ResultCache.tsx","Api/Connection.tsx"],"names":["assetMap","Map","RarityDescriptor","has","this","props","rarity","alt","src","get","style","height","React","Component","FaceIcon","location","undefined","CommandCodesPage","state","loading","commandCodes","Connection","commandCodeList","region","then","list","setState","e","error","slice","reverse","search","words","split","filter","word","map","toLowerCase","entity","every","name","includes","id","inline","justifyContent","Control","marginLeft","placeholder","value","onChange","ev","target","striped","bordered","hover","responsive","textAlign","width","commandCode","index","route","key","align","to","collectionNo","extraAssets","faces","cc","ResultCache","cache","pending","pendingCatches","fetcher","duration","Promise","resolve","callbacks","reject","push","set","call","forEach","callback","delete","window","setTimeout","catch","host","fetch","endpoint","a","axios","response","data","buff","craftEssence","craftEssenceList","func","mysticCode","mysticCodeList","noblePhantasm","quest","servant","servantList","skill","traitMap","language","Manager","query","LanguageOption","ENGLISH","Region","NA","getCommandCodeEssenceList","JP","DEFAULT","jp","na","names","getCacheableCraftEssenceList","getCacheableMysticCodeList","phase","source","type","encodeURI","text","team"],"mappings":"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","file":"static/js/16.82588dcf.chunk.js","sourcesContent":["import React from \"react\";\n\nconst assetMap = new Map<number, string>([\n    [1, './assets/star1.png'],\n    [2, './assets/star2.png'],\n    [3, './assets/star3.png'],\n    [4, './assets/star4.png'],\n    [5, './assets/star5.png'],\n]);\n\ninterface IProps {\n    rarity: number;\n    height?: number;\n}\n\nclass RarityDescriptor extends React.Component<IProps> {\n    render() {\n        return (\n            <span>\n                {assetMap.has(this.props.rarity) ? (\n                    <img alt={`${this.props.rarity} star(s)`}\n                         src={assetMap.get(this.props.rarity)}\n                         style={{height: this.props.height ?? 18}}/>\n                ) : null}\n            </span>\n        );\n    }\n}\n\nexport default RarityDescriptor;\n","import React from \"react\";\nimport EntityType from \"../Api/Data/EntityType\";\n\ninterface IProps {\n    type?: EntityType;\n    rarity?: number;\n    location: string;\n    height?: number;\n}\n\nclass FaceIcon extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n}\n\nexport default FaceIcon;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Form, Table} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport CommandCode from \"../Api/Data/CommandCode\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport FaceIcon from \"../Component/FaceIcon\";\nimport Loading from \"../Component/Loading\";\nimport RarityDescriptor from \"../Descriptor/RarityDescriptor\";\n\nimport \"./CommandCodesPage.css\";\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    commandCodes: CommandCode[];\n    search?: string;\n}\n\nclass CommandCodesPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            commandCodes: [],\n        };\n    }\n\n    componentDidMount() {\n        try {\n            Connection.commandCodeList(this.props.region).then(list => {\n                this.setState({\n                    loading: false,\n                    commandCodes: list\n                });\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    private commandCodes(): CommandCode[] {\n        let list = this.state.commandCodes.slice().reverse();\n\n        if (this.state.search) {\n            const words = this.state.search\n                .split(' ')\n                .filter(word => word)\n                .map(word => word.toLowerCase());\n\n            list = list.filter(entity => words.every(word => entity.name.toLowerCase().includes(word)));\n        }\n\n        return list;\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div id={'command-codes'}>\n                <Form inline style={{justifyContent: 'center'}}>\n                    <Form.Control style={{marginLeft: 'auto'}} placeholder={'Search'} value={this.state.search ?? ''}\n                                  onChange={(ev: ChangeEvent) => {\n                                      this.setState({search: ev.target.value});\n                                  }}/>\n                </Form>\n\n                <hr/>\n\n                <Table striped bordered hover responsive>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Thumbnail</th>\n                        <th>Name</th>\n                        <th>Rarity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.commandCodes()\n                        .map((commandCode, index) => {\n                            const route = `/${this.props.region}/command-code/${commandCode.id}`;\n\n                            return <tr key={index}>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        {commandCode.collectionNo}\n                                    </Link>\n                                </td>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        <FaceIcon rarity={commandCode.rarity}\n                                                  location={commandCode.extraAssets.faces.cc[commandCode.id] ?? ''}\n                                                  height={50}/>\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to={route}>\n                                        {commandCode.name}\n                                    </Link>\n                                </td>\n                                <td>\n                                    <RarityDescriptor rarity={commandCode.rarity}/>\n                                </td>\n                            </tr>\n                        })\n                    }\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default CommandCodesPage;\n","class ResultCache<K, V> {\n    private cache = new Map<K, V>();\n    private pending = new Map<K, Function[]>();\n    private pendingCatches = new Map<K, Function[]>();\n\n    get(key: K, fetcher: Function, duration: number | null): Promise<V> {\n        const value = this.cache.get(key);\n        if (value !== undefined) {\n            return new Promise<V>(resolve => {\n                resolve(value);\n            });\n        }\n\n        const callbacks = this.pending.get(key);\n        if (callbacks !== undefined) {\n            return new Promise<V>((resolve, reject) => {\n                callbacks.push(resolve);\n\n                const catches = this.pendingCatches.get(key) ?? [];\n                catches.push(reject);\n            });\n        }\n\n        this.pending.set(key, []);\n        this.pendingCatches.set(key, []);\n        return new Promise<V>((resolve, reject) => {\n            fetcher\n                .call(null)\n                .then((value: V) => {\n                    const callbacks = this.pending.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, value);\n                    });\n\n                    this.cache.set(key, value);\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    if (duration !== null) {\n                        window.setTimeout(() => {\n                            this.cache.delete(key);\n                        }, duration);\n                    }\n\n                    resolve(value);\n                })\n                .catch((error: any) => {\n                    const callbacks = this.pendingCatches.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, error);\n                    });\n\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport default ResultCache;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption} from \"../Setting/Option\";\nimport BasicListEntity from \"./Data/BasicListEntity\";\nimport Buff, {BuffType} from \"./Data/Buff\";\nimport CommandCode from \"./Data/CommandCode\";\nimport CraftEssence from \"./Data/CraftEssence\";\nimport Func, {FuncTargetTeam, FuncTargetType, FuncType} from \"./Data/Func\";\nimport MysticCode from \"./Data/MysticCode\";\nimport NoblePhantasm from \"./Data/NoblePhantasm\";\nimport Quest from \"./Data/Quest\";\nimport Region from \"./Data/Region\";\nimport Servant from \"./Data/Servant\";\nimport Skill from \"./Data/Skill\";\nimport TraitMap from \"./Data/TraitMap\";\nimport ResultCache from \"./ResultCache\";\n\nconst host = 'https://api.atlasacademy.io',\n    cacheDuration = 20 * 1000,\n    fetch = async function <T>(endpoint: string): Promise<T> {\n        const response = await axios.get<T>(endpoint);\n\n        return response.data;\n    },\n    cache = {\n        buff: new ResultCache<string, Buff>(),\n        commandCode: new ResultCache<string, CommandCode>(),\n        commandCodes: new ResultCache<Region, CommandCode[]>(),\n        craftEssence: new ResultCache<string, CraftEssence>(),\n        craftEssenceList: new ResultCache<Region, BasicListEntity[]>(),\n        func: new ResultCache<string, Func>(),\n        mysticCode: new ResultCache<string, MysticCode>(),\n        mysticCodeList: new ResultCache<Region, MysticCode[]>(),\n        noblePhantasm: new ResultCache<string, NoblePhantasm>(),\n        quest: new ResultCache<string, Quest>(),\n        servant: new ResultCache<string, Servant>(),\n        servantList: new ResultCache<string, BasicListEntity[]>(),\n        skill: new ResultCache<string, Skill>(),\n        traitMap: new ResultCache<Region, TraitMap>(),\n    };\n\nclass Connection {\n    static buff(region: Region, id: number): Promise<Buff> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.buff.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Buff>(`${host}/nice/${region}/buff/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static commandCode(region: Region, id: number): Promise<CommandCode> {\n        const key = `${region}-${id}`;\n\n        return cache.commandCode.get(\n            key,\n            () => {\n                return fetch<CommandCode>(`${host}/nice/${region}/CC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async commandCodeList(region: Region): Promise<CommandCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCommandCodeEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCommandCodeEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCommandCodeEssenceList(Region.JP),\n            na = await Connection.getCommandCodeEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static craftEssence(region: Region, id: number): Promise<CraftEssence> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.craftEssence.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/equip/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async craftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableCraftEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableCraftEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableCraftEssenceList(Region.JP),\n            na = await Connection.getCacheableCraftEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static func(region: Region, id: number): Promise<Func> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.func.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Func>(`${host}/nice/${region}/function/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static mysticCode(region: Region, id: number): Promise<MysticCode> {\n        const key = `${region}-${id}`;\n\n        return cache.mysticCode.get(\n            key,\n            () => {\n                return fetch<MysticCode>(`${host}/nice/${region}/MC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async mysticCodeList(region: Region): Promise<MysticCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableMysticCodeList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableMysticCodeList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableMysticCodeList(Region.JP),\n            na = await Connection.getCacheableMysticCodeList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<MysticCode>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static noblePhantasm(region: Region, id: number): Promise<NoblePhantasm> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.noblePhantasm.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<NoblePhantasm>(`${host}/nice/${region}/NP/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static quest(region: Region, id: number, phase: number): Promise<Quest> {\n        const key = `${region}-${id}-${phase}`;\n\n        return cache.quest.get(\n            key,\n            () => {\n                return fetch<Quest>(`${host}/nice/${region}/quest/${id}/${phase}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static servant(region: Region, id: number): Promise<Servant> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.servant.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/servant/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async servantList(region: Region): Promise<BasicListEntity[]> {\n        const language = Manager.language(),\n            key = `${region}-${language}`;\n\n        let source: string;\n\n        if (region === Region.NA) {\n            source = `${host}/export/NA/basic_servant.json`;\n        } else if (region === Region.JP && language === LanguageOption.DEFAULT) {\n            source = `${host}/export/JP/basic_servant.json`;\n        } else {\n            source = `${host}/export/JP/basic_servant_lang_en.json`;\n        }\n\n        return cache.servantList.get(\n            key,\n            () => {\n                return fetch<BasicListEntity[]>(source);\n            },\n            null\n        );\n    }\n\n    static skill(region: Region, id: number): Promise<Skill> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.skill.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Skill>(`${host}/nice/${region}/skill/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static traitMap(region: Region): Promise<TraitMap> {\n        return cache.traitMap.get(\n            region,\n            () => {\n                return fetch<TraitMap>(`${host}/export/${region}/nice_trait.json`);\n            },\n            null\n        );\n    }\n\n    static searchBuffs(region: Region, name?: string, type?: BuffType): Promise<Buff[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (name)\n            query += \"&name=\" + encodeURI(name);\n        if (type)\n            query += \"&type=\" + type;\n\n        return fetch<Buff[]>(`${host}/nice/${region}/buff/search${query}`);\n    }\n\n    static searchFuncs(region: Region,\n                       text?: string,\n                       type?: FuncType,\n                       target?: FuncTargetType,\n                       team?: FuncTargetTeam): Promise<Func[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (text)\n            query += \"&popupText=\" + encodeURI(text);\n        if (type)\n            query += \"&type=\" + type;\n        if (target)\n            query += \"&targetType=\" + target;\n        if (team)\n            query += \"&targetTeam=\" + team;\n\n        return fetch<Func[]>(`${host}/nice/${region}/function/search${query}`);\n    }\n\n    private static async getCommandCodeEssenceList(region: Region): Promise<CommandCode[]> {\n        return cache.commandCodes.get(\n            region,\n            () => {\n                return fetch<CommandCode[]>(`${host}/export/${region}/nice_command_code.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableCraftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        return cache.craftEssenceList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_equip.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableMysticCodeList(region: Region): Promise<MysticCode[]> {\n        return cache.mysticCodeList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/nice_mystic_code.json`);\n            },\n            null\n        );\n    }\n}\n\nexport default Connection;\n"],"sourceRoot":""}