{"version":3,"sources":["Component/SearchableSelect.tsx","Page/BuffsPage.tsx"],"names":["SearchableSelect","props","state","ref","React","createRef","selected","results","this","setState","undefined","current","clear","value","label","description","labels","get","getOption","concat","options","map","length","onChange","id","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","className","onClick","e","preventDefault","clearSelection","onMouseDown","icon","faTimes","Component","stateCache","Map","buffDescriptions","Object","values","BuffType","forEach","type","x","upDownBuffs","up","down","typeDescriptions","set","BuffsPage","region","searching","buffs","name","alert","Connection","searchBuffs","error","onSubmit","ev","search","Group","Label","Control","target","variant","faSearch","responsive","buff","index","key","reverseFunctions"],"mappings":"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","file":"static/js/21.606d7308.chunk.js","sourcesContent":["import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            results: true,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getOption(value?: T): Option<T> {\n        if (value === undefined) {\n            return {label: 'All', value};\n        }\n\n        const description = this.props.labels.get(value),\n            label = description\n                ? `${description} - ${value}`\n                : `(${value})`;\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return [this.getOption()].concat(\n            this.props.options.map(value => this.getOption(value))\n        );\n    }\n\n    private resetInput() {\n        if (this.state.results)\n            return;\n\n        this.setState({results: true});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={'All'}\n                       selected={this.state.results && this.state.selected ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}>\n                <button className='searchable-select-clear'\n                        onClick={e => {\n                            e.preventDefault();\n                            this.clearSelection();\n                        }}\n                        onMouseDown={e => {\n                            // Prevent input from losing focus.\n                            e.preventDefault();\n                        }}>\n                    <FontAwesomeIcon icon={faTimes}/>\n                </button>\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","import {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport Connection from \"../Api/Connection\";\nimport Buff, {BuffType} from \"../Api/Data/Buff\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport SearchableSelect from \"../Component/SearchableSelect\";\nimport BuffDescriptor, {typeDescriptions, upDownBuffs} from \"../Descriptor/BuffDescriptor\";\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    searching: boolean;\n    buffs: Buff[];\n    name?: string;\n    type?: BuffType;\n}\n\nconst buffDescriptions = new Map<BuffType, string>();\nObject.values(BuffType).forEach(type => {\n    let description;\n\n    for (let x in upDownBuffs) {\n        if (upDownBuffs[x].up === type)\n            description = upDownBuffs[x].description + ' Up';\n\n        if (upDownBuffs[x].down === type)\n            description = upDownBuffs[x].description + ' Down';\n    }\n\n    if (description === undefined) {\n        description = typeDescriptions.get(type);\n    }\n\n    if (description !== undefined) {\n        buffDescriptions.set(type, description);\n    }\n})\n\nclass BuffsPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = stateCache.get(props.region) ?? {\n            searching: false,\n            buffs: []\n        };\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.name && !this.state.type) {\n            this.setState({buffs: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, buffs: []});\n\n            const buffs = await Connection.searchBuffs(\n                this.props.region,\n                this.state.name,\n                this.state.type\n            );\n\n            this.setState({searching: false, buffs});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control value={this.state.name ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({name: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <SearchableSelect<BuffType> id='select-FuncType'\n                                                    options={Object.values(BuffType)}\n                                                    labels={buffDescriptions}\n                                                    onChange={(value?: BuffType) => {\n                                                        this.setState({type: value});\n                                                    }}/>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Buff</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.buffs.map((buff, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{buff.id}</td>\n                                <td>\n                                    <BuffDescriptor region={this.props.region} buff={buff}/>\n                                </td>\n                                <td>\n                                    {buff.reverseFunctions.length}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default BuffsPage;\n"],"sourceRoot":""}