{"version":3,"sources":["Descriptor/CraftEssenceDescriptor.tsx","Descriptor/MysticCodeDescriptor.tsx","Page/Skill/SkillVersion.tsx","Page/SkillPage.tsx"],"names":["CraftEssenceDescriptor","assetMap","this","props","craftEssence","extraAssets","faces","equip","asset","id","undefined","to","region","collectionNo","type","Entity","EntityType","SERVANT_EQUIP","rarity","location","height","name","icon","faShare","React","Component","MysticCodeDescriptor","mysticCode","item","male","female","SkillVersion","skill","functions","map","func","index","dataVal","getTargetVersionValues","level","key","FuncDescriptor","Row","Col","xs","md","FuncMainData","DataValMainData","SkillPage","state","loading","levels","Manager","setRegion","loadSkill","Api","setState","svals","length","error","ErrorStatus","Loading","BuffIcon","DataTable","data","RawDataViewer","detail","reverse","nice","servant","filter","entity","NORMAL","HEROINE","ServantDescriptor","iconHeight","MC","EffectBreakdown","cooldowns","coolDown","funcs","scripts","script","Form","inline","style","justifyContent","Control","as","value","onChange","ev","changeLevel","parseInt","target","Array","from","keys","i"],"mappings":"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","file":"static/js/24.62a8e495.chunk.js","sourcesContent":["import {CraftEssence, Entity, Region} from \"@atlasacademy/api-connector\";\nimport {faShare} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport FaceIcon from \"../Component/FaceIcon\";\n\ninterface IProps {\n    region: Region;\n    craftEssence: CraftEssence.CraftEssence;\n}\n\nclass CraftEssenceDescriptor extends React.Component<IProps> {\n    render() {\n        const assetMap = this.props.craftEssence.extraAssets.faces.equip,\n            asset = assetMap ? assetMap[this.props.craftEssence.id] : undefined;\n\n        return (\n            <Link to={`/${this.props.region}/craft-essence/${this.props.craftEssence.collectionNo}`}>\n                {asset ? (\n                    <FaceIcon type={Entity.EntityType.SERVANT_EQUIP}\n                              rarity={this.props.craftEssence.rarity}\n                              location={asset}\n                              height={'2em'}/>\n                ) : undefined}\n                {asset ? ' ' : undefined}\n                {this.props.craftEssence.name}\n                {' '}\n                <FontAwesomeIcon icon={faShare}/>\n            </Link>\n        );\n    }\n}\n\nexport default CraftEssenceDescriptor;\n","import {MysticCode, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport FaceIcon from \"../Component/FaceIcon\";\n\ninterface IProps {\n    region: Region;\n    mysticCode: MysticCode.MysticCode;\n}\n\nclass MysticCodeDescriptor extends React.Component<IProps> {\n    render() {\n        return (\n            <Link to={`/${this.props.region}/mystic-code/${this.props.mysticCode.id}`}>\n                <FaceIcon location={this.props.mysticCode.extraAssets.item.male}/>\n                <FaceIcon location={this.props.mysticCode.extraAssets.item.female}/>\n                {' '}\n                [{this.props.mysticCode.name}]\n            </Link>\n        );\n    }\n}\n\nexport default MysticCodeDescriptor;\n","import {Region, Skill} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Col, Row} from \"react-bootstrap\";\nimport FuncDescriptor from \"../../Descriptor/FuncDescriptor\";\nimport {getTargetVersionValues} from \"../../Helper/FuncHelper\";\nimport DataValMainData from \"../Func/DataValMainData\";\nimport FuncMainData from \"../Func/FuncMainData\";\n\ninterface IProps {\n    region: Region;\n    skill: Skill.Skill;\n    level: number;\n}\n\nclass SkillVersion extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                {this.props.skill.functions.map((func, index) => {\n                    const dataVal = getTargetVersionValues(func, this.props.level);\n\n                    return (\n                        <div key={index}>\n                            <h3>Effect #{index + 1}</h3>\n                            <p>\n                                <FuncDescriptor region={this.props.region} func={func} level={this.props.level}/>\n                            </p>\n\n                            <Row>\n                                <Col xs={12} md={6}>\n                                    <h5>Function</h5>\n                                    <FuncMainData region={this.props.region} func={func}/>\n                                </Col>\n                                <Col xs={12} md={6}>\n                                    <h5>Values</h5>\n                                    <DataValMainData dataVal={dataVal ?? {}}/>\n                                </Col>\n                            </Row>\n\n                            <hr/>\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default SkillVersion;\n","import {CraftEssence, Entity, Region, Servant, Skill} from \"@atlasacademy/api-connector\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport Api from \"../Api\";\nimport EffectBreakdown from \"../Breakdown/EffectBreakdown\";\nimport BuffIcon from \"../Component/BuffIcon\";\nimport DataTable from \"../Component/DataTable\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport RawDataViewer from \"../Component/RawDataViewer\";\nimport CraftEssenceDescriptor from \"../Descriptor/CraftEssenceDescriptor\";\nimport MysticCodeDescriptor from \"../Descriptor/MysticCodeDescriptor\";\nimport ServantDescriptor from \"../Descriptor/ServantDescriptor\";\nimport Manager from \"../Setting/Manager\";\nimport SkillVersion from \"./Skill/SkillVersion\";\n\ninterface Event extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n    id: number;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    skill?: Skill.Skill;\n    levels: number;\n    level: number;\n}\n\nclass SkillPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            levels: 1,\n            level: 1\n        };\n    }\n\n    componentDidMount() {\n        Manager.setRegion(this.props.region);\n        this.loadSkill();\n    }\n\n    async loadSkill() {\n        try {\n            const skill = await Api.skill(this.props.id);\n\n            this.setState({\n                loading: false,\n                skill: skill,\n                levels: skill.functions[0].svals?.length ?? 1,\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    private changeLevel(level: number) {\n        this.setState({\n            level: level\n        });\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading || !this.state.skill)\n            return <Loading/>;\n\n        const skill = this.state.skill;\n\n        return (\n            <div>\n                <h1>\n                    {skill.icon ? (\n                        <BuffIcon location={skill.icon} height={48}/>\n                    ) : undefined}\n                    {skill.icon ? ' ' : undefined}\n                    {skill.name}\n                </h1>\n\n                <br/>\n\n                <DataTable data={{\n                    \"Data\": <RawDataViewer data={skill}/>,\n                    \"Raw\": <RawDataViewer\n                        data={`https://api.atlasacademy.io/raw/${this.props.region}/skill/${skill.id}?expand=true`}/>,\n                    \"ID\": skill.id,\n                    \"Name\": skill.name,\n                    \"Detail\": skill.detail,\n                    \"Owner\": (\n                        <div>\n                            {(skill.reverse?.nice?.servant ?? [])\n                                .filter(entity => {\n                                    return entity.type === Entity.EntityType.NORMAL\n                                        || entity.type === Entity.EntityType.HEROINE\n                                        || entity.type === Entity.EntityType.SERVANT_EQUIP;\n                                })\n                                .map((entity, index) => {\n                                    if (entity.type === Entity.EntityType.SERVANT_EQUIP) {\n                                        return (\n                                            <div key={index}>\n                                                <CraftEssenceDescriptor region={this.props.region}\n                                                                        craftEssence={entity as CraftEssence.CraftEssence}/>\n                                            </div>\n                                        );\n                                    } else {\n                                        return (\n                                            <div key={index}>\n                                                <ServantDescriptor region={this.props.region}\n                                                                   servant={entity as Servant.Servant}\n                                                                   iconHeight={24}/>\n                                            </div>\n                                        );\n                                    }\n                                })\n                            }\n                            {/* TODO: Command Code reverse mapping */}\n                            {(skill.reverse?.nice?.MC ?? [])\n                                .map((mysticCode, index) => {\n                                    return (\n                                        <MysticCodeDescriptor key={index}\n                                                              region={this.props.region}\n                                                              mysticCode={mysticCode}/>\n                                    );\n                                })\n                            }\n                        </div>\n                    )\n                }}/>\n\n                <br/>\n                <h3>Breakdown</h3>\n                <EffectBreakdown region={this.props.region}\n                                 cooldowns={skill.coolDown.length > 0 ? skill.coolDown : undefined}\n                                 funcs={skill.functions}\n                                 levels={skill.functions[0]?.svals.length ?? 1}\n                                 scripts={skill.script}/>\n\n                <br/>\n                <br/>\n                <h3>Detailed Effects</h3>\n                <Form inline style={{justifyContent: 'center'}}>\n                    <Form.Control as={'select'} value={this.state.level}\n                                  onChange={(ev: Event) => this.changeLevel(parseInt(ev.target.value))}>\n                        {Array.from(Array(this.state.levels).keys()).map(i => i + 1).map(level => (\n                            <option key={level} value={level}>LEVEL {level}</option>\n                        ))}\n                    </Form.Control>\n                </Form>\n\n                <br/>\n                <SkillVersion region={this.props.region}\n                              skill={skill}\n                              level={this.state.level}/>\n            </div>\n        );\n    }\n}\n\nexport default SkillPage;\n"],"sourceRoot":""}