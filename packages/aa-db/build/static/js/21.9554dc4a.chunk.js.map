{"version":3,"sources":["Component/SearchableSelect.tsx","Page/BuffsPage.tsx"],"names":["SearchableSelect","props","state","ref","React","createRef","selected","focused","results","this","setState","undefined","current","clear","value","description","labels","get","disableLabelStyling","label","getDescription","hideAll","getOption","concat","options","map","length","onChange","id","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","onFocus","hideReset","className","onClick","e","preventDefault","clearSelection","onMouseDown","icon","faTimes","Component","stateCache","Map","buffDescriptions","Object","values","BuffType","forEach","type","x","upDownBuffs","up","down","typeDescriptions","set","BuffsPage","region","searching","buffs","name","alert","Connection","searchBuffs","error","onSubmit","ev","search","Group","Label","Control","target","variant","faSearch","responsive","buff","index","key","reverseFunctions"],"mappings":"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","file":"static/js/21.9554dc4a.chunk.js","sourcesContent":["import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n    hideAll?: boolean,\n    hideReset?: boolean,\n    disableLabelStyling?: boolean,\n    maxResults?: number,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    focused: boolean,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            focused: false,\n            results: false,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getDescription(value?: T): string {\n        if (value === undefined)\n            return 'All';\n\n        const description = this.props.labels.get(value);\n\n        if (this.props.disableLabelStyling) {\n            if (description)\n                return description;\n\n            return typeof value === 'string' ? value : 'Unknown';\n        }\n\n        return description\n            ? `${description} - ${value}`\n            : `(${value})`;\n    }\n\n    private getOption(value?: T): Option<T> {\n        const label = this.getDescription(value);\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return (this.props.hideAll ? [] : [this.getOption()])\n            .concat(\n                this.props.options.map(value => this.getOption(value))\n            );\n    }\n\n    private resetInput() {\n        this.setState({focused: false, results: false});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={this.getDescription(this.state.selected)}\n                       selected={this.state.focused && this.state.results ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={this.props.maxResults ?? 1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}\n                       onFocus={() => {\n                           this.setState({focused: true});\n                       }}>\n\n                {this.props.hideReset ? null : (\n                    <button className='searchable-select-clear'\n                            onClick={e => {\n                                e.preventDefault();\n                                this.clearSelection();\n                            }}\n                            onMouseDown={e => {\n                                // Prevent input from losing focus.\n                                e.preventDefault();\n                            }}>\n                        <FontAwesomeIcon icon={faTimes}/>\n                    </button>\n                )}\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","import {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport Connection from \"../Api/Connection\";\nimport Buff, {BuffType} from \"../Api/Data/Buff\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport SearchableSelect from \"../Component/SearchableSelect\";\nimport BuffDescriptor, {typeDescriptions, upDownBuffs} from \"../Descriptor/BuffDescriptor\";\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    searching: boolean;\n    buffs: Buff[];\n    name?: string;\n    type?: BuffType;\n}\n\nconst buffDescriptions = new Map<BuffType, string>();\nObject.values(BuffType).forEach(type => {\n    let description;\n\n    for (let x in upDownBuffs) {\n        if (upDownBuffs[x].up === type)\n            description = upDownBuffs[x].description + ' Up';\n\n        if (upDownBuffs[x].down === type)\n            description = upDownBuffs[x].description + ' Down';\n    }\n\n    if (description === undefined) {\n        description = typeDescriptions.get(type);\n    }\n\n    if (description !== undefined) {\n        buffDescriptions.set(type, description);\n    }\n})\n\nclass BuffsPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = stateCache.get(props.region) ?? {\n            searching: false,\n            buffs: []\n        };\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.name && !this.state.type) {\n            this.setState({buffs: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, buffs: []});\n\n            const buffs = await Connection.searchBuffs(\n                this.props.region,\n                this.state.name,\n                this.state.type\n            );\n\n            this.setState({searching: false, buffs});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control value={this.state.name ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({name: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <SearchableSelect<BuffType> id='select-BuffType'\n                                                    options={Object.values(BuffType)}\n                                                    labels={buffDescriptions}\n                                                    onChange={(value?: BuffType) => {\n                                                        this.setState({type: value});\n                                                    }}/>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Buff</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.buffs.map((buff, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{buff.id}</td>\n                                <td>\n                                    <BuffDescriptor region={this.props.region} buff={buff}/>\n                                </td>\n                                <td>\n                                    {buff.reverseFunctions.length}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default BuffsPage;\n"],"sourceRoot":""}