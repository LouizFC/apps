{"version":3,"sources":["Component/BuffIcon.tsx","Descriptor/TraitDescription.tsx","Descriptor/SkillDescriptor.tsx","Descriptor/SkillReferenceDescriptor.tsx","Descriptor/CardDescription.tsx","Descriptor/Description.tsx","Component/SearchableSelect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","Descriptor/BuffDescription.tsx","Page/BuffsPage.tsx"],"names":["BuffIcon","alt","src","this","props","location","style","height","verticalAlign","React","Component","TraitDescription","state","id","trait","undefined","Api","traitList","i","length","setState","descriptor","TraitDescriptor","describe","overrideTraits","region","disableLink","getDescription","to","getLocation","Description","renderAsString","SkillDescriptor","skill","icon","iconHeight","name","SkillReferenceDescriptor","route","CardDescription","CardDescriptor","card","partial","key","referenceType","ReferenceType","CARD","value","SKILL","TRAIT","toString","partials","fragments","type","PartialType","PARTICLE","push","renderParticle","REFERENCE","renderReference","TEXT","renderText","VALUE","renderValue","Fragment","valueType","ValueType","PERCENT","renderReferenceAsString","join","SearchableSelect","ref","createRef","selected","focused","results","current","clear","description","labels","get","disableLabelStyling","label","hideAll","getOption","concat","options","map","onChange","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","onFocus","hideReset","className","onClick","e","preventDefault","clearSelection","onMouseDown","faTimes","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","BuffDescription","buff","BuffDescriptor","stateCache","Map","buffDescriptions","values","Buff","BuffType","describeType","BuffsPage","searching","buffs","Manager","setRegion","set","document","title","alert","searchBuffs","error","onSubmit","ev","search","Group","Label","Control","variant","faSearch","responsive","index","reverse","nice","function"],"mappings":"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","file":"static/js/14.61e9a4b2.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface IProp {\n    location: string;\n    height?: number;\n}\n\nclass BuffIcon extends React.Component<IProp> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location} style={{\n                height: this.props.height ?? 25,\n                verticalAlign: \"bottom\",\n            }}/>\n        );\n    }\n\n}\n\nexport default BuffIcon;\n","import {Region, Trait} from \"@atlasacademy/api-connector\";\nimport {TraitDescriptor} from \"@atlasacademy/api-descriptor\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport Description from \"./Description\";\n\ninterface IProps {\n    region: Region;\n    trait: Trait.Trait | number;\n    disableLink?: boolean;\n    overrideTraits?: Trait.Trait[];\n}\n\ninterface IState {\n    id: number;\n    trait?: Trait.Trait;\n}\n\nclass TraitDescription extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            id: typeof props.trait === \"number\" ? props.trait : props.trait.id,\n            trait: typeof props.trait === \"number\" ? undefined : props.trait,\n        };\n    }\n\n    static renderAsString(trait: Trait.Trait | number): string {\n        const descriptor = TraitDescriptor.describe(trait);\n\n        return Description.renderAsString(descriptor);\n    }\n\n    async componentDidMount() {\n        if (this.state.trait)\n            return;\n\n        const traitList = await Api.traitList();\n\n        for (let i = 0; i < traitList.length; i++) {\n            const trait = traitList[i];\n\n            if (trait.id === this.state.id) {\n                this.setState({trait});\n\n                return;\n            }\n        }\n    }\n\n    private getDescription(trait: Trait.Trait | number) {\n        const descriptor = TraitDescriptor.describe(trait, this.props.overrideTraits);\n\n        return <Description region={this.props.region} descriptor={descriptor}/>;\n    }\n\n    private getLocation(): string {\n        return `/${this.props.region}/entities/trait/${this.state.id}`;\n    }\n\n    render() {\n        const trait = this.state.trait ?? this.state.id;\n\n        return (\n            this.props.disableLink\n                ? <span>[{this.getDescription(trait)}]</span>\n                : <Link to={this.getLocation()}>[{this.getDescription(trait)}]</Link>\n        );\n    }\n}\n\nexport default TraitDescription;\n","import {Region, Skill} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport BuffIcon from \"../Component/BuffIcon\";\n\ninterface IProps {\n    region: Region;\n    skill: Skill.Skill;\n    iconHeight?: number;\n}\n\nclass SkillDescriptor extends React.Component<IProps> {\n    static renderAsString(skill: Skill.Skill): string {\n        const name = skill.name ? skill.name : `Skill: ${skill.id}`;\n\n        return `[${name}]`;\n    }\n\n    render() {\n        return (\n            <Link to={`/${this.props.region}/skill/${this.props.skill.id}`}>\n                {this.props.skill.icon ? (\n                    <BuffIcon location={this.props.skill.icon} height={this.props.iconHeight}/>\n                ) : undefined}\n                {this.props.skill.icon ? ' ' : undefined}\n                [{this.props.skill.name ? this.props.skill.name : `Skill: ${this.props.skill.id}`}]\n            </Link>\n        );\n    }\n}\n\nexport default SkillDescriptor;\n","import {Region, Skill} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport SkillDescriptor from \"./SkillDescriptor\";\n\ninterface IProps {\n    region: Region;\n    id: number;\n}\n\ninterface IState {\n    skill?: Skill.Skill;\n}\n\nclass SkillReferenceDescriptor extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    async componentDidMount() {\n        try {\n            this.setState({\n                skill: await Api.skill(this.props.id)\n            });\n        } catch (e) {\n            // do nothing\n        }\n    }\n\n    static renderAsString(id: number): string {\n        return `[Skill: ${id}]`;\n    }\n\n    render() {\n        const route = `/${this.props.region}/skill/${this.props.id}`;\n\n        if (this.state.skill === undefined) {\n            return <Link to={route}>[Skill: {this.props.id}]</Link>;\n        }\n\n        return (\n            <SkillDescriptor region={this.props.region} skill={this.state.skill}/>\n        );\n    }\n}\n\nexport default SkillReferenceDescriptor;\n","import {Card, Region} from \"@atlasacademy/api-connector\";\nimport {CardDescriptor} from \"@atlasacademy/api-descriptor\";\nimport React from \"react\";\nimport Description from \"./Description\";\n\ninterface IProps {\n    region: Region;\n    card: Card | number;\n}\n\nclass CardDescription extends React.Component<IProps> {\n    static renderAsString(card: Card | number): string {\n        const descriptor = CardDescriptor.describe(card);\n\n        return \"[\" + Description.renderAsString(descriptor) + \"]\";\n    }\n\n    render() {\n        const descriptor = CardDescriptor.describe(this.props.card);\n\n        return <span>\n            [\n            <Description region={this.props.region} descriptor={descriptor}/>\n            ]\n        </span>;\n    }\n}\n\nexport default CardDescription;\n","import Region from \"@atlasacademy/api-connector/dist/Enum/Region\";\nimport {\n    Descriptor,\n    PartialType,\n    ParticlePartial,\n    ReferencePartial,\n    ReferenceType,\n    TextPartial,\n    ValuePartial,\n    ValueType\n} from \"@atlasacademy/api-descriptor\";\nimport React from \"react\";\nimport CardDescription from \"./CardDescription\";\nimport SkillDescriptor from \"./SkillDescriptor\";\nimport SkillReferenceDescriptor from \"./SkillReferenceDescriptor\";\nimport TraitDescription from \"./TraitDescription\";\n\ninterface IProps {\n    region: Region,\n    descriptor: Descriptor,\n}\n\nclass Description extends React.Component<IProps> {\n    private static renderParticle(partial: ParticlePartial): string {\n        return partial.value;\n    }\n\n    private static renderReferenceAsString(partial: ReferencePartial): string {\n        if (partial.referenceType === ReferenceType.CARD) {\n            return CardDescription.renderAsString(partial.value);\n        } else if (partial.referenceType === ReferenceType.SKILL) {\n            if (typeof partial.value === \"number\") {\n                return SkillReferenceDescriptor.renderAsString(partial.value);\n            } else {\n                return SkillDescriptor.renderAsString(partial.value);\n            }\n        } else if (partial.referenceType === ReferenceType.TRAIT) {\n            return TraitDescription.renderAsString(partial.value);\n        }\n\n        return partial.value.toString();\n    }\n\n    private static renderText(partial: TextPartial): string {\n        return partial.value;\n    }\n\n    private static renderValue(partial: ValuePartial): string {\n        if (partial.valueType === ValueType.PERCENT) {\n            return partial.value.toString() + '%';\n        }\n\n        return partial.value.toString();\n    }\n\n    static renderAsString(descriptor: Descriptor): string {\n        const partials = descriptor.partials(),\n            fragments: string[] = [];\n\n        for (let i = 0; i < partials.length; i++) {\n            const partial = partials[i];\n\n            if (partial.type === PartialType.PARTICLE) {\n                fragments.push(Description.renderParticle(partial));\n            } else if (partial.type === PartialType.REFERENCE) {\n                fragments.push(Description.renderReferenceAsString(partial as ReferencePartial));\n            } else if (partial.type === PartialType.TEXT) {\n                fragments.push(Description.renderText(partial));\n            } else if (partial.type === PartialType.VALUE) {\n                fragments.push(Description.renderValue(partial as ValuePartial));\n            } else {\n                fragments.push(partial.value.toString());\n            }\n        }\n\n        return fragments.join('');\n    }\n\n    private renderReference(partial: ReferencePartial, key: number) {\n        if (partial.referenceType === ReferenceType.CARD) {\n            return <CardDescription key={key} region={this.props.region} card={partial.value}/>;\n        } else if (partial.referenceType === ReferenceType.SKILL) {\n            if (typeof partial.value === \"number\") {\n                return <SkillReferenceDescriptor key={key} region={this.props.region} id={partial.value}/>;\n            } else {\n                return <SkillDescriptor key={key} region={this.props.region} skill={partial.value}/>;\n            }\n        } else if (partial.referenceType === ReferenceType.TRAIT) {\n            return <TraitDescription key={key} region={this.props.region} trait={partial.value}/>\n        }\n\n        return partial.value.toString();\n    }\n\n    render() {\n        const partials = this.props.descriptor.partials(),\n            fragments = [];\n\n        for (let i = 0; i < partials.length; i++) {\n            const partial = partials[i];\n\n            if (partial.type === PartialType.PARTICLE) {\n                fragments.push(Description.renderParticle(partial));\n            } else if (partial.type === PartialType.REFERENCE) {\n                fragments.push(this.renderReference(partial as ReferencePartial, i));\n            } else if (partial.type === PartialType.TEXT) {\n                fragments.push(Description.renderText(partial));\n            } else if (partial.type === PartialType.VALUE) {\n                fragments.push(Description.renderValue(partial as ValuePartial));\n            } else {\n                fragments.push(partial.value.toString());\n            }\n        }\n\n        return <React.Fragment>{fragments}</React.Fragment>;\n    }\n\n}\n\nexport default Description;\n","import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n    hideAll?: boolean,\n    hideReset?: boolean,\n    disableLabelStyling?: boolean,\n    maxResults?: number,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    focused: boolean,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            focused: false,\n            results: false,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getDescription(value?: T): string {\n        if (value === undefined)\n            return 'All';\n\n        const description = this.props.labels.get(value);\n\n        if (this.props.disableLabelStyling) {\n            if (description)\n                return description;\n\n            return typeof value === 'string' ? value : 'Unknown';\n        }\n\n        return description\n            ? `${description} - ${value}`\n            : `(${value})`;\n    }\n\n    private getOption(value?: T): Option<T> {\n        const label = this.getDescription(value);\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return (this.props.hideAll ? [] : [this.getOption()])\n            .concat(\n                this.props.options.map(value => this.getOption(value))\n            );\n    }\n\n    private resetInput() {\n        this.setState({focused: false, results: false});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={this.getDescription(this.state.selected)}\n                       selected={this.state.focused && this.state.results ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={this.props.maxResults ?? 1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}\n                       onFocus={() => {\n                           this.setState({focused: true});\n                       }}>\n\n                {this.props.hideReset ? null : (\n                    <button className='searchable-select-clear'\n                            onClick={e => {\n                                e.preventDefault();\n                                this.clearSelection();\n                            }}\n                            onMouseDown={e => {\n                                // Prevent input from losing focus.\n                                e.preventDefault();\n                            }}>\n                        <FontAwesomeIcon icon={faTimes}/>\n                    </button>\n                )}\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import {Buff, Region} from \"@atlasacademy/api-connector\";\nimport {BuffDescriptor} from \"@atlasacademy/api-descriptor\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport BuffIcon from \"../Component/BuffIcon\";\nimport Description from \"./Description\";\n\ninterface IProps {\n    region: Region;\n    buff: Buff.Buff;\n}\n\nclass BuffDescription extends React.Component<IProps> {\n    static renderAsString(buff: Buff.Buff): string {\n        const descriptor = BuffDescriptor.describe(buff);\n\n        return \"[\" + Description.renderAsString(descriptor) + \"]\";\n    }\n\n    render() {\n        const buff = this.props.buff,\n            descriptor = BuffDescriptor.describe(this.props.buff);\n\n        return (\n            <Link to={`/${this.props.region}/buff/${buff.id}`}>\n                [\n                {buff.icon ? <BuffIcon location={buff.icon}/> : undefined}\n                {buff.icon ? ' ' : undefined}\n                {Description.renderAsString(descriptor)}\n                ]\n            </Link>\n        );\n    }\n}\n\nexport default BuffDescription;\n","import {Buff, Region} from \"@atlasacademy/api-connector\";\nimport {BuffDescriptor} from \"@atlasacademy/api-descriptor\";\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport Api from \"../Api\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport SearchableSelect from \"../Component/SearchableSelect\";\nimport BuffDescription from \"../Descriptor/BuffDescription\";\nimport Manager from \"../Setting/Manager\";\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    searching: boolean;\n    buffs: Buff.Buff[];\n    name?: string;\n    type?: Buff.BuffType;\n}\n\nconst buffDescriptions = new Map<Buff.BuffType, string>(\n    Object.values(Buff.BuffType).map(type => {\n        return [type, BuffDescriptor.describeType(type)];\n    })\n);\n\nclass BuffsPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = stateCache.get(props.region) ?? {\n            searching: false,\n            buffs: []\n        };\n\n        Manager.setRegion(this.props.region);\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    componentDidMount() {\n        document.title = `[${this.props.region}] Buffs - Atlas Academy DB`\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.name && !this.state.type) {\n            this.setState({buffs: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, buffs: []});\n\n            const buffs = await Api.searchBuffs(\n                this.state.name,\n                this.state.type\n            );\n\n            this.setState({searching: false, buffs});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <h1>Buffs Search</h1>\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control value={this.state.name ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({name: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <SearchableSelect<Buff.BuffType> id='select-BuffType'\n                                                         options={Object.values(Buff.BuffType)}\n                                                         labels={buffDescriptions}\n                                                         selected={this.state.type}\n                                                         onChange={(value?: Buff.BuffType) => {\n                                                             this.setState({type: value});\n                                                         }}/>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Buff</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.buffs.map((buff, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{buff.id}</td>\n                                <td>\n                                    <BuffDescription region={this.props.region} buff={buff}/>\n                                </td>\n                                <td>\n                                    {(buff.reverse?.nice?.function ?? []).length}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default BuffsPage;\n"],"sourceRoot":""}