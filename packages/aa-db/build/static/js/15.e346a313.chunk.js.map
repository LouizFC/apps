{"version":3,"sources":["Descriptor/RarityDescriptor.tsx","Component/FaceIcon.tsx","Page/CraftEssencesPage.tsx","Api/ResultCache.tsx","Api/Connection.tsx"],"names":["assetMap","Map","RarityDescriptor","has","this","props","rarity","alt","src","get","style","height","React","Component","FaceIcon","location","undefined","CraftEssencesPage","state","loading","craftEssences","activeRarityFilters","Connection","craftEssenceList","region","then","list","setState","e","error","slice","reverse","length","filter","entity","indexOf","search","words","split","word","map","toLowerCase","every","name","includes","id","inline","justifyContent","Control","marginLeft","placeholder","value","onChange","ev","target","striped","bordered","hover","textAlign","width","craftEssence","index","route","collectionNo","key","align","to","type","face","ResultCache","cache","pending","pendingCatches","fetcher","duration","Promise","resolve","callbacks","reject","push","set","call","forEach","callback","delete","window","setTimeout","catch","host","fetch","endpoint","a","axios","response","data","buff","func","mysticCode","mysticCodeList","noblePhantasm","quest","servant","servantList","skill","traitMap","language","Manager","query","LanguageOption","ENGLISH","Region","NA","getCacheableCraftEssenceList","JP","DEFAULT","jp","na","names","getCacheableMysticCodeList","phase","getCacheableServantList","encodeURI","text","team"],"mappings":"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","file":"static/js/15.e346a313.chunk.js","sourcesContent":["import React from \"react\";\n\nconst assetMap = new Map<number, string>([\n    [1, './assets/star1.png'],\n    [2, './assets/star2.png'],\n    [3, './assets/star3.png'],\n    [4, './assets/star4.png'],\n    [5, './assets/star5.png'],\n]);\n\ninterface IProps {\n    rarity: number;\n    height?: number;\n}\n\nclass RarityDescriptor extends React.Component<IProps> {\n    render() {\n        return (\n            <span>\n                {assetMap.has(this.props.rarity) ? (\n                    <img alt={`${this.props.rarity} star(s)`}\n                         src={assetMap.get(this.props.rarity)}\n                         style={{height: this.props.height ?? 18}}/>\n                ) : null}\n            </span>\n        );\n    }\n}\n\nexport default RarityDescriptor;\n","import React from \"react\";\nimport EntityType from \"../Api/Data/EntityType\";\n\ninterface IProps {\n    type?: EntityType;\n    rarity?: number;\n    location: string;\n    height?: number;\n}\n\nclass FaceIcon extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n}\n\nexport default FaceIcon;\n","import {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Form, Table} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport BasicListEntity from \"../Api/Data/BasicListEntity\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport FaceIcon from \"../Component/FaceIcon\";\nimport Loading from \"../Component/Loading\";\nimport RarityDescriptor from \"../Descriptor/RarityDescriptor\";\n\nimport \"./CraftEssencesPage.css\";\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface MouseEvent extends React.MouseEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    craftEssences: BasicListEntity[];\n    activeRarityFilters: number[];\n    search?: string;\n}\n\nclass CraftEssencesPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            craftEssences: [],\n            activeRarityFilters: [],\n        };\n    }\n\n    componentDidMount() {\n        try {\n            Connection.craftEssenceList(this.props.region).then(list => {\n                this.setState({\n                    loading: false,\n                    craftEssences: list\n                });\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    private craftEssences(): BasicListEntity[] {\n        let list = this.state.craftEssences.slice().reverse();\n\n        if (this.state.activeRarityFilters.length > 0) {\n            list = list.filter(entity => {\n                return this.state.activeRarityFilters.indexOf(entity.rarity) !== -1;\n            });\n        }\n\n        if (this.state.search) {\n            const words = this.state.search\n                .split(' ')\n                .filter(word => word)\n                .map(word => word.toLowerCase());\n\n            list = list.filter(entity => words.every(word => entity.name.toLowerCase().includes(word)));\n        }\n\n        return list;\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div id={'craft-essences'}>\n                <Form inline style={{justifyContent: 'center'}}>\n                    <Form.Control style={{marginLeft: 'auto'}} placeholder={'Search'} value={this.state.search ?? ''}\n                                  onChange={(ev: ChangeEvent) => {\n                                      this.setState({search: ev.target.value});\n                                  }}/>\n                </Form>\n\n                <hr/>\n\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Thumbnail</th>\n                        <th>Name</th>\n                        <th>Rarity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.craftEssences()\n                        .map((craftEssence, index) => {\n                            const route = `/${this.props.region}/craft-essence/${craftEssence.collectionNo}`;\n\n                            return <tr key={index}>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        {craftEssence.collectionNo}\n                                    </Link>\n                                </td>\n                                <td align={\"center\"}>\n                                    <Link to={route}>\n                                        <FaceIcon type={craftEssence.type}\n                                                  rarity={craftEssence.rarity}\n                                                  location={craftEssence.face}\n                                                  height={50}/>\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to={route}>\n                                        {craftEssence.name}\n                                    </Link>\n                                </td>\n                                <td>\n                                    <RarityDescriptor rarity={craftEssence.rarity}/>\n                                </td>\n                            </tr>\n                        })\n                    }\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssencesPage;\n","class ResultCache<K, V> {\n    private cache = new Map<K, V>();\n    private pending = new Map<K, Function[]>();\n    private pendingCatches = new Map<K, Function[]>();\n\n    get(key: K, fetcher: Function, duration: number | null): Promise<V> {\n        const value = this.cache.get(key);\n        if (value !== undefined) {\n            return new Promise<V>(resolve => {\n                resolve(value);\n            });\n        }\n\n        const callbacks = this.pending.get(key);\n        if (callbacks !== undefined) {\n            return new Promise<V>((resolve, reject) => {\n                callbacks.push(resolve);\n\n                const catches = this.pendingCatches.get(key) ?? [];\n                catches.push(reject);\n            });\n        }\n\n        this.pending.set(key, []);\n        this.pendingCatches.set(key, []);\n        return new Promise<V>((resolve, reject) => {\n            fetcher\n                .call(null)\n                .then((value: V) => {\n                    const callbacks = this.pending.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, value);\n                    });\n\n                    this.cache.set(key, value);\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    if (duration !== null) {\n                        window.setTimeout(() => {\n                            this.cache.delete(key);\n                        }, duration);\n                    }\n\n                    resolve(value);\n                })\n                .catch((error: any) => {\n                    const callbacks = this.pendingCatches.get(key) ?? [];\n\n                    callbacks.forEach(callback => {\n                        callback.call(null, error);\n                    });\n\n                    this.pending.delete(key);\n                    this.pendingCatches.delete(key);\n\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport default ResultCache;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption} from \"../Setting/Option\";\nimport BasicListEntity from \"./Data/BasicListEntity\";\nimport Buff, {BuffType} from \"./Data/Buff\";\nimport CraftEssence from \"./Data/CraftEssence\";\nimport Func, {FuncTargetTeam, FuncTargetType, FuncType} from \"./Data/Func\";\nimport MysticCode from \"./Data/MysticCode\";\nimport NoblePhantasm from \"./Data/NoblePhantasm\";\nimport Quest from \"./Data/Quest\";\nimport Region from \"./Data/Region\";\nimport Servant from \"./Data/Servant\";\nimport Skill from \"./Data/Skill\";\nimport TraitMap from \"./Data/TraitMap\";\nimport ResultCache from \"./ResultCache\";\n\nconst host = 'https://api.atlasacademy.io',\n    cacheDuration = 20 * 1000,\n    fetch = async function <T>(endpoint: string): Promise<T> {\n        const response = await axios.get<T>(endpoint);\n\n        return response.data;\n    },\n    cache = {\n        buff: new ResultCache<string, Buff>(),\n        craftEssence: new ResultCache<string, CraftEssence>(),\n        craftEssenceList: new ResultCache<Region, BasicListEntity[]>(),\n        func: new ResultCache<string, Func>(),\n        mysticCode: new ResultCache<string, MysticCode>(),\n        mysticCodeList: new ResultCache<Region, MysticCode[]>(),\n        noblePhantasm: new ResultCache<string, NoblePhantasm>(),\n        quest: new ResultCache<string, Quest>(),\n        servant: new ResultCache<string, Servant>(),\n        servantList: new ResultCache<Region, BasicListEntity[]>(),\n        skill: new ResultCache<string, Skill>(),\n        traitMap: new ResultCache<Region, TraitMap>(),\n    };\n\nclass Connection {\n    static buff(region: Region, id: number): Promise<Buff> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.buff.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Buff>(`${host}/nice/${region}/buff/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static craftEssence(region: Region, id: number): Promise<CraftEssence> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.craftEssence.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/equip/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async craftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableCraftEssenceList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableCraftEssenceList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableCraftEssenceList(Region.JP),\n            na = await Connection.getCacheableCraftEssenceList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static func(region: Region, id: number): Promise<Func> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.func.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Func>(`${host}/nice/${region}/function/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static mysticCode(region: Region, id: number): Promise<MysticCode> {\n        const key = `${region}-${id}`;\n\n        return cache.mysticCode.get(\n            key,\n            () => {\n                return fetch<MysticCode>(`${host}/nice/${region}/MC/${id}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async mysticCodeList(region: Region): Promise<MysticCode[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableMysticCodeList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableMysticCodeList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableMysticCodeList(Region.JP),\n            na = await Connection.getCacheableMysticCodeList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<MysticCode>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static noblePhantasm(region: Region, id: number): Promise<NoblePhantasm> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.noblePhantasm.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<NoblePhantasm>(`${host}/nice/${region}/NP/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static quest(region: Region, id: number, phase: number): Promise<Quest> {\n        const key = `${region}-${id}-${phase}`;\n\n        return cache.quest.get(\n            key,\n            () => {\n                return fetch<Quest>(`${host}/nice/${region}/quest/${id}/${phase}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static servant(region: Region, id: number): Promise<Servant> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.servant.get(\n            key,\n            () => {\n                let query = '?lore=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Servant>(`${host}/nice/${region}/servant/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static async servantList(region: Region): Promise<BasicListEntity[]> {\n        if (region === Region.NA) {\n            return Connection.getCacheableServantList(Region.NA);\n        } else if (region === Region.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableServantList(Region.JP);\n        }\n\n        const jp = await Connection.getCacheableServantList(Region.JP),\n            na = await Connection.getCacheableServantList(Region.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<BasicListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    static skill(region: Region, id: number): Promise<Skill> {\n        const language = Manager.language(),\n            key = `${region}-${language}-${id}`;\n\n        return cache.skill.get(\n            key,\n            () => {\n                let query = '?reverse=true' + (\n                    language === LanguageOption.ENGLISH ? '&lang=en' : ''\n                );\n\n                return fetch<Skill>(`${host}/nice/${region}/skill/${id}${query}`);\n            },\n            cacheDuration\n        );\n    }\n\n    static traitMap(region: Region): Promise<TraitMap> {\n        return cache.traitMap.get(\n            region,\n            () => {\n                return fetch<TraitMap>(`${host}/export/${region}/nice_trait.json`);\n            },\n            null\n        );\n    }\n\n    static searchBuffs(region: Region, name?: string, type?: BuffType): Promise<Buff[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (name)\n            query += \"&name=\" + encodeURI(name);\n        if (type)\n            query += \"&type=\" + type;\n\n        return fetch<Buff[]>(`${host}/nice/${region}/buff/search${query}`);\n    }\n\n    static searchFuncs(region: Region,\n                       text?: string,\n                       type?: FuncType,\n                       target?: FuncTargetType,\n                       team?: FuncTargetTeam): Promise<Func[]> {\n        const language = Manager.language();\n\n        let query = \"?reverse=true\";\n\n        if (language === LanguageOption.ENGLISH)\n            query += \"&lang=en\";\n        if (text)\n            query += \"&popupText=\" + encodeURI(text);\n        if (type)\n            query += \"&type=\" + type;\n        if (target)\n            query += \"&targetType=\" + target;\n        if (team)\n            query += \"&targetTeam=\" + team;\n\n        return fetch<Func[]>(`${host}/nice/${region}/function/search${query}`);\n    }\n\n    private static async getCacheableCraftEssenceList(region: Region): Promise<BasicListEntity[]> {\n        return cache.craftEssenceList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_equip.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableMysticCodeList(region: Region): Promise<MysticCode[]> {\n        return cache.mysticCodeList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/nice_mystic_code.json`);\n            },\n            null\n        );\n    }\n\n    private static async getCacheableServantList(region: Region): Promise<BasicListEntity[]> {\n        return cache.servantList.get(\n            region,\n            () => {\n                return fetch<BasicListEntity[]>(`${host}/export/${region}/basic_servant.json`);\n            },\n            null\n        );\n    }\n}\n\nexport default Connection;\n"],"sourceRoot":""}