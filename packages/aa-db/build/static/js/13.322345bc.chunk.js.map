{"version":3,"sources":["Descriptor/RarityDescriptor.tsx","Component/SearchableSelect.tsx","Breakdown/SkillBreakdown.tsx","Descriptor/ProfileConditionDescriptor.tsx","Page/Servant/ServantProfileComments.tsx","Page/CraftEssence/CraftEssenceMainData.tsx","Page/CraftEssence/CraftEssencePicker.tsx","Page/CraftEssence/CraftEssencePortrait.tsx","Page/CraftEssence/CraftEssenceProfileComments.tsx","Page/CraftEssence/CraftEssenceStatGrowth.tsx","Page/CraftEssencePage.tsx"],"names":["assetMap","Map","RarityDescriptor","has","this","props","rarity","alt","src","get","style","height","React","Component","SearchableSelect","state","ref","createRef","selected","focused","results","setState","undefined","current","clear","value","description","labels","disableLabelStyling","label","getDescription","hideAll","getOption","concat","options","map","length","onChange","id","getOptions","placeholder","ignoreDiacritics","maxResults","onBlur","resetInput","selectOption","onFocus","hideReset","className","onClick","e","preventDefault","clearSelection","onMouseDown","icon","faTimes","SkillBreakdown","skill","region","iconHeight","condQuestId","condQuestPhase","variant","questId","questPhase","handleNewLine","detail","cooldowns","coolDown","funcs","functions","levels","scripts","script","ProfileConditionDescriptor","comment","condition","condMessage","condType","ProfileCommentConditionType","NONE","QUEST_CLEAR","condValues","Fragment","QuestDescriptor","condValue2","SVT_FRIENDSHIP","ServantProfileComments","Table","comments","index","key","CraftEssenceMainData","craftEssence","name","DataTable","data","RawDataViewer","collectionNo","cost","lvMax","hpBase","atkBase","hpMax","atkMax","CraftEssencePicker","history","push","craftEssences","slice","reverse","craftEssenceLabels","toString","padStart","Form","Group","Label","changeCraftEssence","withRouter","CraftEssencePortrait","extraAssets","charaGraph","equip","Object","values","shift","asset","CraftEssenceProfileComments","CraftEssenceStatGrowth","responsive","Array","_","i","formatNumber","hpGrowth","atkGrowth","CraftEssencePage","loading","Manager","setRegion","loadCraftEssence","Promise","all","Api","craftEssenceList","traitList","error","ErrorStatus","Loading","Row","Col","xs","span","order","lg","Tabs","defaultActiveKey","tab","transition","onSelect","replace","Tab","eventKey","title","skills","profile"],"mappings":"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","file":"static/js/13.322345bc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst assetMap = new Map<number, string>([\n    [1, './assets/star1.png'],\n    [2, './assets/star2.png'],\n    [3, './assets/star3.png'],\n    [4, './assets/star4.png'],\n    [5, './assets/star5.png'],\n]);\n\ninterface IProps {\n    rarity: number;\n    height?: number;\n}\n\nclass RarityDescriptor extends React.Component<IProps> {\n    render() {\n        return (\n            <span>\n                {assetMap.has(this.props.rarity) ? (\n                    <img alt={`${this.props.rarity} star(s)`}\n                         src={assetMap.get(this.props.rarity)}\n                         style={{height: this.props.height ?? 18}}/>\n                ) : null}\n            </span>\n        );\n    }\n}\n\nexport default RarityDescriptor;\n","import {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport React, {RefObject} from \"react\";\nimport {Typeahead} from \"react-bootstrap-typeahead\";\n\nimport \"./SearchableSelect.css\";\n\ninterface Option<T> {\n    label: string,\n    value?: T,\n}\n\ninterface IProps<T> {\n    id: string,\n    options: T[],\n    labels: Map<T, string>,\n    onChange: Function,\n    selected?: T,\n    hideAll?: boolean,\n    hideReset?: boolean,\n    disableLabelStyling?: boolean,\n    maxResults?: number,\n}\n\ninterface IState<T> {\n    ref: RefObject<any>,\n    selected?: T,\n    focused: boolean,\n    results: boolean,\n}\n\nclass SearchableSelect<T> extends React.Component<IProps<T>, IState<T>> {\n    constructor(props: IProps<T>) {\n        super(props);\n\n        this.state = {\n            ref: React.createRef(),\n            selected: props.selected,\n            focused: false,\n            results: false,\n        };\n    }\n\n    private async clearSelection() {\n        await this.setState({selected: undefined, results: true});\n        this.state.ref.current.clear();\n    }\n\n    private getDescription(value?: T): string {\n        if (value === undefined)\n            return 'All';\n\n        const description = this.props.labels.get(value);\n\n        if (this.props.disableLabelStyling) {\n            if (description)\n                return description;\n\n            return typeof value === 'string' ? value : 'Unknown';\n        }\n\n        return description\n            ? `${description} - ${value}`\n            : `(${value})`;\n    }\n\n    private getOption(value?: T): Option<T> {\n        const label = this.getDescription(value);\n\n        return {label, value};\n    }\n\n    private getOptions(): Option<T>[] {\n        return (this.props.hideAll ? [] : [this.getOption()])\n            .concat(\n                this.props.options.map(value => this.getOption(value))\n            );\n    }\n\n    private resetInput() {\n        this.setState({focused: false, results: false});\n    }\n\n    private async selectOption(options: Option<T>[]) {\n        if (options.length === 0) {\n            this.setState({results: false});\n        } else {\n            const selected = options[0].value;\n\n            await this.setState({selected, results: true});\n            this.props.onChange(selected);\n        }\n    }\n\n    render() {\n        return (\n            <Typeahead ref={this.state.ref}\n                       id={this.props.id}\n                       options={this.getOptions()}\n                       placeholder={this.getDescription(this.state.selected)}\n                       selected={this.state.focused && this.state.results ? [this.getOption(this.state.selected)] : []}\n                       ignoreDiacritics={true}\n                       maxResults={this.props.maxResults ?? 1000}\n                       onBlur={() => {\n                           this.resetInput();\n                       }}\n                       onChange={(selected) => {\n                           this.selectOption(selected);\n                       }}\n                       onFocus={() => {\n                           this.setState({focused: true});\n                       }}>\n\n                {this.props.hideReset ? null : (\n                    <button className='searchable-select-clear'\n                            onClick={e => {\n                                e.preventDefault();\n                                this.clearSelection();\n                            }}\n                            onMouseDown={e => {\n                                // Prevent input from losing focus.\n                                e.preventDefault();\n                            }}>\n                        <FontAwesomeIcon icon={faTimes}/>\n                    </button>\n                )}\n            </Typeahead>\n        );\n    }\n}\n\nexport default SearchableSelect;\n","import {Region, Skill} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Alert} from \"react-bootstrap\";\nimport QuestDescriptor from \"../Descriptor/QuestDescriptor\";\nimport SkillDescriptor from \"../Descriptor/SkillDescriptor\";\nimport {handleNewLine} from \"../Helper/OutputHelper\";\nimport EffectBreakdown from \"./EffectBreakdown\";\n\ninterface IProps {\n    region: Region;\n    skill: Skill;\n    cooldowns: boolean;\n    levels?: number;\n}\n\nclass SkillBreakdown extends React.Component<IProps> {\n    render() {\n        const skill = this.props.skill;\n        return (\n            <div>\n                <h3>\n                    <SkillDescriptor region={this.props.region} skill={skill} iconHeight={33}/>\n                </h3>\n\n                {skill.condQuestId && skill.condQuestPhase ? (\n                    <Alert variant={'primary'}>\n                        Available after <QuestDescriptor region={this.props.region}\n                                                         questId={skill.condQuestId}\n                                                         questPhase={skill.condQuestPhase}/>\n                    </Alert>\n                ) : null}\n\n                <p>{handleNewLine(skill.detail)}</p>\n\n                <EffectBreakdown region={this.props.region}\n                                 cooldowns={this.props.cooldowns ? skill.coolDown : undefined}\n                                 funcs={this.props.skill.functions}\n                                 levels={this.props.levels}\n                                 scripts={this.props.skill.script}/>\n            </div>\n        );\n    }\n}\n\nexport default SkillBreakdown;\n","import {ProfileCommentConditionType, Region} from \"@atlasacademy/api-connector\";\nimport {ProfileComment} from \"@atlasacademy/api-connector/dist/Schema/Profile\";\nimport React from \"react\";\nimport QuestDescriptor from \"./QuestDescriptor\";\n\ninterface IProps {\n    region: Region;\n    comment: ProfileComment;\n}\n\nclass ProfileConditionDescriptor extends React.Component<IProps> {\n    render() {\n        const comment = this.props.comment;\n\n        let condition: JSX.Element | string = this.props.comment.condMessage;\n\n        if (!condition) {\n            if (comment.condType === ProfileCommentConditionType.NONE) {\n                condition = \"None\";\n            } else if (\n                comment.condType === ProfileCommentConditionType.QUEST_CLEAR\n                && comment.condValues\n                && comment.condValues.length > 0\n            ) {\n                condition = <React.Fragment>\n                    <QuestDescriptor region={this.props.region}\n                                     questId={comment.condValues[0]}\n                                     questPhase={comment.condValue2}/>\n                    &nbsp;Cleared\n                </React.Fragment>;\n            } else if (\n                comment.condType === ProfileCommentConditionType.SVT_FRIENDSHIP\n                && comment.condValues\n                && comment.condValues.length > 0\n            ) {\n                condition = `Bond Level ${comment.condValues[0]}`;\n            }\n        }\n\n        return (\n            <span>{condition}</span>\n        );\n    }\n}\n\nexport default ProfileConditionDescriptor;\n","import {Region} from \"@atlasacademy/api-connector\";\nimport {ProfileComment} from \"@atlasacademy/api-connector/dist/Schema/Profile\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport ProfileConditionDescriptor from \"../../Descriptor/ProfileConditionDescriptor\";\nimport {handleNewLine} from \"../../Helper/OutputHelper\";\n\ninterface IProps {\n    region: Region;\n    comments: ProfileComment[];\n}\n\nclass ServantProfileComments extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                <h3>Profile</h3>\n\n                <Table>\n                    <thead>\n                    <tr>\n                        <th>Condition</th>\n                        <th>Message</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.comments.map((comment, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>\n                                    <ProfileConditionDescriptor region={this.props.region} comment={comment}/>\n                                </td>\n                                <td>{handleNewLine(comment.comment)}</td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default ServantProfileComments;\n","import {CraftEssence, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport DataTable from \"../../Component/DataTable\";\nimport RawDataViewer from \"../../Component/RawDataViewer\";\nimport RarityDescriptor from \"../../Descriptor/RarityDescriptor\";\n\ninterface IProps {\n    region: Region;\n    craftEssence: CraftEssence;\n}\n\nclass CraftEssenceMainData extends React.Component<IProps> {\n    render() {\n        const craftEssence = this.props.craftEssence;\n\n        return (\n            <div>\n                <h1>\n                    {craftEssence.name}\n                </h1>\n\n                <DataTable data={{\n                    \"Data\": <RawDataViewer data={craftEssence}/>,\n                    \"Raw\": <RawDataViewer data={`https://api.atlasacademy.io/raw/${this.props.region}/equip/${craftEssence.id}?expand=true&lore=true`}/>,\n                    \"ID\": craftEssence.id,\n                    \"Collection\": craftEssence.collectionNo,\n                    \"Name\": craftEssence.name,\n                    \"Rarity\": <RarityDescriptor rarity={craftEssence.rarity}/>,\n                    \"Cost\": craftEssence.cost,\n                    \"Max Lv.\": craftEssence.lvMax,\n                    \"Base Hp\": craftEssence.hpBase,\n                    \"Base Atk\": craftEssence.atkBase,\n                    \"Max Hp\": craftEssence.hpMax,\n                    \"Max Atk\": craftEssence.atkMax,\n                }}/>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssenceMainData;\n","import {CraftEssenceBasic, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport {withRouter} from \"react-router\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport SearchableSelect from \"../../Component/SearchableSelect\";\n\ninterface Event extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps extends RouteComponentProps {\n    region: Region;\n    id: number;\n    craftEssences: CraftEssenceBasic[];\n}\n\nclass CraftEssencePicker extends React.Component<IProps> {\n    private changeCraftEssence(id: number) {\n        this.props.history.push(`/${this.props.region}/craft-essence/${id}`);\n    }\n\n    render() {\n        const craftEssences = this.props.craftEssences.slice().reverse(),\n            craftEssenceLabels = new Map<number, string>(craftEssences.map(craftEssences => [\n                craftEssences.collectionNo,\n                `${craftEssences.collectionNo.toString().padStart(4, '0')} - ${craftEssences.name}`\n            ]));\n\n        return (\n            <div>\n                <form>\n                    <Form.Group>\n                        <Form.Label>Jump to:</Form.Label>\n                        <SearchableSelect<number> id='craftEssencePicker'\n                                                  options={craftEssences.map(craftEssence => craftEssence.collectionNo)}\n                                                  labels={craftEssenceLabels}\n                                                  selected={this.props.id}\n                                                  hideAll={true}\n                                                  hideReset={true}\n                                                  disableLabelStyling={true}\n                                                  maxResults={20}\n                                                  onChange={(value?: number) => {\n                                                      if (value) {\n                                                          this.changeCraftEssence(value);\n                                                      }\n                                                  }}/>\n                    </Form.Group>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CraftEssencePicker);\n","import {CraftEssence} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\n\nimport \"./CraftEssencePortrait.css\";\n\ninterface IProps {\n    craftEssence: CraftEssence;\n}\n\nclass CraftEssencePortrait extends React.Component<IProps> {\n\n    private asset(): string | undefined {\n        const assetMap = this.props.craftEssence.extraAssets.charaGraph.equip;\n        if (!assetMap)\n            return undefined;\n\n        return Object.values(assetMap).shift();\n    }\n\n    render() {\n        const asset = this.asset();\n\n        return (\n            <div>\n                <img alt={this.props.craftEssence.name}\n                     id={'craft-essence-portrait'}\n                     src={asset}/>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssencePortrait;\n","import ServantProfileComments from \"../Servant/ServantProfileComments\";\n\nclass CraftEssenceProfileComments extends ServantProfileComments {\n}\n\nexport default CraftEssenceProfileComments;\n","import {CraftEssence, Region} from \"@atlasacademy/api-connector\";\nimport React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {formatNumber} from \"../../Helper/OutputHelper\";\n\ninterface IProps {\n    region: Region;\n    craftEssence: CraftEssence;\n}\n\nclass CraftEssenceStatGrowth extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>Level</th>\n                        <th>HP</th>\n                        <th>ATK</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {[...Array(this.props.craftEssence.lvMax)].map((_, i) => {\n                        const index = this.props.craftEssence.lvMax - i - 1;\n\n                        return (\n                            <tr key={i}>\n                                <td>{index + 1}</td>\n                                <td>{formatNumber(this.props.craftEssence.hpGrowth[index])}</td>\n                                <td>{formatNumber(this.props.craftEssence.atkGrowth[index])}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default CraftEssenceStatGrowth;\n","import {CraftEssence, CraftEssenceBasic, Region, Trait} from \"@atlasacademy/api-connector\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Col, Row, Tab, Tabs} from \"react-bootstrap\";\nimport {withRouter} from \"react-router\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport Api from \"../Api\";\nimport SkillBreakdown from \"../Breakdown/SkillBreakdown\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport Manager from \"../Setting/Manager\";\nimport CraftEssenceMainData from \"./CraftEssence/CraftEssenceMainData\";\nimport CraftEssencePicker from \"./CraftEssence/CraftEssencePicker\";\nimport CraftEssencePortrait from \"./CraftEssence/CraftEssencePortrait\";\nimport CraftEssenceProfileComments from \"./CraftEssence/CraftEssenceProfileComments\";\nimport CraftEssenceStatGrowth from \"./CraftEssence/CraftEssenceStatGrowth\";\n\ninterface IProps extends RouteComponentProps {\n    region: Region;\n    id: number;\n    tab?: string;\n}\n\ninterface IState {\n    error?: AxiosError;\n    loading: boolean;\n    id: number;\n    craftEssences: CraftEssenceBasic[];\n    craftEssence?: CraftEssence;\n}\n\nclass CraftEssencePage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            id: this.props.id,\n            craftEssences: [],\n        };\n    }\n\n    componentDidMount() {\n        Manager.setRegion(this.props.region);\n        this.loadCraftEssence();\n    }\n\n    async loadCraftEssence() {\n        try {\n            let [craftEssences, craftEssence] = await Promise.all<CraftEssenceBasic[], CraftEssence, Trait[]>([\n                Api.craftEssenceList(),\n                Api.craftEssence(this.state.id),\n                Api.traitList()\n            ]);\n\n            this.setState({\n                loading: false,\n                craftEssences,\n                craftEssence\n            });\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        if (this.state.loading || !this.state.craftEssence)\n            return <Loading/>;\n\n        const craftEssence = this.state.craftEssence;\n\n        return (\n            <div>\n                <CraftEssencePicker region={this.props.region}\n                                    craftEssences={this.state.craftEssences}\n                                    id={this.state.craftEssence.collectionNo}/>\n                <hr/>\n\n                <Row>\n                    <Col xs={{span: 12, order: 2}} lg={{span: 6, order: 1}}>\n                        <CraftEssenceMainData region={this.props.region} craftEssence={this.state.craftEssence}/>\n                    </Col>\n                    <Col xs={{span: 12, order: 1}} lg={{span: 6, order: 2}}>\n                        <CraftEssencePortrait craftEssence={this.state.craftEssence}/>\n                    </Col>\n                </Row>\n\n                <Tabs id={'ce-tabs'} defaultActiveKey={this.props.tab ?? 'effects'} transition={false}\n                      onSelect={(key: string) => {\n                          this.props.history.replace(`/${this.props.region}/craft-essence/${this.props.id}/${key}`);\n                      }}>\n                    <Tab eventKey={'effects'} title={'Effects'}>\n                        <br/>\n                        <Row>\n                            {this.state.craftEssence.skills\n                                .map((skill, index) => {\n                                    return (\n                                        <Col key={index} xs={12} lg={craftEssence.skills.length > 1 ? 6 : 12}>\n                                            <SkillBreakdown region={this.props.region}\n                                                            skill={skill}\n                                                            cooldowns={false}/>\n                                        </Col>\n                                    );\n                                })}\n                        </Row>\n                    </Tab>\n                    <Tab eventKey={'stat-growth'} title={'Stat Growth'}>\n                        <br/>\n                        <CraftEssenceStatGrowth region={this.props.region} craftEssence={craftEssence}/>\n                    </Tab>\n                    <Tab eventKey={'profile'} title={'Profile'}>\n                        <br/>\n                        <CraftEssenceProfileComments region={this.props.region}\n                                                     comments={craftEssence.profile?.comments ?? []}/>\n                    </Tab>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(CraftEssencePage);\n"],"sourceRoot":""}