{"version":3,"sources":["Page/BuffsPage.tsx"],"names":["stateCache","Map","BuffsPage","props","state","get","region","searching","buffs","set","this","type","x","upDownBuffs","up","description","down","typeDescriptions","name","setState","alert","Connection","searchBuffs","error","onSubmit","ev","preventDefault","search","Group","Label","Control","value","onChange","target","as","undefined","Object","values","BuffType","map","index","key","describeBuffType","variant","onClick","icon","faSearch","responsive","buff","id","reverseFunctions","length","React","Component"],"mappings":"wRAYIA,EAAa,IAAIC,IAAoB,IAkBnCC,E,kDACF,WAAYC,GAAgB,IAAD,gCACvB,cAAMA,IAEDC,MAAL,UAAaJ,EAAWK,IAAIF,EAAMG,eAAlC,QAA6C,CACzCC,WAAW,EACXC,MAAO,IALY,E,iEAUvBR,EAAWS,IAAIC,KAAKP,MAAMG,OAA1B,eAAsCI,KAAKN,U,uCAGtBO,GAAyB,IAAD,EAC7C,IAAK,IAAIC,KAAKC,IAAa,CACvB,GAAIA,IAAYD,GAAGE,KAAOH,EACtB,OAAOE,IAAYD,GAAGG,YAAc,MAExC,GAAIF,IAAYD,GAAGI,OAASL,EACxB,OAAOE,IAAYD,GAAGG,YAAc,QAG5C,iBAAOE,IAAiBZ,IAAIM,UAA5B,QAAqCA,I,kJAKhCD,KAAKN,MAAMc,MAASR,KAAKN,MAAMO,K,uBAChCD,KAAKS,SAAS,CAACX,MAAO,KACtBY,MAAM,8C,mDAKAV,KAAKS,SAAS,CAACZ,WAAW,EAAMC,MAAO,K,uBAEzBa,IAAWC,YAC3BZ,KAAKP,MAAMG,OACXI,KAAKN,MAAMc,KACXR,KAAKN,MAAMO,M,OAHTH,E,OAMNE,KAAKS,SAAS,CAACZ,WAAW,EAAOC,U,kDAEjCE,KAAKS,SAAS,CACVI,MAAM,EAAD,K,+IAKP,IAAD,WACL,OAAIb,KAAKN,MAAMmB,MACJ,kBAAC,IAAD,CAAaA,MAAOb,KAAKN,MAAMmB,QAGtC,6BACKb,KAAKN,MAAMG,UAAY,kBAAC,IAAD,MAAa,KAErC,0BAAMiB,SAAU,SAACC,GACbA,EAAGC,iBACH,EAAKC,WAEL,kBAAC,IAAKC,MAAN,KACI,kBAAC,IAAKC,MAAN,aACA,kBAAC,IAAKC,QAAN,CAAcC,MAAK,UAAErB,KAAKN,MAAMc,YAAb,QAAqB,GAC1Bc,SAAU,SAACP,GACP,EAAKN,SAAS,CAACD,KAAMO,EAAGQ,OAAOF,YAGrD,kBAAC,IAAKH,MAAN,KACI,kBAAC,IAAKC,MAAN,aACA,kBAAC,IAAKC,QAAN,CAAcI,GAAI,SACJH,MAAK,UAAErB,KAAKN,MAAMO,YAAb,QAAqB,MAC1BqB,SAAU,SAACP,GACiB,QAApBA,EAAGQ,OAAOF,MACV,EAAKZ,SAAS,CAACR,UAAMwB,IAErB,EAAKhB,SAAS,CAACR,KAAMc,EAAGQ,OAAOF,UAEjD,4BAAQA,MAAO,OAAf,OACCK,OAAOC,OAAOC,KAAUC,KAAI,SAAC5B,EAAM6B,GAChC,OACI,4BAAQC,IAAKD,EAAOT,MAAOpB,GACtB,EAAK+B,iBAAiB/B,SAM3C,kBAAC,IAAD,CAAQgC,QAAS,UAAWC,QAAS,kBAAM,EAAKjB,WAAhD,SAEK,IACD,kBAAC,IAAD,CAAiBkB,KAAMC,QAI/B,6BAEA,kBAAC,IAAD,CAAOC,YAAU,GACb,+BACA,4BACI,iCACA,oCACA,6CAGJ,+BACCrC,KAAKN,MAAMI,MAAM+B,KAAI,SAACS,EAAMR,GACzB,OACI,wBAAIC,IAAKD,GACL,4BAAKQ,EAAKC,IACV,4BACI,kBAAC,IAAD,CAAgB3C,OAAQ,EAAKH,MAAMG,OAAQ0C,KAAMA,KAErD,4BACKA,EAAKE,iBAAiBC,mB,GApHnCC,IAAMC,WAgIfnD","file":"static/js/18.023a6bb9.chunk.js","sourcesContent":["import {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {AxiosError} from \"axios\";\nimport React from \"react\";\nimport {Button, Form, Table} from \"react-bootstrap\";\nimport Connection from \"../Api/Connection\";\nimport Buff, {BuffType} from \"../Api/Data/Buff\";\nimport Region from \"../Api/Data/Region\";\nimport ErrorStatus from \"../Component/ErrorStatus\";\nimport Loading from \"../Component/Loading\";\nimport BuffDescriptor, {typeDescriptions, upDownBuffs} from \"../Descriptor/BuffDescriptor\";\n\nlet stateCache = new Map<Region, IState>([]);\n\ninterface ChangeEvent extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProps {\n    region: Region;\n}\n\ninterface IState {\n    error?: AxiosError;\n    searching: boolean;\n    buffs: Buff[];\n    name?: string;\n    type?: BuffType;\n}\n\nclass BuffsPage extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = stateCache.get(props.region) ?? {\n            searching: false,\n            buffs: []\n        };\n    }\n\n    componentDidUpdate() {\n        stateCache.set(this.props.region, {...this.state});\n    }\n\n    private describeBuffType(type: BuffType): string {\n        for (let x in upDownBuffs) {\n            if (upDownBuffs[x].up === type)\n                return upDownBuffs[x].description + ' Up';\n\n            if (upDownBuffs[x].down === type)\n                return upDownBuffs[x].description + ' Down';\n        }\n\n        return typeDescriptions.get(type) ?? type;\n    }\n\n    private async search() {\n        // no filter set\n        if (!this.state.name && !this.state.type) {\n            this.setState({buffs: []});\n            alert('Please refine the results before searching');\n            return;\n        }\n\n        try {\n            await this.setState({searching: true, buffs: []});\n\n            const buffs = await Connection.searchBuffs(\n                this.props.region,\n                this.state.name,\n                this.state.type\n            );\n\n            this.setState({searching: false, buffs});\n        } catch (e) {\n            this.setState({\n                error: e\n            });\n        }\n    }\n\n    render() {\n        if (this.state.error)\n            return <ErrorStatus error={this.state.error}/>;\n\n        return (\n            <div>\n                {this.state.searching ? <Loading/> : null}\n\n                <form onSubmit={(ev: React.FormEvent) => {\n                    ev.preventDefault();\n                    this.search();\n                }}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control value={this.state.name ?? ''}\n                                      onChange={(ev: ChangeEvent) => {\n                                          this.setState({name: ev.target.value});\n                                      }}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control as={'select'}\n                                      value={this.state.type ?? 'all'}\n                                      onChange={(ev: ChangeEvent) => {\n                                          if (ev.target.value === 'all')\n                                              this.setState({type: undefined});\n                                          else\n                                              this.setState({type: ev.target.value as BuffType});\n                                      }}>\n                            <option value={'all'}>All</option>\n                            {Object.values(BuffType).map((type, index) => {\n                                return (\n                                    <option key={index} value={type}>\n                                        {this.describeBuffType(type)}\n                                    </option>\n                                );\n                            })}\n                        </Form.Control>\n                    </Form.Group>\n                    <Button variant={'primary'} onClick={() => this.search()}>\n                        Search\n                        {' '}\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </Button>\n                </form>\n\n                <hr/>\n\n                <Table responsive>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Buff</th>\n                        <th>Usage Count</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.buffs.map((buff, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{buff.id}</td>\n                                <td>\n                                    <BuffDescriptor region={this.props.region} buff={buff}/>\n                                </td>\n                                <td>\n                                    {buff.reverseFunctions.length}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default BuffsPage;\n"],"sourceRoot":""}