{"version":3,"sources":["Setting/Option.tsx","Setting/Manager.tsx","Api/Data/ClassName.tsx","Setting/SettingForm.tsx","Component/Navigation.tsx","Api/Connection.tsx","Component/BuffIcon.tsx","Component/ClassIcon.tsx","Component/DataTable.tsx","Component/Loading.tsx","Helper.tsx","Page/ServantPage.tsx","Component/RarityStars.tsx","Component/ServantThumbnail.tsx","Page/ServantsPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LanguageOption","RegionOption","ClassName","callbacks","Manager","value","window","localStorage","getItem","language","Object","values","find","v","DEFAULT","region","JP","undefined","setItem","triggerCallbacks","callback","push","forEach","call","SettingForm","props","state","onUpdate","syncSettings","this","setState","setLanguage","setRegion","Form","Group","Label","Control","as","onChange","ev","updateRegion","target","map","updateLanguage","React","Component","Navigation","showSettings","Navbar","bg","variant","expand","Container","to","className","Toggle","Collapse","Nav","NavItem","Link","href","icon","faDiscord","faGithub","Button","onClick","faCog","Modal","show","onHide","hideSettings","Header","closeButton","Title","Body","host","fetch","endpoint","a","axios","get","response","data","option","NA","servantListCache","Map","Connection","id","query","ENGLISH","getCacheableServantList","jp","na","names","entity","name","list","set","BuffIcon","alt","src","location","style","height","classTypes","classIds","SABER","ARCHER","LANCER","RIDER","CASTER","ASSASSIN","BERSERKER","SHIELDER","RULER","ALTER_EGO","AVENGER","ClassIcon","classId","has","rarity","type","DataTable","header","Table","bordered","hover","keys","key","index","Loading","asPercent","buffIconPath","deathChanceIcon","hitCountIcon","npGainIcon","starGenIcon","ServantPage","loading","parseInt","servants","loadServant","Promise","all","servantList","servant","history","renderServantPicker","Row","Col","renderServantMainData","renderServantPortrait","renderServantAdvancedData","FormControl","custom","changeServant","collectionNo","cost","lvMax","hpMax","atkMax","gender","attribute","traits","trait","join","extraAssets","charaGraph","ascension","starAbsorb","starGen","instantDeathChance","npGain","buster","arts","quick","extra","defence","showHits","hitsDistribution","hits","hit","length","withRouter","fillChars","count","character","Array","fill","RarityStars","ServantThumbnail","ServantsPage","then","striped","textAlign","width","align","face","App","updateSettings","path","component","render","match","params","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c7faef1.chunk.js","sourcesContent":["export enum LanguageOption {\n    DEFAULT = 'Default',\n    ENGLISH = 'English',\n}\n\nexport enum RegionOption {\n    JP = 'JP',\n    NA = 'NA'\n}\n","import {LanguageOption, RegionOption} from \"./Option\";\n\nconst languageKey = 'language',\n    regionKey = 'region';\n\nconst callbacks: Function[] = [];\n\nclass Manager {\n    static language(): LanguageOption {\n        const value = window.localStorage.getItem(languageKey),\n            language = Object.values(LanguageOption).find(v => v === value);\n\n        return language ?? LanguageOption.DEFAULT;\n    }\n\n    static region(): RegionOption {\n        const value = window.localStorage.getItem(regionKey),\n            region = Object.values(RegionOption).find(v => v === value);\n\n        return region ?? RegionOption.JP;\n    }\n\n    static setLanguage(value: string) {\n        const language = Object.values(LanguageOption).find(v => v === value);\n        if (language === undefined)\n            return;\n\n        window.localStorage.setItem(languageKey, language);\n        Manager.triggerCallbacks();\n    }\n\n    static setRegion(value: string) {\n        const region = Object.values(RegionOption).find(v => v === value);\n        if (region === undefined)\n            return;\n\n        window.localStorage.setItem(regionKey, region);\n        Manager.triggerCallbacks();\n    }\n\n    static onUpdate(callback: Function) {\n        callbacks.push(callback);\n    }\n\n    private static triggerCallbacks()\n    {\n        callbacks.forEach(callback => {\n            callback.call(null);\n        });\n    }\n}\n\nexport default Manager;\n","enum ClassName {\n    SABER = \"saber\",\n    ARCHER = \"archer\",\n    LANCER = \"lancer\",\n    RIDER = \"rider\",\n    CASTER = \"caster\",\n    ASSASSIN = \"assassin\",\n    BERSERKER = \"berserker\",\n    SHIELDER = \"shielder\",\n    RULER = \"ruler\",\n    ALTER_EGO = \"alterEgo\",\n    AVENGER = \"avenger\",\n    GRAND_CASTER = \"grandCaster\",\n    BEAST_II = \"beastII\",\n    BEAST_I = \"beastI\",\n    MOON_CANCER = \"moonCancer\",\n    BEAST_IIIR = \"beastIIIR\",\n    FOREIGNER = \"foreigner\",\n    BEAST_IIIL = \"beastIIIL\",\n    BEAST_UNKNOWN = \"beastUnknown\",\n    ALL = \"ALL\",\n}\n\nexport default ClassName;\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport Manager from \"./Manager\";\nimport {LanguageOption, RegionOption} from \"./Option\";\n\ninterface Event extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IState {\n    region: RegionOption,\n    language: LanguageOption\n}\n\nclass SettingForm extends React.Component<any, IState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            region: Manager.region(),\n            language: Manager.language(),\n        }\n\n        Manager.onUpdate(() => this.syncSettings());\n    }\n\n    private syncSettings() {\n        this.setState({\n            region: Manager.region(),\n            language: Manager.language(),\n        });\n    }\n\n    updateLanguage(value: string) {\n        Manager.setLanguage(value);\n    }\n\n    updateRegion(value: string) {\n        Manager.setRegion(value);\n    }\n\n    render() {\n        return (\n            <div>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Region</Form.Label>\n                        <Form.Control as={'select'} value={this.state.region}\n                                      onChange={(ev: Event) => this.updateRegion(ev.target.value)}>\n                            {Object.values(RegionOption).map(v => (\n                                <option value={v}>{v}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Language</Form.Label>\n                        <Form.Control as={'select'} value={this.state.language}\n                                      onChange={(ev: Event) => this.updateLanguage(ev.target.value)}>\n                            {Object.values(LanguageOption).map(v => (\n                                <option value={v}>{v}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default SettingForm;\n","import {faDiscord, faGithub} from \"@fortawesome/free-brands-svg-icons\";\nimport {faCog} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {Button, Container, Modal, Nav, Navbar, NavItem} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport React from \"react\";\nimport SettingForm from \"../Setting/SettingForm\";\n\ninterface IState {\n    showSettings: boolean;\n}\n\nclass Navigation extends React.Component<any, IState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            showSettings: false,\n        };\n    }\n\n    hideSettings() {\n        this.setState({showSettings: false});\n    }\n\n    showSettings() {\n        this.setState({showSettings: true});\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar bg={\"dark\"} variant={'dark'} expand={\"lg\"}>\n                    <Container>\n                        <Link to=\"/\" className={'navbar-brand'}>AA-DB</Link>\n                        <Navbar.Toggle/>\n\n                        <Navbar.Collapse>\n                            <Nav>\n                                <Link to=\"/servants\" className={'nav-link'}>\n                                    <NavItem>Servants</NavItem>\n                                </Link>\n                            </Nav>\n                            <Nav className={'ml-auto'}>\n                                <Nav.Link href={'https://discord.gg/TKJmuCR'} target={'_blank'}>\n                                    <FontAwesomeIcon icon={faDiscord}/>\n                                </Nav.Link>\n                                <Nav.Link href={'https://github.com/atlasacademy/aa-db'} target={'_blank'}>\n                                    <FontAwesomeIcon icon={faGithub}/>\n                                </Nav.Link>\n                                <Button variant={\"primary\"} onClick={() => this.showSettings()}>\n                                    <FontAwesomeIcon icon={faCog}/>\n                                </Button>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n\n                <Modal show={this.state.showSettings} onHide={() => this.hideSettings()}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Settings</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <SettingForm/>\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n\n}\n\nexport default Navigation;\n","import axios from \"axios\";\nimport Manager from \"../Setting/Manager\";\nimport {LanguageOption, RegionOption} from \"../Setting/Option\";\nimport ServantEntity from \"./Data/ServantEntity\";\nimport ServantListEntity from \"./Data/ServantListEntity\";\n\nconst host = 'https://api.atlasacademy.io';\nconst fetch = async function <T>(endpoint: string): Promise<T> {\n    const response = await axios.get<T>(endpoint);\n\n    return response.data;\n}\nconst region = function (option?: RegionOption): string {\n    option = option ?? Manager.region();\n\n    if (option === RegionOption.NA)\n        return 'NA';\n\n    return 'JP';\n}\nconst servantListCache = new Map<RegionOption, ServantListEntity[]>();\n\nclass Connection {\n\n    public static servant(id: number): Promise<ServantEntity> {\n        let query = '?lore=true' + (\n            Manager.language() === LanguageOption.ENGLISH ? '&lang=en' : ''\n        );\n\n        return fetch<ServantEntity>(`${host}/nice/${region()}/servant/${id}${query}`);\n    }\n\n    public static async servantList(): Promise<ServantListEntity[]> {\n        if (Manager.region() === RegionOption.NA) {\n            return Connection.getCacheableServantList(RegionOption.NA);\n        } else if (Manager.region() === RegionOption.JP && Manager.language() === LanguageOption.DEFAULT) {\n            return Connection.getCacheableServantList(RegionOption.JP);\n        }\n\n        const jp = await Connection.getCacheableServantList(RegionOption.JP),\n            na = await Connection.getCacheableServantList(RegionOption.NA),\n            names = new Map<number, string>(na.map(entity => [entity.id, entity.name]));\n\n        return jp.map<ServantListEntity>(entity => {\n            return {\n                ...entity,\n                name: names.get(entity.id) ?? entity.name,\n            };\n        });\n    }\n\n    private static async getCacheableServantList(option: RegionOption): Promise<ServantListEntity[]> {\n        let list = servantListCache.get(option);\n        if (list !== undefined)\n            return list;\n\n        list = await fetch<ServantListEntity[]>(`${host}/export/${region(option)}/basic_servant.json`);\n        servantListCache.set(option, list);\n\n        return list;\n    }\n\n}\n\nexport default Connection;\n","import React from \"react\";\n\ninterface IProp {\n    location: string;\n    height?: number;\n}\n\nclass BuffIcon extends React.Component<IProp> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location} style={{height: this.props.height ?? 25}}/>\n        );\n    }\n\n}\n\nexport default BuffIcon;\n","import React from \"react\";\nimport ClassName from \"../Api/Data/ClassName\";\n\nconst classTypes = new Map<number, number>([\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 3],\n]);\nconst unknownClassType = 3;\nconst classIds = new Map<ClassName, number>([\n    [ClassName.SABER, 1],\n    [ClassName.ARCHER, 2],\n    [ClassName.LANCER, 3],\n    [ClassName.RIDER, 4],\n    [ClassName.CASTER, 5],\n    [ClassName.ASSASSIN, 6],\n    [ClassName.BERSERKER, 7],\n    [ClassName.SHIELDER, 8],\n    [ClassName.RULER, 9],\n    [ClassName.ALTER_EGO, 10],\n    [ClassName.AVENGER, 11],\n]);\nconst unknownClassId = 12;\n\ninterface IProps {\n    className: ClassName;\n    rarity?: number;\n    height?: number;\n}\n\nclass ClassIcon extends React.Component<IProps> {\n    render() {\n        return (\n            <img alt={''} src={this.location()}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n    private location(): string {\n        let classId = classIds.has(this.props.className) ? classIds.get(this.props.className) : unknownClassId,\n            rarity = this.props.rarity ?? 5,\n            type = classTypes.has(rarity) ? classTypes.get(rarity) : unknownClassType;\n\n        return `https://assets.atlasacademy.io/GameData/NA/ClassIcons/class${type}_${classId}.png`;\n    }\n}\n\nexport default ClassIcon;\n","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\n\nimport \"./DataTable.css\";\n\ninterface IProp {\n    header?: JSX.Element | string,\n    data: {\n        [key: string]: JSX.Element | string | number;\n    }\n}\n\nclass DataTable extends React.Component<IProp> {\n    render() {\n        return (\n            <div>\n                {this.props.header ? (\n                    <div className={'data-header'}>\n                        {this.props.header}\n                    </div>\n                ) : null}\n\n                <Table bordered hover className={'data-table'}>\n                    <tbody>\n                    {Object.keys(this.props.data).map((key, index) => {\n                        return (\n                            <tr key={index}>\n                                <th>{key}</th>\n                                <td>{this.props.data[key]}</td>\n                            </tr>\n                        );\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default DataTable;\n","import React from \"react\";\n\nfunction Loading() {\n    return (\n        <div>\n            Loading ...\n        </div>\n    );\n}\n\nexport default Loading;\n","export function asPercent(value: number | undefined): string {\n    const decimal = (value ?? 0) / 10;\n\n    return `${decimal}%`;\n}\n","import React from \"react\";\nimport {Col, FormControl, Row} from \"react-bootstrap\";\nimport {withRouter} from 'react-router';\nimport {RouteComponentProps} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport ServantEntity from \"../Api/Data/ServantEntity\";\nimport ServantListEntity from \"../Api/Data/ServantListEntity\";\nimport BuffIcon from \"../Component/BuffIcon\";\nimport ClassIcon from \"../Component/ClassIcon\";\nimport DataTable from \"../Component/DataTable\";\nimport Loading from \"../Component/Loading\";\nimport {asPercent} from \"../Helper\";\n\nimport './ServantPage.css';\n\nconst buffIconPath = 'https://assets.atlasacademy.io/GameData/JP/BuffIcons',\n    deathChanceIcon = `${buffIconPath}/bufficon_337.png`,\n    hitCountIcon = `${buffIconPath}/bufficon_349.png`,\n    npGainIcon = `${buffIconPath}/bufficon_303.png`,\n    starGenIcon = `${buffIconPath}/bufficon_310.png`;\n\ninterface Event extends React.ChangeEvent<HTMLInputElement> {\n\n}\n\ninterface IProp extends RouteComponentProps {\n    id: string;\n}\n\ninterface IState {\n    loading: boolean;\n    id: number;\n    servants: ServantListEntity[];\n    servant?: ServantEntity;\n}\n\nclass ServantPage extends React.Component<IProp, IState> {\n    constructor(props: IProp) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            id: parseInt(this.props.id),\n            servants: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadServant();\n    }\n\n    async loadServant() {\n        let [servants, servant] = await Promise.all([\n            Connection.servantList(),\n            Connection.servant(this.state.id)\n        ]);\n\n        this.setState({\n            loading: false,\n            servants,\n            servant\n        });\n    }\n\n    changeServant(id: number) {\n        this.props.history.push(`/servant/${id}`);\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div id={'servant'}>\n                {this.renderServantPicker()}\n                <hr/>\n\n                <Row>\n                    <Col>\n                        {this.renderServantMainData()}\n                    </Col>\n                    <Col>\n                        {this.renderServantPortrait()}\n                    </Col>\n                </Row>\n\n                <br/>\n\n                {this.renderServantAdvancedData()}\n            </div>\n        );\n    }\n\n    renderServantPicker() {\n        return (\n            <div>\n                Jump to:\n                <FormControl as={\"select\"} custom\n                             onChange={(ev: Event) => {\n                                 this.changeServant(parseInt(ev.target.value));\n                             }}\n                             value={this.state.id}>\n                    {this.state.servants.map((servant, index) => {\n                        return (\n                            <option key={index} value={servant.collectionNo}>\n                                {servant.name}\n                            </option>\n                        );\n                    })}\n                </FormControl>\n            </div>\n        );\n    }\n\n    renderServantMainData() {\n        if (this.state.servant === undefined)\n            return null;\n\n        return (\n            <div>\n                <h1>\n                    <ClassIcon className={this.state.servant.className} rarity={this.state.servant.rarity}/>\n                    &nbsp;\n                    {this.state.servant.name}\n                </h1>\n\n                <DataTable data={{\n                    \"ID\": this.state.servant.id,\n                    \"Collection\": this.state.servant.collectionNo,\n                    \"Name\": this.state.servant.name,\n                    \"Class\": this.state.servant.className,\n                    \"Rarity\": this.state.servant.rarity,\n                    \"Cost\": this.state.servant.cost,\n                    \"Max Lv.\": this.state.servant.lvMax,\n                    \"Max Hp\": this.state.servant.hpMax,\n                    \"Max Atk\": this.state.servant.atkMax,\n                    \"Gender\": this.state.servant.gender,\n                    \"Attribute\": this.state.servant.attribute,\n                    \"Traits\": this.state.servant.traits.map((trait) => {\n                        return trait.name;\n                    }).join(', '),\n                }}/>\n            </div>\n        );\n    }\n\n    renderServantPortrait() {\n        if (this.state.servant === undefined)\n            return null;\n\n        return (\n            <div>\n                <img alt={this.state.servant.name}\n                     className={'profile'}\n                     src={this.state.servant.extraAssets.charaGraph.ascension[\"1\"]}/>\n            </div>\n        );\n    }\n\n    renderServantAdvancedData() {\n        if (this.state.servant === undefined)\n            return null;\n\n        const servant = this.state.servant;\n\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={starGenIcon}/>&nbsp;Crit Stars\n                                </div>\n                            )}\n                            data={{\n                                \"Star Absorb\": servant.starAbsorb,\n                                \"Star Gen\": asPercent(servant.starGen),\n                            }}/>\n\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={deathChanceIcon}/>&nbsp;Instant Death\n                                </div>\n                            )}\n                            data={{\n                                \"Death Chance\": asPercent(servant.instantDeathChance),\n                            }}/>\n                    </Col>\n\n                    <Col>\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={npGainIcon}/>&nbsp;NP Gain\n                                </div>\n                            )}\n                            data={{\n                                \"Buster\": asPercent(servant.npGain.buster),\n                                \"Arts\": asPercent(servant.npGain.arts),\n                                \"Quick\": asPercent(servant.npGain.quick),\n                                \"Extra\": asPercent(servant.npGain.extra),\n                                \"Defense\": asPercent(servant.npGain.defence),\n                            }}/>\n                    </Col>\n\n                    <Col>\n                        <DataTable\n                            header={(\n                                <div>\n                                    <BuffIcon location={hitCountIcon}/>\n                                    &nbsp;\n                                    Hit Count\n                                </div>\n                            )}\n                            data={{\n                                \"Buster\": ServantPage.showHits(servant.hitsDistribution.buster),\n                                \"Arts\": ServantPage.showHits(servant.hitsDistribution.arts),\n                                \"Quick\": ServantPage.showHits(servant.hitsDistribution.quick),\n                                \"Extra\": ServantPage.showHits(servant.hitsDistribution.extra),\n                            }}/>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    private static showHits(hits: number[] | undefined): JSX.Element | string {\n        if (hits === undefined)\n            return '';\n\n        return <span>\n            {hits.map((hit, index) => {\n                return (index > 0 ? ', ' : '') + hit + '%';\n            })}\n            &nbsp;-&nbsp;\n            {hits.length} Hits\n        </span>\n    }\n}\n\nexport default withRouter(ServantPage);\n","import React from \"react\";\n\ninterface IProps {\n    rarity: number;\n}\n\nconst fillChars = function (count: number, character: string): string {\n    return (new Array(count)).fill(null).map(v => character).join('');\n}\n\nclass RarityStars extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                {\n                    fillChars(this.props.rarity, '★')\n                    + fillChars(5 - this.props.rarity, '☆')\n                }\n            </div>\n        );\n    }\n}\n\nexport default RarityStars;\n","import React from \"react\";\n\ninterface IProps {\n    rarity: number;\n    location: string;\n    height?: number;\n}\n\nclass ServantThumbnail extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img alt={''} src={this.props.location}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n}\n\nexport default ServantThumbnail;\n","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport Connection from \"../Api/Connection\";\nimport ServantListEntity from \"../Api/Data/ServantListEntity\";\nimport ClassIcon from \"../Component/ClassIcon\";\nimport Loading from \"../Component/Loading\";\nimport RarityStars from \"../Component/RarityStars\";\nimport ServantThumbnail from \"../Component/ServantThumbnail\";\n\nimport './ServantsPage.css';\n\ninterface IProps {\n}\n\ninterface IState {\n    loading: boolean;\n    servants: ServantListEntity[];\n}\n\nclass ServantsPage extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            servants: [],\n        };\n    }\n\n    componentDidMount() {\n        Connection.servantList().then(servantList => {\n            this.setState({\n                loading: false,\n                servants: servantList\n            });\n        });\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading/>\n\n        return (\n            <div id=\"servants\">\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Class</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Thumbnail</th>\n                        <th>Name</th>\n                        <th>Rarity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.servants.map((servant, index) => {\n                        return <tr key={index}>\n                            <td align={\"center\"}>\n                                <Link to={`/servant/${servant.collectionNo}`}>\n                                    {servant.collectionNo}\n                                </Link>\n                            </td>\n                            <td align={\"center\"}>\n                                <ClassIcon className={servant.className} rarity={servant.rarity} height={50} />\n                            </td>\n                            <td align={\"center\"}>\n                                <Link to={`/servant/${servant.collectionNo}`}>\n                                    <ServantThumbnail rarity={servant.rarity} location={servant.face} height={50}/>\n                                </Link>\n                            </td>\n                            <td>\n                                <Link to={`/servant/${servant.collectionNo}`}>\n                                    {servant.name}\n                                </Link>\n                            </td>\n                            <td>\n                                <RarityStars rarity={servant.rarity}/>\n                            </td>\n                        </tr>\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n\n}\n\nexport default ServantsPage;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport {Container} from \"react-bootstrap\";\nimport {HashRouter as Router, Route, Switch,} from \"react-router-dom\";\nimport Navigation from \"./Component/Navigation\";\nimport ServantPage from \"./Page/ServantPage\";\nimport ServantsPage from \"./Page/ServantsPage\";\nimport Manager from \"./Setting/Manager\";\nimport {LanguageOption, RegionOption} from \"./Setting/Option\";\n\ninterface IState {\n    region: RegionOption,\n    language: LanguageOption,\n}\n\nclass App extends React.Component<any, IState>{\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            region: Manager.region(),\n            language: Manager.language(),\n        };\n\n        Manager.onUpdate(() => this.updateSettings());\n    }\n\n    private updateSettings() {\n        this.setState({\n            region: Manager.region(),\n            language: Manager.language(),\n        });\n    }\n\n    render() {\n        return (\n            <Router>\n                <Navigation/>\n                <br/>\n\n                <Container key={`${this.state.region}-${this.state.language}`}>\n                    <Switch>\n                        <Route path=\"/servants\" component={ServantsPage}/>\n                        <Route path=\"/servant/:id\" render={(\n                            props => <ServantPage key={props.match.params.id} id={props.match.params.id}/>\n                        )}/>\n                        <Route path=\"/\" component={ServantsPage}/>\n                    </Switch>\n                </Container>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}