{"version":3,"sources":["Component/Navigation.tsx","Component/Loading.tsx","Api/Data/ClassName.tsx","Route/Servant.tsx","Api/Connection.tsx","Component/ClassIcon.tsx","Component/RarityStars.tsx","Component/ServantThumbnail.tsx","Route/Servants.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","Navbar","bg","Brand","to","Collapse","Nav","NavItem","Loading","ClassName","Servant","props","state","loading","id","match","params","this","React","Component","fetch","endpoint","a","axios","get","response","data","Connection","classTypes","Map","classIds","SABER","ARCHER","LANCER","RIDER","CASTER","ASSASSIN","BERSERKER","SHIELDER","RULER","ALTER_EGO","AVENGER","ClassIcon","src","location","style","height","undefined","classId","has","className","rarity","type","fillChars","count","character","Array","fill","map","v","join","RarityStars","ServantThumbnail","Servants","servants","servantList","then","setState","Table","striped","bordered","hover","textAlign","width","servant","index","key","align","collectionNo","face","name","App","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76107674.chunk.js","sourcesContent":["import {Nav, Navbar, NavItem} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport React from \"react\";\n\nfunction Navigation() {\n    return (\n        <Navbar bg=\"dark\">\n            <Navbar.Brand>\n                <Link to=\"/\">AA-DB</Link>\n            </Navbar.Brand>\n\n            <Navbar.Collapse>\n                <Nav>\n                    <Link to=\"/servants\">\n                        <NavItem>Servants</NavItem>\n                    </Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default Navigation;\n","import React from \"react\";\n\nfunction Loading() {\n    return (\n        <div>\n            Loading ...\n        </div>\n    );\n}\n\nexport default Loading;\n","enum ClassName {\n    SABER = \"saber\",\n    ARCHER = \"archer\",\n    LANCER = \"lancer\",\n    RIDER = \"rider\",\n    CASTER = \"caster\",\n    ASSASSIN = \"assassin\",\n    BERSERKER = \"berserker\",\n    SHIELDER = \"shielder\",\n    RULER = \"ruler\",\n    ALTER_EGO = \"alterEgo\",\n    AVENGER = \"avenger\",\n    GRAND_CASTER = \"grandCaster\",\n    BEAST_II = \"beastII\",\n    BEAST_I = \"beastI\",\n    MOON_CANCER = \"moonCancer\",\n    BEAST_IIIR = \"beastIIIR\",\n    FOREIGNER = \"foreigner\",\n    BEAST_IIIL = \"beastIIIL\",\n    BEAST_UNKNOWN = \"beastUnknown\",\n    ALL = \"ALL\",\n}\n\nexport default ClassName;\n","import React from \"react\";\nimport Loading from \"../Component/Loading\";\n\ninterface IState {\n    loading: boolean;\n    id: number;\n}\n\nclass Servant extends React.Component<any, IState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            id: this.props.match.params.id\n        };\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading/>;\n\n        return (\n            <div>\n\n            </div>\n        );\n    }\n}\n\nexport default Servant;\n","import ServantListEntity from \"./Data/ServantListEntity\";\n\nimport axios from \"axios\";\n\nconst host = 'https://api.atlasacademy.io';\nconst fetch = async function <T>(endpoint: string): Promise<T>\n{\n    const response = await axios.get<T>(endpoint);\n\n    return response.data;\n}\n\nclass Connection {\n\n    public static async servantList(): Promise<ServantListEntity[]>\n    {\n        return fetch<ServantListEntity[]>(`${host}/export/NA/basic_servant.json`);\n    }\n\n}\n\nexport default Connection;\n","import React from \"react\";\nimport ClassName from \"../Api/Data/ClassName\";\n\nconst classTypes = new Map<number, number>([\n    [1, 1],\n    [2, 1],\n    [3, 2],\n    [4, 3],\n    [5, 3],\n]);\nconst unknownClassType = 3;\nconst classIds = new Map<ClassName, number>([\n    [ClassName.SABER, 1],\n    [ClassName.ARCHER, 2],\n    [ClassName.LANCER, 3],\n    [ClassName.RIDER, 4],\n    [ClassName.CASTER, 5],\n    [ClassName.ASSASSIN, 6],\n    [ClassName.BERSERKER, 7],\n    [ClassName.SHIELDER, 8],\n    [ClassName.RULER, 9],\n    [ClassName.ALTER_EGO, 10],\n    [ClassName.AVENGER, 11],\n]);\nconst unknownClassId = 12;\n\ninterface IProps {\n    className: ClassName;\n    rarity?: number;\n    height?: number;\n}\n\nclass ClassIcon extends React.Component<IProps> {\n    render() {\n        return (\n            <img src={this.location()}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n    private location(): string {\n        let classId = classIds.has(this.props.className) ? classIds.get(this.props.className) : unknownClassId,\n            rarity = this.props.rarity ?? 5,\n            type = classTypes.has(rarity) ? classTypes.get(rarity) : unknownClassType;\n\n        return `https://assets.atlasacademy.io/GameData/NA/ClassIcons/class${type}_${classId}.png`;\n    }\n}\n\nexport default ClassIcon;\n","import React from \"react\";\n\ninterface IProps {\n    rarity: number;\n}\n\nconst fillChars = function (count: number, character: string): string {\n    return (new Array(count)).fill(null).map(v => character).join('');\n}\n\nclass RarityStars extends React.Component<IProps> {\n    render() {\n        return (\n            <div>\n                {\n                    fillChars(this.props.rarity, '★')\n                    + fillChars(5 - this.props.rarity, '☆')\n                }\n            </div>\n        );\n    }\n}\n\nexport default RarityStars;\n","import React from \"react\";\n\ninterface IProps {\n    rarity: number;\n    location: string;\n    height?: number;\n}\n\nclass ServantThumbnail extends React.Component<IProps> {\n\n    render() {\n        return (\n            <img src={this.props.location}\n                 style={this.props.height ? {height: this.props.height} : undefined}/>\n        );\n    }\n\n}\n\nexport default ServantThumbnail;\n","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport Connection from \"../Api/Connection\";\nimport ServantListEntity from \"../Api/Data/ServantListEntity\";\nimport ClassIcon from \"../Component/ClassIcon\";\nimport Loading from \"../Component/Loading\";\nimport RarityStars from \"../Component/RarityStars\";\nimport ServantThumbnail from \"../Component/ServantThumbnail\";\n\nimport './Servants.css';\n\ninterface IProps {\n}\n\ninterface IState {\n    loading: boolean;\n    servants: ServantListEntity[];\n}\n\nclass Servants extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            servants: [],\n        };\n    }\n\n    componentDidMount() {\n        Connection.servantList().then(servantList => {\n            this.setState({\n                loading: false,\n                servants: servantList\n            });\n        });\n    }\n\n    render() {\n        if (this.state.loading)\n            return <Loading/>\n\n        return (\n            <div id=\"servants\">\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th style={{textAlign: \"center\", width: '1px'}}>#</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Class</th>\n                        <th style={{textAlign: \"center\", width: '1px'}}>Thumbnail</th>\n                        <th>Name</th>\n                        <th>Rarity</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.servants.map((servant, index) => {\n                        return <tr key={index}>\n                            <td align={\"center\"}>{servant.collectionNo}</td>\n                            <td align={\"center\"}>\n                                <ClassIcon className={servant.className} rarity={servant.rarity} height={50} />\n                            </td>\n                            <td align={\"center\"}>\n                                <ServantThumbnail rarity={servant.rarity} location={servant.face} height={50}/>\n                            </td>\n                            <td>{servant.name}</td>\n                            <td>\n                                <RarityStars rarity={servant.rarity}/>\n                            </td>\n                        </tr>\n                    })}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n\n}\n\nexport default Servants;\n","import React from 'react';\nimport Navigation from \"./Component/Navigation\";\nimport Servant from \"./Route/Servant\";\nimport Servants from \"./Route/Servants\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    return (\n        <Router>\n            <Navigation/>\n\n            <Switch>\n                <Route path=\"/servants\" component={Servants}/>\n                <Route path=\"/servant/:id\" component={Servant}/>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}